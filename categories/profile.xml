<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>A Magic Land Declared by David (Posts about profile)</title><link>https://alinbxsorcerer.github.io/</link><description></description><atom:link href="https://alinbxsorcerer.github.io/categories/profile.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:davad.fhl.wang@foxmail.com"&gt;David&lt;/a&gt; </copyright><lastBuildDate>Thu, 19 Dec 2019 10:11:01 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Debugging and Profiling Python Scripts</title><link>https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#foreword" id="id5"&gt;0) Foreword&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#what-is-debugging" id="id6"&gt;1) What is debugging?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#python-debugging-techniques" id="id7"&gt;Python debugging techniques&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#error-handling-exception-handling" id="id8"&gt;2) Error handling (exception handling)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#debuggers-tools" id="id9"&gt;3) Debuggers tools&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#the-pdb-debugger" id="id10"&gt;The pdb debugger&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#within-an-interpreter" id="id11"&gt;Within an interpreter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#from-a-command-line" id="id12"&gt;From a command line&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#within-a-python-script" id="id13"&gt;Within a Python script&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#debugging-basic-program-crashes" id="id14"&gt;4) Debugging basic program crashes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#profiling-and-timing-programs" id="id15"&gt;5) Profiling and timing programs&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#the-cprofile-module" id="id16"&gt;The cProfile module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#timeit" id="id17"&gt;timeit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#making-programs-run-faster" id="id18"&gt;6) Making programs run faster&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#summary" id="id19"&gt;Summary&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#questions" id="id20"&gt;Questions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#answer" id="id21"&gt;Answer:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#further-reading" id="id22"&gt;Further reading&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="foreword"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id5"&gt;0) Foreword&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Debugging and profiling play an important role in Python development. The debugger helps programmers to analyze the complete code. The debugger sets the breakpoints whereas the profilers run our code and give us the details of the execution time. The profilers will identify the bottlenecks in your programs. In this chapter, we'll learn about the pdb Python debugger, cProfile module, and timeit module to time the execution of Python code.&lt;/p&gt;
&lt;p&gt;In this chapter, you'll learn about the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Python debugging techniques&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Error handling (exception handling)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debugger tools&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debugging basic program crashes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Profiling and timing programs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Making programs run faster&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-debugging"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id6"&gt;1) What is debugging?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Debugging is a process that resolves the issues that occur in your code and prevent your software from running properly. In Python, debugging is very easy. The Python debugger sets conditional breakpoints and debugs the source code one line at a time. We'll debug our Python scripts using a pdb module that's present in the Python standard library.&lt;/p&gt;
&lt;div class="section" id="python-debugging-techniques"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id7"&gt;Python debugging techniques&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To better debug a Python program, various techniques are available. We're going to look at four techniques for Python debugging:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;print() statement: This is the simplest way of knowing what's exactly happening so you can check what has been executed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;logging&lt;/strong&gt;: This is like a print statement but with more contextual information so you can understand it fully.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;*pdb* debugger: This is a commonly used debugging technique. The advantage of using pdb is that you can use pdb from the command line, within an interpreter, and within a program.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IDE debugger: IDE has an integrated debugger. It allows developers to execute their code and then the developer can inspect while the program executes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="error-handling-exception-handling"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id8"&gt;2) Error handling (exception handling)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section, we're going to learn how Python handles exceptions. But first, what is an exception? An exception is an error that occurs during program execution. Whenever any error occurs, Python generates an exception that will be handled using a try…except block. Some exceptions can't be handled by programs so they result in error messages. Now, we are going to see some exception examples.&lt;/p&gt;
&lt;p&gt;In your Terminal, start the python3 interactive console and we will see some exception examples:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;"help"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copyright"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"credits"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;"license"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-2"&gt;&lt;/a&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-3"&gt;&lt;/a&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-4"&gt;&lt;/a&gt; &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-5"&gt;&lt;/a&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-6"&gt;&lt;/a&gt; &lt;span class="ne"&gt;ZeroDivisionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-8"&gt;&lt;/a&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-9"&gt;&lt;/a&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-10"&gt;&lt;/a&gt; &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-11"&gt;&lt;/a&gt;   &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-12"&gt;&lt;/a&gt; &lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;'abc'&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-13"&gt;&lt;/a&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-14"&gt;&lt;/a&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'abc'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-15"&gt;&lt;/a&gt; &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-16"&gt;&lt;/a&gt;   &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-17"&gt;&lt;/a&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Can&lt;/span&gt;&lt;span class="s1"&gt;'t convert '&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="s1"&gt;' object to str implicitly&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-18"&gt;&lt;/a&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-19"&gt;&lt;/a&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;abcd&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-20"&gt;&lt;/a&gt; &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-21"&gt;&lt;/a&gt;   &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-22"&gt;&lt;/a&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="s1"&gt;'abcd'&lt;/span&gt;
&lt;a name="rest_code_1f008c47a83d4ad3866c21415fce2e0f-23"&gt;&lt;/a&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;These are some examples of exceptions. Now, we will see how we can handle the exceptions.&lt;/p&gt;
&lt;p&gt;Whenever errors occur in your Python program, exceptions are raised. We can also forcefully raise an exception using raise keyword.&lt;/p&gt;
&lt;p&gt;Now we are going to see a try…except block that handles an exception. In the try block, we will write a code that may generate an exception. In the except block, we will write a solution for that exception.&lt;/p&gt;
&lt;p&gt;The syntax for try…except is as follows:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_1d568edd7d7a46ba9bf18018e7e9cfb3-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_1d568edd7d7a46ba9bf18018e7e9cfb3-2"&gt;&lt;/a&gt;            &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_1d568edd7d7a46ba9bf18018e7e9cfb3-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_1d568edd7d7a46ba9bf18018e7e9cfb3-4"&gt;&lt;/a&gt;            &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;A try block can have multiple except statements. We can handle specific exceptions also by entering the exception name after the except keyword. The syntax for handling a specific exception is as follows:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_fd1625c7b885448a9049ed78b9d75f2c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_fd1625c7b885448a9049ed78b9d75f2c-2"&gt;&lt;/a&gt;            &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fd1625c7b885448a9049ed78b9d75f2c-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;exception_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_fd1625c7b885448a9049ed78b9d75f2c-4"&gt;&lt;/a&gt;            &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We are going to create an exception&lt;sub&gt;example&lt;/sub&gt;.py script to catch ZeroDivisionError*.* Write the following code in your script:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;
&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;
&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The value of c is: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The value of d is: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Division by zero is not possible"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_78418e0d7a3a41508e209be40224dd8f-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Out of try...except block"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Run the script as follows and you will get the following output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="debuggers-tools"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id9"&gt;3) Debuggers tools&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are many debugging tools supported in Python:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;winpdb&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pydev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pydb&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pdb&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gdb&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pyDebug&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this section, we are going to learn about pdb Python debugger. pdb module is a part of Python's standard library and is always available to use.&lt;/p&gt;
&lt;div class="section" id="the-pdb-debugger"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id10"&gt;The pdb debugger&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The pdb module is used to debug Python programs. Python programs use pdb interactive source code debugger to debug the programs. pdb sets &lt;code class="docutils literal"&gt;breakpoints&lt;/code&gt; and inspects the stack frames, and lists the source code.&lt;/p&gt;
&lt;p&gt;Now we will learn about how we can use the pdb debugger. There are three ways to use this debugger:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Within an interpreter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From a command line&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Within a Python script&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We are going to create a pdb&lt;sub&gt;example&lt;/sub&gt;.py script and add the following content in that script:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_3346a00d1e214935b4193d1b65519e0b-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3346a00d1e214935b4193d1b65519e0b-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3346a00d1e214935b4193d1b65519e0b-3"&gt;&lt;/a&gt;                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;
&lt;a name="rest_code_3346a00d1e214935b4193d1b65519e0b-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_3346a00d1e214935b4193d1b65519e0b-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_std&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3346a00d1e214935b4193d1b65519e0b-6"&gt;&lt;/a&gt;                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3346a00d1e214935b4193d1b65519e0b-7"&gt;&lt;/a&gt;                            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3346a00d1e214935b4193d1b65519e0b-8"&gt;&lt;/a&gt;                &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a name="rest_code_3346a00d1e214935b4193d1b65519e0b-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3346a00d1e214935b4193d1b65519e0b-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_std&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Using this script as an example to learn Python debugging, we will see how we can start the debugger in detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="within-an-interpreter"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id11"&gt;Within an interpreter&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; To start the debugger from the Python interactive console, we are using run() or runeval().&lt;/p&gt;
&lt;p&gt;Start your python3 interactive console. Run the following command to start the console:&lt;/p&gt;
&lt;p&gt;Import our pdb&lt;sub&gt;example&lt;/sub&gt; script name and the pdb module. Now, we are going to use run() and we are passing a string expression as an argument to run() that will be evaluated by the Python interpreter itself:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_814f15f9122547b5a2965ee67d0817a1-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb_example&lt;/span&gt;
&lt;a name="rest_code_814f15f9122547b5a2965ee67d0817a1-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb&lt;/span&gt;
&lt;a name="rest_code_814f15f9122547b5a2965ee67d0817a1-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'pdb_example.Student(5).print_std()'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_814f15f9122547b5a2965ee67d0817a1-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_814f15f9122547b5a2965ee67d0817a1-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;To continue debugging, enter continue after the (Pdb) prompt and press &lt;em&gt;Enter&lt;/em&gt;. If you want to know the options we can use in this, then after the (Pdb) prompt press the /Tab /key twice.&lt;/p&gt;
&lt;p&gt;Now, after entering continue, we will get the output as follows:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_dc6899ca03634bef8310a01f60a37662-1"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb_example&lt;/span&gt;
&lt;a name="rest_code_dc6899ca03634bef8310a01f60a37662-2"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb&lt;/span&gt;
&lt;a name="rest_code_dc6899ca03634bef8310a01f60a37662-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"pdb_example.Student(5).print_std()"&lt;/span&gt;
&lt;a name="rest_code_dc6899ca03634bef8310a01f60a37662-4"&gt;&lt;/a&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dc6899ca03634bef8310a01f60a37662-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_dc6899ca03634bef8310a01f60a37662-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a name="rest_code_dc6899ca03634bef8310a01f60a37662-7"&gt;&lt;/a&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_dc6899ca03634bef8310a01f60a37662-8"&gt;&lt;/a&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_dc6899ca03634bef8310a01f60a37662-9"&gt;&lt;/a&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_dc6899ca03634bef8310a01f60a37662-10"&gt;&lt;/a&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;a name="rest_code_dc6899ca03634bef8310a01f60a37662-11"&gt;&lt;/a&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_2da3c6302dc4415d9737ecf64c0a3835-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pdb_example&lt;/span&gt;
&lt;a name="rest_code_2da3c6302dc4415d9737ecf64c0a3835-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb&lt;/span&gt;
&lt;a name="rest_code_2da3c6302dc4415d9737ecf64c0a3835-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'pdb_example.Student(5).print_std()'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="from-a-command-line"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id12"&gt;From a command line&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The simplest and most straightforward way to run a debugger is from a command line. Our program will act as input to the debugger. You can use the debugger from command line as follows:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_cf9d791c44c446d6ac9791f9dec3ce29-1"&gt;&lt;/a&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt; &lt;span class="n"&gt;pdb_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;When you run the debugger from the command line, source code will be loaded and it will stop the execution on the first line it finds. Enter continue to continue the debugging. Here's the output:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="nd"&gt;@ubuntu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt; &lt;span class="n"&gt;pdb_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pdb_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-5"&gt;&lt;/a&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-6"&gt;&lt;/a&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-7"&gt;&lt;/a&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-8"&gt;&lt;/a&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-9"&gt;&lt;/a&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;finished&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;restarted&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-11"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pdb_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-12"&gt;&lt;/a&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_d42ea3826f3e4e8293b8ef0fa6cc7856-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="within-a-python-script"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id13"&gt;Within a Python script&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The previous two techniques will start the debugger at the beginning of a Python program. But this third technique is best for long-running processes. To start the debugger within a script, use &lt;code class="docutils literal"&gt;set_trace()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, modify your pdb&lt;sub&gt;example&lt;/sub&gt;.py file as follows:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb&lt;/span&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-5"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_std&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-9"&gt;&lt;/a&gt;            &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-10"&gt;&lt;/a&gt;            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-11"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-14"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_2f0de75ba21d4d99bf7d0ebc1e30dd66-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_std&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Now, run the program as follows:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_35e230e6ed834419b3420205595366d3-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="nd"&gt;@ubuntu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;pdb_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;a name="rest_code_35e230e6ed834419b3420205595366d3-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pdb_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;print_std&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_35e230e6ed834419b3420205595366d3-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_35e230e6ed834419b3420205595366d3-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a name="rest_code_35e230e6ed834419b3420205595366d3-5"&gt;&lt;/a&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_35e230e6ed834419b3420205595366d3-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pdb_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;print_std&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_35e230e6ed834419b3420205595366d3-7"&gt;&lt;/a&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_35e230e6ed834419b3420205595366d3-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;set_trace()&lt;/code&gt; is a Python function, therefore you can call it at any point in your program.&lt;/p&gt;
&lt;p&gt;So, these are the three ways by which you can start a debugger.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="debugging-basic-program-crashes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id14"&gt;4) Debugging basic program crashes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section, we are going to see the trace module. The trace module helps in tracing the program execution. So, whenever your Python program crashes, we can understand where it crashes. We can use trace module by importing it into your script as well as from the command line.&lt;/p&gt;
&lt;p&gt;Now, we will create a script named trace&lt;sub&gt;example&lt;/sub&gt;.py and write the following content in the script:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_9807a7c3280e424497ec61adb602efcb-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_9807a7c3280e424497ec61adb602efcb-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_9807a7c3280e424497ec61adb602efcb-3"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;
&lt;a name="rest_code_9807a7c3280e424497ec61adb602efcb-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_9807a7c3280e424497ec61adb602efcb-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_std&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_9807a7c3280e424497ec61adb602efcb-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_9807a7c3280e424497ec61adb602efcb-7"&gt;&lt;/a&gt;            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9807a7c3280e424497ec61adb602efcb-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a name="rest_code_9807a7c3280e424497ec61adb602efcb-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_9807a7c3280e424497ec61adb602efcb-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_std&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The output will be as follows:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_c7abcb59ff6b477685388f542c4c2527-1"&gt;&lt;/a&gt;python -m trace --trace src/trace_example.py
&lt;/pre&gt;&lt;p&gt;So, by using trace –trace at the command line, the developer can trace the program line-by-line. So, whenever the  program crashes, the developer will know the instance where it crashes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="profiling-and-timing-programs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id15"&gt;5) Profiling and timing programs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Profiling a Python program means measuring an execution time of a program. It measures the time spent in each function. Python's cProfile module is used for profiling a Python program.&lt;/p&gt;
&lt;div class="section" id="the-cprofile-module"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id16"&gt;The cProfile module&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As discussed previously, profiling means measuring the execution time of a program. We are going to use the cProfile Python module for profiling a program.&lt;/p&gt;
&lt;p&gt;Now, we will write a cprof&lt;sub&gt;example&lt;/sub&gt;.py script and write the following code in it:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_63c5466a4dd042e48ba9accb4cf2c04d-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;mul_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_63c5466a4dd042e48ba9accb4cf2c04d-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_63c5466a4dd042e48ba9accb4cf2c04d-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_63c5466a4dd042e48ba9accb4cf2c04d-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mul_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_63c5466a4dd042e48ba9accb4cf2c04d-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mul_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;
&lt;a name="rest_code_63c5466a4dd042e48ba9accb4cf2c04d-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Local Value: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mul_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_63c5466a4dd042e48ba9accb4cf2c04d-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mul_value&lt;/span&gt;
&lt;a name="rest_code_63c5466a4dd042e48ba9accb4cf2c04d-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_63c5466a4dd042e48ba9accb4cf2c04d-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_63c5466a4dd042e48ba9accb4cf2c04d-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;mul_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_63c5466a4dd042e48ba9accb4cf2c04d-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Global Value: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mul_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Run the program and you will see the output as follows:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_39f2258273434a95814b365679dd450f-1"&gt;&lt;/a&gt;python -m cProfile src/cprof_example.py
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;Local&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;4466&lt;/span&gt;
&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Global&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-3"&gt;&lt;/a&gt;         &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;calls&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.000&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-5"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Ordered&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;standard&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-7"&gt;&lt;/a&gt;   &lt;span class="n"&gt;ncalls&lt;/span&gt;  &lt;span class="n"&gt;tottime&lt;/span&gt;  &lt;span class="n"&gt;percall&lt;/span&gt;  &lt;span class="n"&gt;cumtime&lt;/span&gt;  &lt;span class="n"&gt;percall&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lineno&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-8"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt; &lt;span class="n"&gt;cprof_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-9"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt; &lt;span class="n"&gt;cprof_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mul_numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-10"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-11"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_3e52de59df984ea196fa3b5297905a9b-12"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="s1"&gt;'disable'&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;'_lsprof.Profiler'&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So, using cProfile, all functions that are called will get printed with the time spent on each function. Now, we will see what these column headings mean:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;ncalls:* &lt;a href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id1"&gt;&lt;span class="problematic" id="id2"&gt;*&lt;/span&gt;&lt;/a&gt;Number of calls&lt;/p&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 337); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline emphasis start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;tottime&lt;/strong&gt;:* &lt;a href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id3"&gt;&lt;span class="problematic" id="id4"&gt;*&lt;/span&gt;&lt;/a&gt;Total time spent in the given function&lt;/p&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 338); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline emphasis start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;percall: Quotient of tottime divided by ncalls&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cumtime: Cumulative time spent in this and all subfunctions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;percall: Quotient of cumtime divided by primitive calls&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;filename:lineno(function): Provides the respective data of each function&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="timeit"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id17"&gt;timeit&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;timeit is a Python module used to time small parts of your Python script. You can call timeit from the command line as well as import the timeit module into your script. We are going to write a script to time a piece of code. Create a timeit&lt;sub&gt;example&lt;/sub&gt;.py script and write the following content into it:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_26e31d6e7f6942f6af0c6c94731845c8-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;timeit&lt;/span&gt;
&lt;a name="rest_code_26e31d6e7f6942f6af0c6c94731845c8-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_26e31d6e7f6942f6af0c6c94731845c8-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;prg_setup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"from math import sqrt"&lt;/span&gt;
&lt;a name="rest_code_26e31d6e7f6942f6af0c6c94731845c8-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;prg_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_26e31d6e7f6942f6af0c6c94731845c8-5"&gt;&lt;/a&gt;&lt;span class="s2"&gt;def timeit_example():&lt;/span&gt;
&lt;a name="rest_code_26e31d6e7f6942f6af0c6c94731845c8-6"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            list1 = []&lt;/span&gt;
&lt;a name="rest_code_26e31d6e7f6942f6af0c6c94731845c8-7"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            for x in range(50):&lt;/span&gt;
&lt;a name="rest_code_26e31d6e7f6942f6af0c6c94731845c8-8"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                        list1.append(sqrt(x))&lt;/span&gt;
&lt;a name="rest_code_26e31d6e7f6942f6af0c6c94731845c8-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_26e31d6e7f6942f6af0c6c94731845c8-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# timeit statement&lt;/span&gt;
&lt;a name="rest_code_26e31d6e7f6942f6af0c6c94731845c8-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;prg_setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;prg_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Using timeit, we can decide what piece of code we want to measure the performance of. So, we can easily define the setup code as well as the code snippet on which we want to perform the test separately. The main code runs 1 million times, which is the default time, whereas the setup code runs only once.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="making-programs-run-faster"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id18"&gt;6) Making programs run faster&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are various ways to make your Python programs run faster, such as the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Profile your code so you can identify the bottlenecks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use built-in functions and libraries so the interpreter doesn't need to execute loops&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid using globals as Python is very slow in accessing global variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use existing packages&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id19"&gt;Summary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this chapter, we learned about the importance of debugging and profiling programs. We learned what the different techniques available for debugging are. We learned about the pdb Python debugger and how to handle exceptions. We learned about how to use the cProfile and timeit modules of Python while profiling and timing our scripts. We also learned how to make your scripts run faster.&lt;/p&gt;
&lt;p&gt;In the next chapter, we are going to learn about unit testing in Python. We are going to learn about creating and using unit tests.&lt;/p&gt;
&lt;div class="section" id="questions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id20"&gt;Questions&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;To debug a program, which module is used?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check how to use ipython along with all aliases and magic functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is *Global interpreted lock* (&lt;strong&gt;GIL&lt;/strong&gt;)?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the purpose of the PYTHONSTARTUP, PYTHONCASEOK, PYTHONHOME, and PYTHONSTARTUP environment variables?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the output of the following code? a) [0], b) [1], c) [1, 0], d) [0, 1].&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_37e0c5fb51b14a1396e6373b24451e25-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_37e0c5fb51b14a1396e6373b24451e25-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_37e0c5fb51b14a1396e6373b24451e25-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_37e0c5fb51b14a1396e6373b24451e25-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_37e0c5fb51b14a1396e6373b24451e25-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Which of the following is an invalid variable? a) my&lt;sub&gt;string1&lt;/sub&gt; b) 1st&lt;sub&gt;string&lt;/sub&gt; c) foo d) _&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="answer"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id21"&gt;Answer:&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;To debug the program, the pdb module is used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;&lt;p&gt;Before running ipython3, install using sudo apt-get install ipython3. b) %lsmagic.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A global interpreter lock is a mechanism used in computer language interpreters to synchronize the execution of threads so that only one native thread can execute at a time&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Following are the answers:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;&lt;p&gt;PYTHONPATH: It has a role similar to PATH. This variable tells the Python interpreter where to locate the module files imported into a program. It should include the Python source library directory and the directories containing Python source code. PYTHONPATH is sometimes preset by the Python installer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PYTHONSTARTUP: It contains the path of an initialization file containing Python source code. It is executed every time you start the interpreter. It is named as .pythonrc.py in Unix and it contains commands that load utilities or modify PYTHONPATH. c) PYTHONCASEOK: It is used in Windows to instruct Python to find the first case-insensitive match in an import statement. Set this variable to any value to activate it. d) PYTHONHOME: It is an alternative module search path. It is usually embedded in the PYTHONSTARTUP or PYTHONPATH directories to make switching module libraries easy.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Answer: [0]. A new list object is created in the function and the reference is lost. This can be checked by comparing the ID of k before and after k = [1].&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Answer: b. Variable names should not start with a number.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="further-reading"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/#id22"&gt;Further reading&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;How to handle GIL problems in python: &lt;a class="reference external" href="https://realpython.com/python-gil/"&gt;https://realpython.com/python-gil/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check how to use pdb module in command line: &lt;a class="reference external" href="https://fedoramagazine.org/getting-started-python-debugger/"&gt;https://fedoramagazine.org/getting-started-python-debugger/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>debug</category><category>profile</category><category>python</category><guid>https://alinbxsorcerer.github.io/posts/pyadmin-debug-and-profile/</guid><pubDate>Wed, 18 Dec 2019 10:15:29 GMT</pubDate></item></channel></rss>