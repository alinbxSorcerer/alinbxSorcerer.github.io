<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>A Magic Land Declared by David (Posts about python)</title><link>https://alinbxsorcerer.github.io/</link><description></description><atom:link href="https://alinbxsorcerer.github.io/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:davad.fhl.wang@foxmail.com"&gt;David&lt;/a&gt; </copyright><lastBuildDate>Thu, 19 Dec 2019 02:59:50 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>费马小定理</title><link>https://alinbxsorcerer.github.io/posts/%20testing_for_primality/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/%20testing_for_primality/#searching-for-divisors" id="id1"&gt;1.Searching for divisors&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/%20testing_for_primality/#the-fermat-test" id="id2"&gt;2.The Fermat Test&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/%20testing_for_primality/#primes-sieve" id="id3"&gt;3.Primes Sieve&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;This section describes two methods for checking the primality of an integer n , one with order of growth Θ(n**1/2) , and a “probabilistic” algorithm with order of growth Θ (log n) . The exercises at the end of this section suggest programming projects based on these algorithms.&lt;/p&gt;
&lt;div class="section" id="searching-for-divisors"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/%20testing_for_primality/#id1"&gt;1.Searching for divisors&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 8)&lt;/p&gt;
&lt;p&gt;Title underline too short.&lt;/p&gt;
&lt;pre class="literal-block"&gt;1.Searching for divisors
----------------------&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since ancient times, mathematicians have been fascinated by problems concerning prime numbers, and many people have worked on the problem of determining ways to test if numbers are prime. One way to test if a number is prime is to find the number’s divisors. The following program finds the smallest integral divisor (greater than 1) of a given number n . It does this in a straightforward way, by testing n for divisibility by successive integers starting with 2.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_c0e6f798574249ad9668fb202faad5b3-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;smallest_divisor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c0e6f798574249ad9668fb202faad5b3-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;find_divisor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 从2开始.&lt;/span&gt;
&lt;a name="rest_code_c0e6f798574249ad9668fb202faad5b3-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_c0e6f798574249ad9668fb202faad5b3-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_divisor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_divisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c0e6f798574249ad9668fb202faad5b3-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;test_divisor&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;  &lt;span class="c1"&gt;# terminating point&lt;/span&gt;
&lt;a name="rest_code_c0e6f798574249ad9668fb202faad5b3-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;test_divisor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;test_divisor&lt;/span&gt;
&lt;a name="rest_code_c0e6f798574249ad9668fb202faad5b3-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;find_divisor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_divisor&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 这是iteration&lt;/span&gt;
&lt;a name="rest_code_c0e6f798574249ad9668fb202faad5b3-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 需要用tail recursion的时候. 就是iteration.&lt;/span&gt;
&lt;a name="rest_code_c0e6f798574249ad9668fb202faad5b3-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallest_divisor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_571d0e45f9c74a6b911f1a7af3770dac-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;smallest_divisor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_571d0e45f9c74a6b911f1a7af3770dac-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#incremant&lt;/span&gt;
&lt;a name="rest_code_571d0e45f9c74a6b911f1a7af3770dac-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;a name="rest_code_571d0e45f9c74a6b911f1a7af3770dac-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="c1"&gt;# 就只有这两种情况&lt;/span&gt;
&lt;a name="rest_code_571d0e45f9c74a6b911f1a7af3770dac-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_571d0e45f9c74a6b911f1a7af3770dac-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallest_divisor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;因为如果不是质数一定可以分解为两个数字factor.&lt;/p&gt;
&lt;p&gt;We can test whether a number is prime as follows: n is prime if and only if n is its own smallest divisor.&lt;/p&gt;
&lt;p&gt;The end test for find-divisor is based on the fact that if n is not prime it must have a divisor less than or equal to n(1/2). This means that the algorithm need only test divisors between 1 and n. Consequently, the number of steps required to identify n as prime will have order of growth Θ(n1/2) .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-fermat-test"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/%20testing_for_primality/#id2"&gt;2.The Fermat Test&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 40)&lt;/p&gt;
&lt;p&gt;Title underline too short.&lt;/p&gt;
&lt;pre class="literal-block"&gt;2.The Fermat Test
---------------&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The Θ(log n) primality test is based on a result from number theory known as Fermat's Little Theorem.45&lt;/p&gt;
&lt;p&gt;Fermat's Little Theorem: If n is a prime number and a is any positive integer less than n, then a raised to the nth power is congruent to a modulo n.&lt;/p&gt;
&lt;p&gt;(Two numbers are said to be &lt;code class="docutils literal"&gt;congruent&lt;/code&gt; modulo n if they both have the same remainder when divided by n. The remainder of a number a when divided by n is also referred to as the remainder of a modulo n, or simply as a modulo n.)&lt;/p&gt;
&lt;p&gt;If n is not prime, then, in general, most of the numbers a&amp;lt; n will not satisfy the above relation. This leads to the following algorithm for testing primality: Given a number n, pick a random number a &amp;lt; n and compute the remainder of an modulo n. If the result is not equal to a, then n is certainly not prime. If it is a, then chances are good that n is prime. Now pick another random number a and test it with the same method. If it also satisfies the equation, then we can be even more confident that n is prime. By trying more and more values of a, we can increase our confidence in the result. This algorithm is known as the Fermat test.&lt;/p&gt;
&lt;p&gt;To implement the Fermat test, we need a procedure that computes the exponential of a number modulo another number:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;expmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# base case&lt;/span&gt;
&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;evenp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-5"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;expmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;evenp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_ab102f4a6ec9472888d89831c4281230-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;4&lt;/pre&gt;
&lt;p&gt;This is very similar to the fast-expt procedure of section 1.2.4. It uses successive squaring, so that the number of steps grows logarithmically with the exponent.[fn:1-2-46]&lt;/p&gt;
&lt;p&gt;The Fermat test is performed by choosing at random a number a between 1 and n - 1 inclusive and checking whether the remainder modulo n of the nth power of a is equal to a. The random number a is chosen using the procedure random, which we assume is included as a primitive in Scheme. Random returns a nonnegative integer less than its integer input. Hence, to obtain a random number between 1 and n - 1, we call random with an input of n - 1 and add 1 to the result:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_77e99b2dd827433381330181f8bedd32-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fermat_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_77e99b2dd827433381330181f8bedd32-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;try_it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_77e99b2dd827433381330181f8bedd32-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;a name="rest_code_77e99b2dd827433381330181f8bedd32-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;try_it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 这里的处理很妙&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The following procedure runs the test a given number of times, as specified by a parameter. Its value is true if the test succeeds every time, and false otherwise.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_64b765c17d49471198da307d87239d52-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fast_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#recursive的方法可以协助思考, 思考起点和终点.&lt;/span&gt;
&lt;a name="rest_code_64b765c17d49471198da307d87239d52-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_64b765c17d49471198da307d87239d52-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fermat_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fast_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_64b765c17d49471198da307d87239d52-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fermat_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#expmod, 幂模运算.&lt;/span&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Implementation uses the Fermat Primality Test&lt;/span&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# If number is even, it's a composite number, prime number and composite number.&lt;/span&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-7"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# quick return&lt;/span&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-11"&gt;&lt;/a&gt;        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# test&lt;/span&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-14"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_7b327b23809a4ffaa178e151c2b80f5a-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fermat_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="primes-sieve"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/%20testing_for_primality/#id3"&gt;3.Primes Sieve&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 114)&lt;/p&gt;
&lt;p&gt;Title underline too short.&lt;/p&gt;
&lt;pre class="literal-block"&gt;3.Primes Sieve
------------&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;primes_sieve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;primes_sieve&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;primes_sieve&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-8"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# sieve&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 要包含n這個數字.&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;primes_sieve&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-11"&gt;&lt;/a&gt;            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# mark the multiplies, 本數不能劃掉.&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-12"&gt;&lt;/a&gt;                &lt;span class="n"&gt;primes_sieve&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primes_sieve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-16"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count_primes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-18"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;primes_sieve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;primes_sieve&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;primes_sieve&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-23"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# sieve&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 要包含n這個數字.&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-25"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;primes_sieve&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-26"&gt;&lt;/a&gt;            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# mark the multiplies, 本數不能劃掉.&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-27"&gt;&lt;/a&gt;                &lt;span class="n"&gt;primes_sieve&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_d59a613cf32848df953cf9edc9634ce8-29"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;primes_sieve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>algorithms</category><category>math</category><category>primality</category><category>python</category><guid>https://alinbxsorcerer.github.io/posts/%20testing_for_primality/</guid><pubDate>Wed, 18 Dec 2019 03:53:29 GMT</pubDate></item><item><title>淘宝双十一的销售额造假了吗? 用本福特定律检验</title><link>https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id1" id="id4"&gt;0.引言&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id2" id="id5"&gt;1.构建本福特柱状图&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id3" id="id6"&gt;2.构建历年销售额的柱状图&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#qualitive-analysis-take-a-view-by-setting-them-side-by-side" id="id7"&gt;3.Qualitive Analysis: Take a view by setting them side by side&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#quantitative-analysis" id="id8"&gt;4.Quantitative Analysis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#publish" id="id9"&gt;5.Publish&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id4"&gt;0.引言&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;看过李永乐老师的视频 &lt;a class="reference external" href="https://www.youtube.com/watch?v=CCo4k9Ax7cM&amp;amp;t=7s"&gt;淘宝“双11”2684亿销售额造假了吗？用本福特定律检验一下&lt;/a&gt;, 用本福特定律检验下:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id5"&gt;1.构建本福特柱状图&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-13"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.18&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-16"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-17"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="/images/PogAvJ.png" src="https://alinbxsorcerer.github.io/images/PogAvJ.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id6"&gt;2.构建历年销售额的柱状图&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# data, unit: ten million RMB&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;sales_by_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"2009"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-3"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2010"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"93.6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-4"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2011"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"520"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-5"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2012"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"1910"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-6"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2013"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"3500"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-7"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2014"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"5710"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-8"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2015"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"9120"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-9"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2016"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"12070"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-10"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2018"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"21350"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-11"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2019"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"26840"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-14"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sales_by_year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-21"&gt;&lt;/a&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-23"&gt;&lt;/a&gt;&lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-25"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-26"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-28"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.18&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-29"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-30"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="/images/QtppzN.png" src="https://alinbxsorcerer.github.io/images/QtppzN.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="qualitive-analysis-take-a-view-by-setting-them-side-by-side"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id7"&gt;3.Qualitive Analysis: Take a view by setting them side by side&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.18&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# create benford bar graph&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-16"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-18"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-19"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-20"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="/images/p1Nqxa.png" src="https://alinbxsorcerer.github.io/images/p1Nqxa.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="quantitative-analysis"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id8"&gt;4.Quantitative Analysis&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;从图表上直观看, 匹配度不高, 那么匹配的具体数值是多少呢?&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;benford_seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chisquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;benford_seq&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Power_divergenceResult(statistic=14.508778904402215, pvalue=0.06943079701067742)&lt;/p&gt;
&lt;p&gt;匹配度为6.94%.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id9"&gt;5.Publish&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_962eda3f0c1f4e2e9a30fba68e16b5ac-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;a name="rest_code_962eda3f0c1f4e2e9a30fba68e16b5ac-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pandoc --wrap=none benford_law.org -o ~/Public/nikola_post/posts/淘宝销售额造假了吗.rst"&lt;/span&gt;
&lt;a name="rest_code_962eda3f0c1f4e2e9a30fba68e16b5ac-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_0e6f0b5b1b4246cbaeeef5e2e3a88db3-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;  ~/Documents/OrgMode/ORG/images
&lt;a name="rest_code_0e6f0b5b1b4246cbaeeef5e2e3a88db3-2"&gt;&lt;/a&gt;ls -t  &lt;span class="p"&gt;|&lt;/span&gt; head -n &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; line&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; cp &lt;span class="nv"&gt;$line&lt;/span&gt;     ~/Public/nikola_post/images/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>benford</category><category>matplotlib</category><category>numpy</category><category>python</category><guid>https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/</guid><pubDate>Wed, 20 Nov 2019 12:53:29 GMT</pubDate></item><item><title>时间专题小结</title><link>https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id1" id="id8"&gt;时间专题小结&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id2" id="id9"&gt;时间变量的顺序与格式&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id3" id="id10"&gt;时间的感知与分析&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id4" id="id11"&gt;宏观感知“一日”&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id5" id="id12"&gt;微观层面的时间感知&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id6" id="id13"&gt;感知时间流逝的算法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id7" id="id14"&gt;时间管理的三件武器&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#emacs" id="id15"&gt;Emacs中的应用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id8"&gt;时间专题小结&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;历时5个月的实践应用与验证, 小结如下&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id9"&gt;时间变量的顺序与格式&lt;/a&gt;&lt;/h3&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 32%"&gt;
&lt;col style="width: 68%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;时间变量 10个&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;变量的顺序&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;基础8个&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;年月日, 时分秒, 星期 周数&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;时区(特殊处理)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;timezone&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;秒的单位&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;ms毫秒, µs微秒, nm纳秒) 所有的读秒&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;将周数加进来作为另外一个维度, 应用cron的时候,recursively start from the
end.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对时间感知 从end往前的模式,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cron中时间变量的顺序 cron专注在一年内, 除了year之外, 也是start from
the end&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时间的格式 年月日均小写: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%y-%m-%d&lt;/span&gt;&lt;/code&gt;, 时分秒都是大写: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%H-%M-%M&lt;/span&gt;&lt;/code&gt;,
Weekday &lt;code class="docutils literal"&gt;%wu&lt;/code&gt;, Weeknumber &lt;code class="docutils literal"&gt;%W&lt;/code&gt; 两个文字表述的变量: weekday
&lt;code class="docutils literal"&gt;%aA&lt;/code&gt; and month &lt;code class="docutils literal"&gt;%bB&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;标注的 &lt;code class="docutils literal"&gt;ctime&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_0156f854bb0b4ecb91578db74550d276-1"&gt;&lt;/a&gt;date +&lt;span class="s2"&gt;"%c"&lt;/span&gt;
&lt;a name="rest_code_0156f854bb0b4ecb91578db74550d276-2"&gt;&lt;/a&gt;python -c &lt;span class="s2"&gt;"import time; print(time.ctime())"&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;Mon 11 Nov 2019 12:10:57 PM CST
Mon Nov 11 12:10:57 2019&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id10"&gt;时间的感知与分析&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;回归到“钟表”的意像图&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id11"&gt;宏观感知“一日”&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;八分图&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 16%"&gt;
&lt;col style="width: 44%"&gt;
&lt;col style="width: 40%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;No&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;时间段&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;维基命名&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;１&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0时~3时&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;安&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;２&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3时~6时&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;晓&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;３&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6时~9时&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;早&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;４&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;9时~12时&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;亮&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;５&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;12时~15时&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;热&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;６&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;15时~18时&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;７&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;18时~21时&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;归&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;８&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;21时~24时&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;休&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id12"&gt;微观层面的时间感知&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;核心是应用分数表示的方法&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;选择起始点 遵循AM与PM的概念，以太阳的最高点为划分点, 遵从国际标准,
选择0点为起始点.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两个重要的时间节点 抛弃原先的方案, 以正午12点为关键节点,
因此两个时间节点的选择, 既然选择了AM和PM, 就只以12点为关键节点&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;12小时还是24小时 选择12小时, 原因是选择了AM和PM.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id13"&gt;感知时间流逝的算法&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;采用分数法.fraction&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id14"&gt;时间管理的三件武器&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;calendar, clock and datetime(combined) date 以shell的ncal,
date与time为基础.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="emacs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/#id15"&gt;Emacs中的应用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;需要重新再阅读文档. 目前没有解决的问题, 便是如何在calendar中做规划.
emacs中的日历优点是可以与四时互动.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_dd9c54d4ad294187a1564f434e2d0603-1"&gt;&lt;/a&gt;pandoc draft.org -o ../posts/时间专题小结.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>python</category><category>time</category><guid>https://alinbxsorcerer.github.io/posts/shijian-zhuanti-xiaojie/</guid><pubDate>Mon, 11 Nov 2019 04:53:29 GMT</pubDate></item><item><title>时间管理的三件武器</title><link>https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id1" id="id8"&gt;前情概要&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id2" id="id9"&gt;时间管理的三件武器&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#python" id="id10"&gt;Python中的时间管理&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#calender" id="id11"&gt;1. Calender&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#time" id="id12"&gt;2. Time&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#datetime" id="id13"&gt;3. Datetime&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#shell" id="id14"&gt;Shell的时间管理工具&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#calendar" id="id15"&gt;1.Calendar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#clock-time" id="id16"&gt;2.Clock(Time)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id5" id="id17"&gt;3.Datetime&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#emacs" id="id18"&gt;Emacs中的时间管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id6" id="id19"&gt;总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id7" id="id20"&gt;参考资料&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id8"&gt;前情概要&lt;/a&gt;&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;“时间变量的顺序与时间表示的格式”
总结了时间的10个变量及其直觉解析的顺序&lt;/div&gt;
&lt;div class="line"&gt;&lt;code class="docutils literal"&gt;Weekday Hour:Minute &lt;span class="pre"&gt;Month-Day&lt;/span&gt; WeekNumber Year&lt;/code&gt;&lt;/div&gt;
&lt;div class="line"&gt;“时间的感知与分析”阐述对时间的认知方法论以奠定高效利用和有效掌控时间的基础。&lt;/div&gt;
&lt;div class="line"&gt;“工欲善其事必先利其器”，接下来的问题便是时间管理的工具。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id9"&gt;时间管理的三件武器&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;无论是手机的android系统还是Linux系统，都提供两项基本的时间管理工具日历(calendar)
and 时钟(clock). Calendar是date地图，提供全景式的鸟瞰图；
clock是指南针，指导具体的每一步应该迈向何处。
二者的结合形成第三个工具datetime。&lt;/p&gt;
&lt;p&gt;工具虽然简单，但如果不能抽象到认知的层面，则不能为己所用。试问，谁手机里没个日历，每个钟表呢。认知层面的结论是需要且仅需要这三件工具O(∩_∩)O。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;日历提供全景式鸟瞰&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-1"&gt;&lt;/a&gt;$ ncal -B &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;#ncal中的n竟然是new这个单词&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-2"&gt;&lt;/a&gt;    February &lt;span class="m"&gt;2019&lt;/span&gt;     March &lt;span class="m"&gt;2019&lt;/span&gt;        April &lt;span class="m"&gt;2019&lt;/span&gt;        May &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-3"&gt;&lt;/a&gt;Su      &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt;     &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;        &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-4"&gt;&lt;/a&gt;Mo     &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;      &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-5"&gt;&lt;/a&gt;Tu      &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;        &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;        &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-6"&gt;&lt;/a&gt;We     &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;      &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-7"&gt;&lt;/a&gt;Th      &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;        &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;      &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-8"&gt;&lt;/a&gt;Fr       &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;15&lt;/span&gt;   &lt;span class="m"&gt;22&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;       &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-9"&gt;&lt;/a&gt;Sa  &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;       &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时钟实施具体的测量&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_9ffe068b2b0847b5a3503e58fc89d81e-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; sleep 10real    0m10.011suser    0m0.002ssys     0m0.001s
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime整合二者，提供更加实用的功能&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b22cd1426a8644e486e48c600b5d6901-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#贸易战倒计时&lt;/span&gt;
&lt;a name="rest_code_b22cd1426a8644e486e48c600b5d6901-2"&gt;&lt;/a&gt;$ &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"America/New_York"&lt;/span&gt; date &lt;span class="c1"&gt;#美东夏季时间， 第十个变量时区。&lt;/span&gt;
&lt;a name="rest_code_b22cd1426a8644e486e48c600b5d6901-3"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:04:30 EDT &lt;span class="m"&gt;2019&lt;/span&gt;  &lt;span class="c1"&gt;#Eatern Daylight Timer&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id10"&gt;Python中的时间管理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以calendar,
clock(time),datetime与十个时间变量为基础，审视python的&lt;code class="docutils literal"&gt;calendar&lt;/code&gt;,
&lt;code class="docutils literal"&gt;time&lt;/code&gt;, and &lt;code class="docutils literal"&gt;datetime&lt;/code&gt;&lt;/p&gt;
&lt;div class="section" id="calender"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id11"&gt;1. Calender&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/calendar.html"&gt;calendar — General calendar-related
functions&lt;/a&gt; &lt;a class="reference external" href="https://pymotw.com/3/calendar/index.html"&gt;calendar
— Work with Dates — PyMOTW
3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python中的calendar十个无关紧要的工具，没有人会费力不讨好的到这里查看日期和规划日程。&lt;/p&gt;
&lt;pre class="literal-block"&gt;class TextCalendar(Calendar)
 |  TextCalendar(firstweekday=0)
In [326]: cal = calendar.TextCalendar(calendar.MONDAY)       #周一作为一周的起始点
In [327]: cal.prmonth(2019, 5)
      May 2019
Mo Tu We Th Fr Sa Su
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31
In [328]: cal.pryear(2019)
                                  2019
      January                                   February                                    March
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
    1  2  3  4  5  6                   1  2  3                                           1  2  3
 7  8  9 10 11 12 13           4  5  6  7  8  9 10                            4  5  6  7  8  9 10
14 15 16 17 18 19 20      11 12 13 14 15 16 17              11 12 13 14 15 16 17
21 22 23 24 25 26 27      18 19 20 21 22 23 24             18 19 20 21 22 23 24
28 29 30 31                       25 26 27 28                                  25 26 27 28 29 30 31
# 只了解下TextCalendar, pryear, prmonth&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="time"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id12"&gt;2. Time&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/time.html#module-time"&gt;time — Time access and
conversions&lt;/a&gt;
&lt;a class="reference external" href="https://pymotw.com/3/calendar/index.html"&gt;calendar — Work with Dates — PyMOTW
3&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;与epoch time的相互转换&lt;/p&gt;
&lt;p&gt;Use the following functions to convert between time representations:
人以minutes计时， 机器以second计时。&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;From&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;To&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Use&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in UTC&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`gmtime()&lt;/code&gt; &amp;lt;https:
//docs.python.org/3/l
ibrary/time.html#time
.gmtime&amp;gt;`__&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in local time&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`localtime()&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.localtime&amp;gt;`__&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in UTC&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id3"&gt;&lt;span class="problematic" id="id4"&gt;``&lt;/span&gt;&lt;/a&gt;&lt;cite&gt;calendar.timegm()&lt;/cite&gt;
` &amp;lt;&lt;a class="reference external" href="https://docs.pytho"&gt;https://docs.pytho&lt;/a&gt;
n.org/3/library/calen
dar.html#calendar.tim
egm&amp;gt;`__&lt;/p&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 120); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline literal start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in local time&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`mktime()&lt;/code&gt; &amp;lt;https:
//docs.python.org/3/l
ibrary/time.html#time
.mktime&amp;gt;`__&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class="literal-block"&gt;#seconds to  timetuple
In [8]: time.localtime() #local time
Out[8]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=15, tm_hour=20, tm_min=4, tm_sec=17, tm_wday=2, tm_yday=135, tm_isdst=0)

In [9]: time.gmtime() #UTC time
Out[9]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=15, tm_hour=12, tm_min=4, tm_sec=31, tm_wday=2, tm_yday=135, tm_isdst=0)

In [11]: time.gmtime(100)  #
Out[11]: time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=1, tm_sec=40, tm_wday=3, tm_yday=1, tm_isdst=0)
#timetuple to seconds
In [17]: calendar.timegm(time.gmtime()) #UTC time
Out[17]: 1557922318
In [18]: time.mktime(time.localtime()) #Local time
Out[18]: 1557922368.0&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第十一个-时间变量 &lt;code class="docutils literal"&gt;tm_isdst&lt;/code&gt; daylight saving time夏季时间&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_094a698ef79c436f9b86651afbf22bc2-1"&gt;&lt;/a&gt;gmtime&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt; -&amp;gt;time.struct_time,  &lt;span class="o"&gt;(&lt;/span&gt;strptime, localtime&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_094a698ef79c436f9b86651afbf22bc2-2"&gt;&lt;/a&gt;    gmtime&lt;span class="o"&gt;([&lt;/span&gt;seconds&lt;span class="o"&gt;])&lt;/span&gt; -&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;tm_year, tm_mon, tm_mday, tm_hour, tm_min,
&lt;a name="rest_code_094a698ef79c436f9b86651afbf22bc2-3"&gt;&lt;/a&gt;                           tm_sec, tm_wday, tm_yday, tm_isdst&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Processor Time and Timer&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-1"&gt;&lt;/a&gt;time.process_time&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#cpu time  of kernel and user-space&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-2"&gt;&lt;/a&gt;time.process_time_ns&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;int &lt;span class="c1"&gt;#not inclue sleep time&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-3"&gt;&lt;/a&gt;time.perf_counter&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;float
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-4"&gt;&lt;/a&gt;time.perf_counter_ns&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt; int
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-5"&gt;&lt;/a&gt;time.thread_time&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;float
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-6"&gt;&lt;/a&gt;time.thread_time_ns&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;int
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-7"&gt;&lt;/a&gt;time.time&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-8"&gt;&lt;/a&gt;time.time_ns&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-9"&gt;&lt;/a&gt;time.sleep
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-10"&gt;&lt;/a&gt;time.monotonic&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-11"&gt;&lt;/a&gt;time.monotonic_ns&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Timezone Constants&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-1"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.daylight
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-2"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-3"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.tzname
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-4"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CST'&lt;/span&gt;, &lt;span class="s1"&gt;'CST'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-5"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.altzone
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-6"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: -28800
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两个重要的methods&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_232b38deadda42eb9e8aa330e957a7f4-1"&gt;&lt;/a&gt;time.strptime&lt;span class="o"&gt;(&lt;/span&gt;string, format&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_232b38deadda42eb9e8aa330e957a7f4-2"&gt;&lt;/a&gt;time.strftime&lt;span class="o"&gt;(&lt;/span&gt;format&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctime&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-1"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.asctime&lt;span class="o"&gt;(&lt;/span&gt;time.localtime&lt;span class="o"&gt;())&lt;/span&gt;
&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-2"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="s1"&gt;'Wed May 15 21:05:27 2019'&lt;/span&gt;
&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-3"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.ctime&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-4"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="s1"&gt;'Wed May 15 21:05:32 2019'&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="datetime"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id13"&gt;3. Datetime&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;复习calendar(date), clock(time)的逻辑，先看两个没用的函数。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pymotw.com/3/datetime/index.html"&gt;datetime — Date and Time Value Manipulation — PyMOTW
3&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;datetime.date()&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="err"&gt;就是符号&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;x返回的内容&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-2"&gt;&lt;/a&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;135&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;135&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;136&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;136&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime.time()&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;符号&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;X返回的内容&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-2"&gt;&lt;/a&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;microsecond&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="p"&gt;]]]]])&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;#5个参数,由大到小排列&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;  &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzutc&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s2"&gt;:%S:%M:%H %Z"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'999999:30:15:06 UTC'&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolution&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;microseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#精确度&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime.datetime&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#前面两个datetime.time and datetime.date没啥用.&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#这里的关键是第十个时间变量tzinfo&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-4"&gt;&lt;/a&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;microsecond&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="p"&gt;]]]]])&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;Help&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;week&lt;/span&gt; &lt;span class="n"&gt;represented&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Monday&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;Sunday&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gettz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Asia/Shanghai"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;421561&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tzfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/usr/share/zoneinfo/Asia/Shanghai'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-13"&gt;&lt;/a&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;208&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timetuple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;208&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;struct_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tm_year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_sec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_wday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_yday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;129&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_isdst&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime.timedelta and Arithmetic Opertions&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;microseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weeks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;219&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;219&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;910880&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="s2"&gt;"1 days ago"&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;Wed&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="n"&gt;CST&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-6"&gt;&lt;/a&gt; &lt;span class="c1"&gt;#转换为seconds的另外一种写法&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'0:01:40'&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%H:%M:%S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gmtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'00:50:00'&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="shell"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id14"&gt;Shell的时间管理工具&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="calendar"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id15"&gt;1.Calendar&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;$ ncal -1
$ ncal -M #Monday as the first day
$ ncal -w #weeknumber
$ncal -y -m;
$ncal -d yyyy-mm
$ncal yyyy-mm-dd#highlight the current date
$ ncal -A3 -B4
#就只有这么多操作&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="clock-time"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id16"&gt;2.Clock(Time)&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hwclock&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-1"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: !sudo hwclock
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-2"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;-05-15 &lt;span class="m"&gt;21&lt;/span&gt;:25:29.514803+08:00
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-3"&gt;&lt;/a&gt;---------------------------------------------------
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-4"&gt;&lt;/a&gt;NAME
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-5"&gt;&lt;/a&gt;       hwclock - &lt;span class="nb"&gt;time&lt;/span&gt; clocks utility
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-6"&gt;&lt;/a&gt;FILES
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-7"&gt;&lt;/a&gt;       /etc/adjtime
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-8"&gt;&lt;/a&gt;              The configuration and state file &lt;span class="k"&gt;for&lt;/span&gt; hwclock.
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-9"&gt;&lt;/a&gt;       /etc/localtime
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-10"&gt;&lt;/a&gt;              The system timezone file
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-11"&gt;&lt;/a&gt;       /usr/share/zoneinfo/
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-12"&gt;&lt;/a&gt;              The system timezone database directory.
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-13"&gt;&lt;/a&gt;       Device files hwclock may try &lt;span class="k"&gt;for&lt;/span&gt; Hardware Clock access:
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-14"&gt;&lt;/a&gt;       /dev/rtc0
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-15"&gt;&lt;/a&gt;       /dev/rtc
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-16"&gt;&lt;/a&gt;       /dev/misc/rtc
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-17"&gt;&lt;/a&gt;       /dev/efirtc
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-18"&gt;&lt;/a&gt;       /dev/misc/efirtc
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;time (processing profile)&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-1"&gt;&lt;/a&gt;    $ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;tree  /usr/share/zoneinfo &lt;span class="p"&gt;|&lt;/span&gt; grep -i &lt;span class="s2"&gt;"prc"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-2"&gt;&lt;/a&gt;    │   ├── Chongqing -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-3"&gt;&lt;/a&gt;    │   ├── Chungking -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-4"&gt;&lt;/a&gt;    │   ├── Harbin -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-5"&gt;&lt;/a&gt;    │   ├── Shanghai -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-6"&gt;&lt;/a&gt;    │   │   ├── Chongqing -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-7"&gt;&lt;/a&gt;    │   │   ├── Chungking -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-8"&gt;&lt;/a&gt;    │   │   ├── Harbin -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-9"&gt;&lt;/a&gt;    │   │   ├── Shanghai -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-10"&gt;&lt;/a&gt;    │   ├── PRC -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-11"&gt;&lt;/a&gt;    ├── PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-12"&gt;&lt;/a&gt;    │   │   ├── Chongqing -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-13"&gt;&lt;/a&gt;    │   │   ├── Chungking -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-14"&gt;&lt;/a&gt;    │   │   ├── Harbin -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-15"&gt;&lt;/a&gt;    │   │   ├── Shanghai -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-16"&gt;&lt;/a&gt;    │   ├── PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-18"&gt;&lt;/a&gt;    real    0m0.017s
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-19"&gt;&lt;/a&gt;    user    0m0.015s
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-20"&gt;&lt;/a&gt;    sys     0m0.004s
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-22"&gt;&lt;/a&gt;&lt;span class="m"&gt;3&lt;/span&gt;.Datetime
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;span id="datetime-1"&gt;&lt;/span&gt;&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id17"&gt;3.Datetime&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;timedatectl&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#systemd的service&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-2"&gt;&lt;/a&gt;$ timedatectl
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-3"&gt;&lt;/a&gt;               Local time: Thu &lt;span class="m"&gt;2019&lt;/span&gt;-05-09 &lt;span class="m"&gt;21&lt;/span&gt;:30:27 CST
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-4"&gt;&lt;/a&gt;           Universal time: Thu &lt;span class="m"&gt;2019&lt;/span&gt;-05-09 &lt;span class="m"&gt;13&lt;/span&gt;:30:27 UTC
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-5"&gt;&lt;/a&gt;                 RTC time: Thu &lt;span class="m"&gt;2019&lt;/span&gt;-05-09 &lt;span class="m"&gt;13&lt;/span&gt;:30:27
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-6"&gt;&lt;/a&gt;                Time zone: Asia/Shanghai &lt;span class="o"&gt;(&lt;/span&gt;CST, +0800&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-7"&gt;&lt;/a&gt;System clock synchronized: yes
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-8"&gt;&lt;/a&gt;              NTP service: active
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-10"&gt;&lt;/a&gt; - Check the current system clock time:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-11"&gt;&lt;/a&gt;   timedatectl
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-12"&gt;&lt;/a&gt; - Set the &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; of the system clock directly:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-13"&gt;&lt;/a&gt;   timedatectl set-time &lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="s2"&gt;"yyyy-MM-dd hh:mm:ss"&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-15"&gt;&lt;/a&gt; - List available timezones:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-16"&gt;&lt;/a&gt;   timedatectl list-timezones
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-18"&gt;&lt;/a&gt; - Set the system timezone:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-19"&gt;&lt;/a&gt;   timedatectl set-timezone &lt;span class="o"&gt;{{&lt;/span&gt;timezone&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-21"&gt;&lt;/a&gt; - Enable Network Time Protocol &lt;span class="o"&gt;(&lt;/span&gt;NTP&lt;span class="o"&gt;)&lt;/span&gt; synchronization:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-22"&gt;&lt;/a&gt;   timedatectl set-ntp on
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;date (最趁手的一个工具)&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 日常应用date作为思考工具.&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-2"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.time&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-3"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;1557406444&lt;/span&gt;.1336956
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-4"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: !date +%s
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-5"&gt;&lt;/a&gt;&lt;span class="m"&gt;1557406449&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-6"&gt;&lt;/a&gt;$ date -d @&lt;span class="k"&gt;$(&lt;/span&gt;date +%s&lt;span class="k"&gt;)&lt;/span&gt;　&lt;span class="c1"&gt;#date -d @1557406449&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-7"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:11:15 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#基本的操作&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-10"&gt;&lt;/a&gt;$ date -u +&lt;span class="s2"&gt;"%Y-%m-%dT%H:%M:%SZ"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-11"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;-05-09T12:55:31Z
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#Future date and time&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-14"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;" two weeks"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-15"&gt;&lt;/a&gt;date: invalid date ‘ two weeks’
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-16"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"2 weeks"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-17"&gt;&lt;/a&gt;Thu May &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:20:17 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-18"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"next fri"&lt;/span&gt; &lt;span class="c1"&gt;#只有两个变量能够以文字表述 Month and Weekday&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-19"&gt;&lt;/a&gt;Fri May &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:00:00 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#the elpased date and time&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-22"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"last thursday"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-23"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:00:00 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-24"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"2 days ago"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-25"&gt;&lt;/a&gt;Tue May  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:22:28 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-26"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"last month"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-27"&gt;&lt;/a&gt;Tue Apr  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:22:39 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-29"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#贸易战倒计时&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-30"&gt;&lt;/a&gt;$ &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"America/New_York"&lt;/span&gt; date
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-31"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:04:30 EDT &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="emacs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id18"&gt;Emacs中的时间管理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;….&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id19"&gt;总结&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;时间管理的三个工具, time, datetime, calendar(从微观到宏观处理5, 8,
10个时间变量)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our units of temporal measurement, from seconds on up to months, are
so complicated, asymmetrical and disjunctive so as to make coherent
mental reckoning in time all but impossible. Indeed, had some
tyrannical god contrived to enslave our minds to time, to make it all
but impossible for us to escape subjection to sodden routines and
unpleasant surprises, he could hardly have done better than handing
down our present system. It is like a set of trapezoidal building
blocks, with no vertical or horizontal surfaces, like a language in
which the simplest thought demands constructions, useless particles
and lengthy circumlocutions. Unlike the more successful patterns of
language and science, which enable us to face experience boldly or at
least level-headedly, our system of temporal calculation silently and
persistently encourages our terror of time.&lt;/p&gt;
&lt;p&gt;… It is as though architects had to measure length in feet, width in
meters and height in ells; as though basic instruction manuals
demanded a knowledge of five different languages. It is no wonder
then that we often look into our own immediate past or future, last
Tuesday or a week from Sunday, with feelings of helpless confusion. …&lt;/p&gt;
&lt;p class="attribution"&gt;—Robert Grudin, Time and the Art of Living.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈哈～，神吐槽。因此需要将so complicated, asymmetrical and disjunctive
抽象为calender, time, datetime。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id20"&gt;参考资料&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;GNU Coreutils: Date input
formats &amp;lt;https://www.gnu.org/software/coreutils/manual/html_node/Date-input-formats.html#Date-input-formats&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>emacs</category><category>python</category><category>time</category><category>时间管理</category><guid>https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/</guid><pubDate>Wed, 15 May 2019 12:53:29 GMT</pubDate></item><item><title>时间变量的顺序与格式</title><link>https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id1" id="id4"&gt;时间的感知&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#cron" id="id5"&gt;Cron中时间变量的顺序&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id2" id="id6"&gt;时间的格式&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id3" id="id7"&gt;总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id4"&gt;时间的感知&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;直觉对时间的感知, 是按照怎么的顺序解析的呢?
从早晨起床这个场景中,分析大脑解析时间的顺序.&lt;/p&gt;
&lt;p&gt;似乎理所当然的一点,Hour(时)排在最前面,Hour:Minute的组合是醒来后第一时间想要获得的信息,以判断上班是否迟到,是否有时间吃早餐?但是再想一层,上班是否迟到?
在处理Hour:Minute之前,潜意识已经先获取并处理完了一个信息:今天是周几?(Weekday).如果是周末的话,几点几分起床并不特别重要.
因此,最先处理的三个变量是Weekday Hour:Minutes&lt;/p&gt;
&lt;p&gt;再看日期,Month-Day,哪个变量在前呢?
如果day在前,则是冗余信息,因为已经weekday在先.
解析日期,首先获取Month,以判断一年的进度,获得当前时间在一年中所处的位置,比如May的含义是一年已经将半.
日期的顺序是Month-Day&lt;/p&gt;
&lt;p&gt;还有变量week number,是对一年进度的另外一种表示.&lt;/p&gt;
&lt;p&gt;最后是Year&lt;/p&gt;
&lt;p&gt;综上, 直觉解析时间的顺序为:
&lt;code class="docutils literal"&gt;Weekday Hour:Minute &lt;span class="pre"&gt;Month-Day&lt;/span&gt; WeekNumber Year&lt;/code&gt;,
要事第一,最重要的信息是Weekday. 合计8个变量, 命名为intuitive time(or
intelligent time)简写为itime&lt;/p&gt;
&lt;p&gt;这也是CTIME时间格式的理念.&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [2]: time.ctime()
Out[2]: 'Wed May 15 08:29:38
[3]:!date
Wed May 15 08:31:45 CST 2019&lt;/pre&gt;
&lt;p&gt;ctime将weekday安排在最前面,然后遵循这个先处理日期的逻辑,May:15跟在后面提高日期的精确颗粒度.但是对大脑的瞬间思考而言,则是冗余信息.因此以itime作为基石,推导拓展到其他时间顺序.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cron"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id5"&gt;Cron中时间变量的顺序&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The sequence matters. 时间变量顺序的第一个应用场景是cron.&lt;/p&gt;
&lt;p&gt;Cron的顺序是Minute:Hour Day:Month Weekday&lt;/p&gt;
&lt;pre class="literal-block"&gt;# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
# │ │ │ │ │                                   7 is also Sunday on some systems)
# │ │ │ │ │
# │ │ │ │ │
# * * * * * command to execute&lt;/pre&gt;
&lt;p&gt;大脑长于处理模糊宏观的信息,而机器专于精确的信息,将最小的时间单位排在前面,是倒排的ctime.应用的时候也只需要将思考倒叙.&lt;/p&gt;
&lt;p&gt;cron将minute作为最小单位和第一顺序是因为crond按分钟扫描,可见从性能经济性的角度考虑,对大脑和对机器,
秒都是可以忽略的,不然会浪费大量的资源．&lt;/p&gt;
&lt;p&gt;接下来讨论一个问题: 在感知上, minutes:hours 与hours:minutes有何差异呢？&lt;/p&gt;
&lt;p&gt;minutes:hours的顺序，是将精力关注到一个小时之内，比如六点十五=15:06=表达出来是，在从6点到７点这一个小时的时间段内，已经过去了15分钟，知道现在已经消费了一个小时的四分之一(1/4)，接下来就会自然的发问，按照这个进度，等一个小时结束能完成多少工作．
而hours:minutes的顺序，是关注在一天之内，比如=06:15=表达的是，现在是早上时间(6/24)，一天之计在于晨，后面的分钟15只是作为辅助．
总结：hour:minutes(6:15)关注的是一天之内，而minute:hour关注的是一个小时之内，以一个小时为单位做计划和考核产出．&lt;/p&gt;
&lt;p&gt;在直觉上采用哪一个作为基础,等更多的应用总结后,再行确定.暂时采用Hour:Minute的格式,因为minute:hour消耗更多大脑内存和计算资源.&lt;/p&gt;
&lt;p&gt;总结, cron是写给机器读的,对象是机器,因此将ctime倒叙.&lt;/p&gt;
&lt;p&gt;需要记住时间顺序的另外一个应用场景是=journalctl=&lt;/p&gt;
&lt;pre class="literal-block"&gt;journalctl --since  “YYYY-MM-DD HH:MM:SS” --until “YYYY-MM-DD HH:MM:SS”&lt;/pre&gt;
&lt;p&gt;从宏观到微观,从模糊到精确,这是写给人用的时间格式,也是ISO的标准时间格式.&lt;/p&gt;
&lt;p&gt;引用一段话:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your computer is not a lifeless piece of machinery. It is a dynamic
tool that interacts with your very thought processes. Whenever you
use a computer it becomes, for better or for worse, an extension of
your mind.&lt;/p&gt;
&lt;p&gt;This means that, whenever you use a Unix or Linux system, you are
forging a mental relationship with some of the smartest, most
accomplished (and satisfied) programmers and computer scientists who
ever lived. Such a partnership can't help but have a positive effect
on you.&lt;/p&gt;
&lt;p&gt;As you do, your mind will change for the better, your thought
processes will improve, and your way of looking at the world and at
yourself will change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id6"&gt;时间的格式&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以Cron的5个时间变量顺序为基础分析时间表示的格式, 前面加上second+(minute,
hour day, month weekday)后面补充year and weeknumber.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;时间的格式以C, python采用的unix strftime格式为准.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="literal-block"&gt;|-------------+----------+----------+---------------------+-----------------+-------------------+---------------------+---------------+---------|
| 时间变量    | 1.second | 2.minute | 3.hour              | 4.day           | 5.month           | 6.weekday           | 7.week number | 8.year  |
|-------------+----------+----------+---------------------+-----------------+-------------------+---------------------+---------------+---------|
| 常规符号    | %S 01    | %M 01    | %H 23               | %d 01           | %m 01             | %w (0-6)            | %W            | %y 19   |
| 简单扩展    |          |          | %I (12-hour), %p AM |                 |                   |                     |               | %Y 2019 |
| 文字描述    |          |          |                     |                 | %b Oct, %BOctober | %a Thu, %A Thursday |               |         |
| Obscure扩展 | %f 微秒  |          |                     | % e 1~31 %j 366 |                   | %u(1~7)             | %V %U         | %G 2019 |
|-------------+----------+----------+---------------------+-----------------+-------------------+---------------------+---------------+---------|&lt;/pre&gt;
&lt;p&gt;分析:&lt;/p&gt;
&lt;p&gt;第一行, 钟表时间全部为大写, 日期时间全部为小写,
WeekNumber大写%W与weekday %w相区分; 第二行, 简单扩展, %H是24小时制,
H后面的字母是I,因此用%I表示12小时制,同时%p(postnoon)标注上下午;
大写的%Y表示四位数字的年2019; 第三行, 文字描述,只有两个变量能以文字描述,
weekday和month, 分别用A, B表示.weekday %A还是第一重要的.&lt;/p&gt;
&lt;p&gt;前三行是常规的表示.&lt;/p&gt;
&lt;p&gt;第四行, obscure扩展, 微秒的表示应该是从剩余可选字母中随机确定的,
%f(fly飞逝),和数日子day 366 %j , %e空格padding. weekday与weekNumber在u,
v, w这三个字母上打转, 小写是weekday大写是weekNumber.&lt;/p&gt;
&lt;p&gt;总结: 按照表格前三行可以在一秒钟内永久性记忆, 日常的书写也采用该格式.
日如ctime &lt;code class="docutils literal"&gt;%a %b %d &lt;span class="pre"&gt;%H:%M:%S&lt;/span&gt; %Y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Timezone的表示&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [7]: !date +"%z"   #UTC offset
+0800
In [8]: !date +"%Z"
CST #China Standard Time&lt;/pre&gt;
&lt;p&gt;快捷方式的format&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In [10]: datetime.now().strftime("%c")      #Locale’s appropriate date and time representation.
Out[10]: 'Thu May  9 11:48:33 2019 #这个格式将weekday放在了前面, 也就是 %a %b的形式.
In [11]: datetime.now().strftime("%x")      #Locale’s appropriate date representation
Out[11]: '05/09/19'
In [12]: datetime.now().strftime("%X")
Out[12]: '11:49:06'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id7"&gt;总结&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;10个时间变量,将时区放置在最后.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;%f:%S:%M:%H %d-%m %w %W %Y %Z 日常的书写,使用符号替代minute, hour等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时间格式的的标准：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;ISO 8601 - Wikipedia &amp;lt;https://en.wikipedia.org/wiki/ISO_8601&amp;gt;&lt;/cite&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;W3C DTF &amp;lt;https://www.w3.org/TR/NOTE-datetime&amp;gt;&lt;/cite&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RFC 822(as updated by RFC 1123)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;RFC 2822 - Internet Message Format &amp;lt;https://tools.ietf.org/html/rfc2822.html&amp;gt;&lt;/cite&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>python</category><category>time</category><guid>https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/</guid><pubDate>Mon, 13 May 2019 09:38:19 GMT</pubDate></item><item><title>Re.sub参数顺序的问题</title><link>https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id1" id="id4"&gt;提出问题&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id2" id="id5"&gt;分析问题&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id3" id="id6"&gt;总结:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id4"&gt;提出问题&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在写 &lt;code class="docutils literal"&gt;re.sub&lt;/code&gt; 或者 &lt;code class="docutils literal"&gt;re.subn&lt;/code&gt; 的时候, 常常会不太确定引用参数的顺序,
需要中断的时间查看提示或者help文档. 比如  &lt;code class="docutils literal"&gt;trade war&lt;/code&gt;
修改为 &lt;code class="docutils literal"&gt;trade negotiation&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"war"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"negotiation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"trade war"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'trade negotiation'&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#首先处理regex-pattern&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id5"&gt;分析问题&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与 &lt;code class="docutils literal"&gt;string.methods&lt;/code&gt; 比较. &lt;code class="docutils literal"&gt;pattern&lt;/code&gt;
是与source(input&lt;sub&gt;string&lt;/sub&gt;)的匹配的内容,
repl是修改后的内容(destination), 这里顺序与=str.replace=是一致.&lt;/p&gt;
&lt;pre class="literal-block"&gt;replace(self, old, new, count=-1, /)&lt;/pre&gt;
&lt;p&gt;old 来自source, new是输出到destination结果中.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d8b4edb0986e4cb1b43d6f9d5b71acf5-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s2"&gt;"trade war"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"war"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"negotiation"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d8b4edb0986e4cb1b43d6f9d5b71acf5-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'trade negotiation'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;sed&lt;/code&gt; 也遵循同样的模式.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-1"&gt;&lt;/a&gt;s/regexp/replacement/
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-2"&gt;&lt;/a&gt;       Attempt  to  match  regexp  against  the  pattern  space.   If successful, replace that portion matched with
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-3"&gt;&lt;/a&gt;       replacement.  The replacement may contain the special character &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; to refer to that portion  of  the  pattern
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-4"&gt;&lt;/a&gt;       space  which  matched,  and  the  special  escapes &lt;span class="se"&gt;\1&lt;/span&gt; through &lt;span class="se"&gt;\9&lt;/span&gt; to refer to the corresponding matching sub-
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-5"&gt;&lt;/a&gt;       expressions in the regexp.
&lt;/pre&gt;&lt;p&gt;regex-pattern匹配 source 数据中的内容,
replacement则是替换后输出到destination结果中.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_5b9b3e0d70ba433f81740d71a242d342-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'trade war'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;"s/war/negotiation/g"&lt;/span&gt;
&lt;a name="rest_code_5b9b3e0d70ba433f81740d71a242d342-2"&gt;&lt;/a&gt;trade negotiation
&lt;/pre&gt;&lt;p&gt;其他的Text Processing&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"trade-war"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s2"&gt;"-"&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-2"&gt;&lt;/a&gt;trade
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-3"&gt;&lt;/a&gt;war
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-4"&gt;&lt;/a&gt;   tr &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... SET1 &lt;span class="o"&gt;[&lt;/span&gt;SET2&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;SET1 is from the source, SET2 is the result of the destination after
been processed.&lt;/p&gt;
&lt;p&gt;总结这种模式和思维惯例:&lt;/p&gt;
&lt;pre class="literal-block"&gt;function source destination&lt;/pre&gt;
&lt;p&gt;Text Processing如此,&lt;/p&gt;
&lt;p&gt;File Handling的utilities遵循同样的模式.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-1"&gt;&lt;/a&gt;mv &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... SOURCE... DIRECTORY
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-2"&gt;&lt;/a&gt;cp &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... &lt;span class="o"&gt;[&lt;/span&gt;-T&lt;span class="o"&gt;]&lt;/span&gt; SOURCE DEST
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-3"&gt;&lt;/a&gt;ln &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... Source... DIRECTORY
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-4"&gt;&lt;/a&gt;rsync &lt;span class="o"&gt;[&lt;/span&gt;OPTION...&lt;span class="o"&gt;]&lt;/span&gt; SRC... &lt;span class="o"&gt;[&lt;/span&gt;DEST&lt;span class="o"&gt;]&lt;/span&gt;
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-5"&gt;&lt;/a&gt;scp  SRC... DEST
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-6"&gt;&lt;/a&gt;dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/&lt;span class="o"&gt;{{&lt;/span&gt;source_drive&lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/&lt;span class="o"&gt;{{&lt;/span&gt;dest_drive&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;例外的情况是tar. =tar=是将目标放在前面.&lt;/p&gt;
&lt;p&gt;再回头看 &lt;code class="docutils literal"&gt;re.sub&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#扩展后&lt;/span&gt;
&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern_from_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replacement_to_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;三个参数中 &lt;code class="docutils literal"&gt;pattern_from_source&lt;/code&gt;, &lt;code class="docutils literal"&gt;replacement_to_result&lt;/code&gt; ,
&lt;code class="docutils literal"&gt;source_data&lt;/code&gt;
的最后一个是=source&lt;sub&gt;data&lt;/sub&gt;&lt;code class="docutils literal"&gt;, 将source放置在最后. =grep&lt;/code&gt; 与
=sed=都遵循同样的模式&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c56fdbba928b444dbc4aca82ff26de98-1"&gt;&lt;/a&gt;sed &lt;span class="s1"&gt;'s/{{regex}}/{{replace}}/'&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt;filename&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;a name="rest_code_c56fdbba928b444dbc4aca82ff26de98-2"&gt;&lt;/a&gt;grep &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt; -e PATTERN ... &lt;span class="o"&gt;[&lt;/span&gt;FILE...&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#grep regex source&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;例外的情况是=find=&lt;/p&gt;
&lt;pre class="literal-block"&gt;find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]
find [Option] source pattern&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id6"&gt;总结:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Data Stream Processing和File Handling遵循 &lt;code class="docutils literal"&gt;subroutine src dst&lt;/code&gt;
模式.两个例外的情况是=tar and find=&lt;/p&gt;
&lt;p&gt;这个问题之所以值得探讨,是因为涉及底层的方法论和工作模式.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>python</category><category>regex</category><guid>https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/</guid><pubDate>Wed, 08 May 2019 09:17:55 GMT</pubDate></item><item><title>Fluent Python </title><link>https://alinbxsorcerer.github.io/posts/flunt-python%20/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#preface" id="id1"&gt;Preface&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#who-this-book-is-for" id="id2"&gt;Who This Book Is For&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#who-this-book-is-not-for" id="id3"&gt;Who This Book Is Not For&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#how-this-book-is-organized" id="id4"&gt;How This Book Is Organized&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#hands-on-approach" id="id5"&gt;Hands-On Approach&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#hardware-used-for-timings" id="id6"&gt;Hardware Used for Timings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#soapbox-my-personal-perspective" id="id7"&gt;Soapbox: My Personal Perspective&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#python-version-covered" id="id8"&gt;Python Version Covered&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#python-jargon" id="id9"&gt;Python Jargon&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#publish" id="id10"&gt;Publish&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="preface"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#id1"&gt;Preface&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Here's the plan: when someone uses a feature you don't understand, simply shoot them. This is easier than learning something new, and before too long the only living coders will be writing in an easily understood, tiny subset of Python 0.9.6 — Tim Peters &lt;em&gt;Legendary core developer and author of The Zen of Python&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“Python is an easy to learn, powerful programming language.” Those are the first words of the &lt;a class="reference external" href="https://docs.python.org/3/tutorial/"&gt;official Python Tutorial&lt;/a&gt;. That is true, but there is a catch: because the language is easy to learn and put to use, many practicing Python programmers leverage only a fraction of its powerful features.&lt;/p&gt;
&lt;p&gt;An experienced programmer may start writing useful Python code in a matter of hours. As the first productive hours become weeks and months, a lot of developers go on writing Python code with a very strong accent carried from languages learned before. Even if Python is your first language, often in academia and in introductory books it is presented while carefully avoiding language-specific features.&lt;/p&gt;
&lt;p&gt;As a teacher introducing Python to programmers experienced in other languages, I see another problem that this book tries to address: we only miss stuff we know about. Coming from another language, anyone may guess that Python supports regular expressions, and look that up in the docs. But if you've never seen tuple unpacking or descriptors before, you will probably not search for them, and may end up not using those features just because they are specific to Python.&lt;/p&gt;
&lt;p&gt;This book is not an A-to-Z exhaustive reference of Python. Its emphasis is on the language features that are either unique to Python or not found in many other popular languages. This is also mostly a book about the core language and some of its libraries. I will rarely talk about packages that are not in the standard library, even though the Python package index now lists more than 60,000 libraries and many of them are incredibly useful.&lt;/p&gt;
&lt;div class="section" id="who-this-book-is-for"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#id2"&gt;Who This Book Is For&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This book was written for practicing Python programmers who want to become proficient in Python 3. If you know Python 2 but are willing to migrate to Python 3.4 or later, you should be fine. At the time of this writing, the majority of professional Python programmers are using Python 2, so I took special care to highlight Python 3 features that may be new to that audience.&lt;/p&gt;
&lt;p&gt;However, &lt;em&gt;Fluent Python&lt;/em&gt; is about making the most of Python 3.4, and I do not spell out the fixes needed to make the code work in earlier versions. Most examples should run in Python 2.7 with little or no changes, but in some cases, backporting would require significant rewriting.&lt;/p&gt;
&lt;p&gt;Having said that, I believe this book may be useful even if you must stick with Python 2.7, because the core concepts are still the same. Python 3 is not a new language, and most differences can be learned in an afternoon. &lt;a class="reference external" href="https://docs.python.org/3.0/whatsnew/3.0.html"&gt;What's New in Python 3.0&lt;/a&gt; is a good starting point. Of course, there have been changes since Python 3.0 was released in 2009, but none as important as those in 3.0.&lt;/p&gt;
&lt;p&gt;If you are not sure whether you know enough Python to follow along, review the topics of the official &lt;a class="reference external" href="https://docs.python.org/3/tutorial/"&gt;Python Tutorial&lt;/a&gt;. Topics covered in the tutorial will not be explained here, except for some features that are new in Python 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-this-book-is-not-for"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#id3"&gt;Who This Book Is Not For&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are just learning Python, this book is going to be hard to follow. Not only that, if you read it too early in your Python journey, it may give you the impression that every Python script should leverage special methods and metaprogramming tricks. Premature abstraction is as bad as premature optimization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-this-book-is-organized"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#id4"&gt;How This Book Is Organized&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The core audience for this book should not have trouble jumping directly to any chapter in this book. However, each of the six parts forms a book within the book. I conceived the chapters within each part to be read in sequence.&lt;/p&gt;
&lt;p&gt;I tried to emphasize using what is available before discussing how to build your own. For example, in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt02.html"&gt;Part II&lt;/a&gt;, &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/ch02.html"&gt;Chapter 2&lt;/a&gt; covers sequence types that are ready to use, including some that don't get a lot of attention, like &lt;code class="docutils literal"&gt;collections.deque&lt;/code&gt;. Building user-defined sequences is only addressed in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt04.html"&gt;Part IV&lt;/a&gt;, where we also see how to leverage the abstract base classes (ABCs) from &lt;code class="docutils literal"&gt;collections.abc&lt;/code&gt;. Creating your own ABCs is discussed even later in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt04.html"&gt;Part IV&lt;/a&gt;, because I believe it's important to be comfortable using an ABC before writing your own.&lt;/p&gt;
&lt;p&gt;This approach has a few advantages. First, knowing what is ready to use can save you from reinventing the wheel. We use existing collection classes more often than we implement our own, and we can give more attention to the advanced usage of available tools by deferring the discussion on how to create new ones. We are also more likely to inherit from existing ABCs than to create a new ABC from scratch. And finally, I believe it is easier to understand the abstractions after you've seen them in action.&lt;/p&gt;
&lt;p&gt;The downside of this strategy are the forward references scattered throughout the chapters. I hope these will be easier to tolerate now that you know why I chose this path.&lt;/p&gt;
&lt;p&gt;Here are the main topics in each part of the book:&lt;/p&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt01.html"&gt;Part I&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A single chapter about the Python data model explaining how the special methods (e.g., &lt;code class="docutils literal"&gt;__repr__&lt;/code&gt;) are the key to the consistent behavior of objects of all types—in a language that is admired for its consistency. Understanding various facets of the data model is the subject of most of the rest of the book, but &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/ch01.html"&gt;Chapter 1&lt;/a&gt; provides a high-level overview.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt02.html"&gt;Part II&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The chapters in this part cover the use of collection types: sequences, mappings, and sets, as well as the &lt;code class="docutils literal"&gt;str&lt;/code&gt; versus &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; split—the cause of much celebration among Python 3 users and much pain for Python 2 users who have not yet migrated their code bases. The main goals are to recall what is already available and to explain some behavior that is sometimes surprising, like the reordering of &lt;code class="docutils literal"&gt;dict&lt;/code&gt; keys when we are not looking, or the caveats of locale-dependent Unicode string sorting. To achieve these goals, the coverage is sometimes high level and wide (e.g., when many variations of sequences and mappings are presented) and sometimes deep (e.g., when we dive into the hash tables underneath the &lt;code class="docutils literal"&gt;dict&lt;/code&gt; and &lt;code class="docutils literal"&gt;set&lt;/code&gt; types).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt03.html"&gt;Part III&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Here we talk about functions as first-class objects in the language: what that means, how it affects some popular design patterns, and how to implement function decorators by leveraging closures. Also covered here is the general concept of callables in Python, function attributes, introspection, parameter annotations, and the new &lt;code class="docutils literal"&gt;nonlocal&lt;/code&gt; declaration in Python 3.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt04.html"&gt;Part IV&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Now the focus is on building classes. In &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt02.html"&gt;Part II&lt;/a&gt;, the &lt;code class="docutils literal"&gt;class&lt;/code&gt; declaration appears in few examples; &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt04.html"&gt;Part IV&lt;/a&gt; presents many classes. Like any object-oriented (OO) language, Python has its particular set of features that may or may not be present in the language in which you and I learned class-based programming. The chapters explain how references work, what mutability really means, the lifecycle of instances, how to build your own collections and ABCs, how to cope with multiple inheritance, and how to implement operator overloading—when that makes sense.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt05.html"&gt;Part V&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Covered in this part are the language constructs and libraries that go beyond sequential control flow with conditionals, loops, and subroutines. We start with generators, then visit context managers and coroutines, including the challenging but powerful new &lt;code class="docutils literal"&gt;yield from&lt;/code&gt; syntax. &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt05.html"&gt;Part V&lt;/a&gt; closes with a high-level introduction to modern concurrency in Python with &lt;code class="docutils literal"&gt;collections.futures&lt;/code&gt; (using threads and processes under the covers with the help of futures) and doing event-oriented I/O with &lt;code class="docutils literal"&gt;asyncio&lt;/code&gt; (leveraging futures on top of coroutines and &lt;code class="docutils literal"&gt;yield from&lt;/code&gt;).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt06.html"&gt;Part VI&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;This part starts with a review of techniques for building classes with attributes created dynamically to handle semi-structured data such as JSON datasets. Next, we cover the familiar properties mechanism, before diving into how object attribute access works at a lower level in Python using descriptors. The relationship between functions, methods, and descriptors is explained. Throughout &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt06.html"&gt;Part VI&lt;/a&gt;, the step-by-step implementation of a field validation library uncovers subtle issues that lead to the use of the advanced tools of the final chapter: class decorators and metaclasses.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="hands-on-approach"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#id5"&gt;Hands-On Approach&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Often we'll use the interactive Python console to explore the language and libraries. I feel it is important to emphasize the power of this learning tool, particularly for those readers who've had more experience with static, compiled languages that don't provide a read-eval-print#loop (REPL).&lt;/p&gt;
&lt;p&gt;One of the standard Python testing packages, &lt;code class="docutils literal"&gt;`doctest&lt;/code&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/doctest.html"&gt;https://docs.python.org/3/library/doctest.html&lt;/a&gt;&amp;gt;`__, works by simulating console sessions and verifying that the expressions evaluate to the responses shown. I used &lt;code class="docutils literal"&gt;doctest&lt;/code&gt; to check most of the code in this book, including the console listings. You don't need to use or even know about &lt;code class="docutils literal"&gt;doctest&lt;/code&gt; to follow along: the key feature of doctests is that they look like transcripts of interactive Python console sessions, so you can easily try out the demonstrations yourself.&lt;/p&gt;
&lt;p&gt;Sometimes I will explain what we want to accomplish by showing a doctest before the code that makes it pass. Firmly establishing what is to be done before thinking about how to do it helps focus our coding effort. Writing tests first is the basis of test driven development (TDD) and I've also found it helpful when teaching. If you are unfamiliar with &lt;code class="docutils literal"&gt;doctest&lt;/code&gt;, take a look at its &lt;a class="reference external" href="https://docs.python.org/3/library/doctest.html"&gt;documentation&lt;/a&gt; and this book's &lt;a class="reference external" href="https://github.com/fluentpython/example-code"&gt;source code repository&lt;/a&gt;. You'll find that you can verify the correctness of most of the code in the book by typing &lt;code class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; doctest example_script.py&lt;/code&gt; in the command shell of your OS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hardware-used-for-timings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#id6"&gt;Hardware Used for Timings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The book has some simple benchmarks and timings. Those tests were performed on one or the other laptop I used to write the book: a 2011 MacBook Pro 13” with a 2.7 GHz Intel Core i7 CPU, 8GB of RAM, and a spinning hard disk, and a 2014 MacBook Air 13” with a 1.4 GHz Intel Core i5 CPU, 4GB of RAM, and a solid-state disk. The MacBook Air has a slower CPU and less RAM, but its RAM is faster (1600 versus 1333 MHz) and the SSD is much faster than the HD. In daily usage, I can't tell which machine is faster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="soapbox-my-personal-perspective"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#id7"&gt;Soapbox: My Personal Perspective&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have been using, teaching, and debating Python since 1998, and I enjoy studying and comparing programming languages, their design, and the theory behind them. At the end of some chapters, I have added “Soapbox” sidebars with my own perspective about Python and other languages. Feel free to skip these if you are not into such discussions. Their content is completely optional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-version-covered"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#id8"&gt;Python Version Covered&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I tested all the code in the book using Python 3.4—that is, CPython 3.4, the most popular Python implementation written in C. There is only one exception: &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/ch13.html#matmul_operator_sec"&gt;The New @ Infix Operator in Python 3.5&lt;/a&gt; shows the &lt;code class="docutils literal"&gt;@&lt;/code&gt; operator, which is only supported by Python 3.5.&lt;/p&gt;
&lt;p&gt;Almost all code in the book should work with any Python 3.x–compatible interpreter, including PyPy3 2.4.0, which is compatible with Python 3.2.5. The notable exceptions are the examples using &lt;code class="docutils literal"&gt;yield from&lt;/code&gt; and &lt;code class="docutils literal"&gt;asyncio&lt;/code&gt;, which are only available in Python 3.3 or later.&lt;/p&gt;
&lt;p&gt;Most code should also work with Python 2.7 with minor changes, except the Unicode-related examples in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/ch04.html"&gt;Chapter 4&lt;/a&gt;, and the exceptions already noted for Python 3 versions earlier than 3.3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-jargon"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#id9"&gt;Python Jargon&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I wanted this to be a book not only about Python but also about the culture around it. Over more than 20 years of communications, the Python community developed its own particular lingo and acronyms. At the end of this book, &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/go01.html"&gt;Python Jargon&lt;/a&gt; contains a list of terms that have special meaning among Pythonistas.&lt;/p&gt;
&lt;p&gt;Many terms here are not exclusive to Python, of course, but particularly in the definitions you may find meanings that are specific to the Python community.&lt;/p&gt;
&lt;p&gt;Also see the official &lt;a class="reference external" href="https://docs.python.org/3/glossary.html"&gt;Python glossary&lt;/a&gt;.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;ABC (programming language)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A programming language created by Leo Geurts, Lambert Meertens, and Steven Pemberton. Guido van Rossum, who developed Python, worked as a programmer implementing the ABC environment in the 1980s. Block structuring by indentation, built-in tuples and dictionaries, tuple unpacking, the semantics of the &lt;code class="docutils literal"&gt;for&lt;/code&gt; loop, and uniform handling of all sequence types are some of the distinctive characteristics of Python that came from ABC.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Abstract base class (ABC)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class that cannot be instantiated, only subclassed. ABCs are how interfaces are formalized in Python. Instead of inheriting from an ABC, a class may also declare that it fulfills the interface by registering with the ABC to become a &lt;em&gt;virtual subclass&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;accessor&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A method implemented to provide access to a single data attribute. Some authors use &lt;em&gt;acessor&lt;/em&gt; as a generic term encompassing getter and setter methods, others use it to refer only to getters, referring to setters as mutators.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;aliasing&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Assigning two or more names to the same object. For example, in &lt;code class="docutils literal"&gt;a = []; b = a&lt;/code&gt; the variables &lt;code class="docutils literal"&gt;a&lt;/code&gt; and &lt;code class="docutils literal"&gt;b&lt;/code&gt; are aliases for the same list object. Aliasing happens naturally all the time in any language where variables store references to objects. To avoid confusion, just forget the idea that variables are boxes that hold objects (an object can't be in two boxes at the same time). It's better to think of them as labels attached to objects (an object can have more than one label).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;argument&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An expression passed to a function when it is called. In Pythonic parlance, &lt;em&gt;argument&lt;/em&gt; and &lt;em&gt;parameter&lt;/em&gt; are almost always synonyms. See &lt;em&gt;parameter&lt;/em&gt; for more about the distinction and usage of these terms.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;attribute&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Methods and data attributes (i.e., “fields” in Java terms) are all known as attributes in Python. A method is just an attribute that happens to be a callable object (usually a function, but not necessarily).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;BDFL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Benevolent Dictator For Life, alias for Guido van Rossum, creator of the Python language.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;binary sequence&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Generic term for sequence types with byte elements. The built-in binary sequence types are &lt;code class="docutils literal"&gt;byte&lt;/code&gt;, &lt;code class="docutils literal"&gt;bytearray&lt;/code&gt;, and &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;BOM&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Byte Order Mark, a sequence of bytes that may be present at the start of a UTF-16 encoded file. A BOM is the character U+FEFF (&lt;code class="docutils literal"&gt;ZERO WIDTH &lt;span class="pre"&gt;NO-BREAK&lt;/span&gt; SPACE&lt;/code&gt;) encoded to produce either &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;b'\xfe\xff'&lt;/span&gt;&lt;/code&gt; on a big-endian CPU, or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;b'\xff\xfe'&lt;/span&gt;&lt;/code&gt; on a little-endian one. Because there is no U+FFFE characer in Unicode, the presence of these bytes unambiguously reveals the byte ordering used in the encoding. Although redundant, a BOM encoded as &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;b'\xef\xbb\xbf'&lt;/span&gt;&lt;/code&gt; may be found in UTF-8 files.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;bound method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A method that is accessed through an instance becomes bound to that instance. Any method is actually a descriptor and when accessed, it returns itself wrapped in an object that binds the method to the instance. That object is the bound method. It can be invoked without passing the value of &lt;code class="docutils literal"&gt;self&lt;/code&gt;. For example, given the assignment &lt;code class="docutils literal"&gt;my_method = my_obj.method&lt;/code&gt;, the bound method can later be called as &lt;code class="docutils literal"&gt;my_method()&lt;/code&gt;. Contrast with &lt;em&gt;unbound method&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;built-in function (BIF)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A function bundled with the Python interpreter, coded in the underlying implementation language (i.e., C for CPython; Java for Jython, and so on). The term often refers only to the functions that don't need to be imported, documented in &lt;a class="reference external" href="http://docs.python.org/library/functions.html"&gt;Chapter 2, “Built-in Functions,”&lt;/a&gt; of The Python Standard Library Reference. But built-in modules like &lt;code class="docutils literal"&gt;sys&lt;/code&gt;, &lt;code class="docutils literal"&gt;math&lt;/code&gt;, &lt;code class="docutils literal"&gt;re&lt;/code&gt;, etc. also contain built-in functions.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;byte string&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An unfortunate name still used to refer to &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; or &lt;code class="docutils literal"&gt;bytearray&lt;/code&gt; in Python 3. In Python 2, the &lt;code class="docutils literal"&gt;str&lt;/code&gt; type was really a byte string, and the term made sense to distinguish &lt;code class="docutils literal"&gt;str&lt;/code&gt; from &lt;code class="docutils literal"&gt;unicode&lt;/code&gt; strings. In Python 3, it makes no sense to insist on this term, and I tried to use &lt;em&gt;byte sequence&lt;/em&gt; whenever I needed to talk in general about…byte sequences.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;bytes-like object&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A generic sequence of bytes. The most common bytes-like types are &lt;code class="docutils literal"&gt;bytes&lt;/code&gt;, &lt;code class="docutils literal"&gt;bytearray&lt;/code&gt;, and &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt; but other objects supporting the low-level CPython buffer protocol also qualify, if their elements are single bytes.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;callable object&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An object that can be invoked with the call operator &lt;code class="docutils literal"&gt;()&lt;/code&gt;, to return a result or to perform some action. There are seven flavors of callable objects in Python: user-defined functions, built-in functions, built-in methods, instance methods, generator functions, classes, and instances of classes that implement the &lt;code class="docutils literal"&gt;__call__&lt;/code&gt; special method.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;CamelCase&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The convention of writing identifiers by joining words with uppercased initials (e.g., &lt;code class="docutils literal"&gt;ConnectionRefusedError&lt;/code&gt;). PEP-8 recommends class names should be written in CamelCase, but the advice is not followed by the Python standard library. See &lt;em&gt;snake\case&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Cheese Shop&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Original name of the &lt;a class="reference external" href="https://pypi.python.org/pypi"&gt;Python Package Index&lt;/a&gt; (PyPI), after the Monty Python skit about a cheese shop where nothing is available. As of this writing, the alias &lt;a class="reference external" href="https://cheeseshop.python.org"&gt;https://cheeseshop.python.org&lt;/a&gt; still works. See &lt;em&gt;PyPI&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;class&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A program construct defining a new type, with data attributes and methods specifying possible operations on them. See &lt;code class="docutils literal"&gt;type&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;code point&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An integer in the range 0 to 0x10FFFF used to identify an entry in the Unicode character database. As of Unicode 7.0, less than 3% of all code points are assigned to characters. In the Python documentation, the term may be spelled as one or two words. For example, in &lt;a class="reference external" href="http://docs.python.org/library/functions.html"&gt;Chapter 2, “Built-in Functions,”&lt;/a&gt; of the &lt;em&gt;Python Library Reference&lt;/em&gt;, the &lt;code class="docutils literal"&gt;chr&lt;/code&gt; function is said to take an integer “codepoint,” while its inverse, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;, is described as returning a “Unicode code point.”&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;code smell&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A coding pattern that suggests there may be something wrong with the design of a program. For example, excessive use of &lt;code class="docutils literal"&gt;isinstance&lt;/code&gt; checks against concrete classes is a code smell, as it makes the program harder to extend to deal with new types in the future.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;codec&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;(encoder/decoder) A module with functions to encode and decode, usually from &lt;code class="docutils literal"&gt;str&lt;/code&gt; to &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; and back, although Python has a few codecs that perform &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; to &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; and &lt;code class="docutils literal"&gt;str&lt;/code&gt; to &lt;code class="docutils literal"&gt;str&lt;/code&gt; transformations.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;collection&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Generic term for data structures made of items that can be accessed individually. Some collections can contain objects of arbitrary types (see &lt;em&gt;container&lt;/em&gt;) and others only objects of a single atomic type (see &lt;em&gt;flat sequence&lt;/em&gt;). &lt;code class="docutils literal"&gt;list&lt;/code&gt; and &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; are both collections, but &lt;code class="docutils literal"&gt;list&lt;/code&gt; is a container, and &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; is a flat sequence.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;considered harmful&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Edsger Dijkstra's letter titled “Go To Statement Considered Harmful” established a formula for titles of essays criticizing some computer science technique. Wikipedia's &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Considered_harmful"&gt;“Considered harmful” article&lt;/a&gt; lists several examples, including &lt;a class="reference external" href="http://meyerweb.com/eric/comment/chech.html"&gt;"Considered Harmful Essays Considered Harmful”&lt;/a&gt; by Eric A. Meyer.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;constructor&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Informally, the &lt;code class="docutils literal"&gt;__init__&lt;/code&gt; instance method of a class is called its constructor, because its semantics is similar to that of a Java constructor. However, a fitting name for &lt;code class="docutils literal"&gt;__init__&lt;/code&gt; is &lt;em&gt;initializer&lt;/em&gt;, as it does not actually build the instance, but receives it as its &lt;code class="docutils literal"&gt;self&lt;/code&gt; argument. The &lt;em&gt;constructor&lt;/em&gt; term better describes the &lt;code class="docutils literal"&gt;__new__&lt;/code&gt; class method, which Python calls before &lt;code class="docutils literal"&gt;__init__&lt;/code&gt;, and is responsible for actually creating an instance and returning it. See &lt;em&gt;initializer&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;container&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An object that holds references to other objects. Most collection types in Python are containers, but some are not. Contrast with &lt;em&gt;flat sequence&lt;/em&gt;, which are collections but not containers.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;context manager&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An object implementing both the &lt;code class="docutils literal"&gt;__enter__&lt;/code&gt; and &lt;code class="docutils literal"&gt;__exit__&lt;/code&gt; special methods, for use in a &lt;code class="docutils literal"&gt;with&lt;/code&gt; block.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;coroutine&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A generator used for concurrent programming by receiving values from a scheduler or an event loop via &lt;code class="docutils literal"&gt;coro.send(value)&lt;/code&gt;. The term may be used to describe the generator function or the generator object obtained by calling the generator function. See &lt;em&gt;generator&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;CPython&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The standard Python interpreter, implemented in C. This term is only used when discussing implementation-specific behavior, or when talking about the multiple Python interpreters available, such as &lt;em&gt;PyPy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;CRUD&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Acronym for Create, Read, Update, and Delete, the four basic functions in any application that stores records.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;decorator&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A callable object &lt;code class="docutils literal"&gt;A&lt;/code&gt; that returns another callable object &lt;code class="docutils literal"&gt;B&lt;/code&gt; and is invoked in code using the syntax &lt;code class="docutils literal"&gt;@A&lt;/code&gt; right before the definition of a callable &lt;code class="docutils literal"&gt;C&lt;/code&gt;. When reading such code, the Python interpreter invokes &lt;code class="docutils literal"&gt;A(C)&lt;/code&gt; and binds the resulting &lt;code class="docutils literal"&gt;B&lt;/code&gt; to the variable previously assigned to &lt;code class="docutils literal"&gt;C&lt;/code&gt;, effectively replacing the definition of &lt;code class="docutils literal"&gt;C&lt;/code&gt; with &lt;code class="docutils literal"&gt;B&lt;/code&gt;. If the target callable &lt;code class="docutils literal"&gt;C&lt;/code&gt; is a function, then &lt;code class="docutils literal"&gt;A&lt;/code&gt; is a function decorator; if &lt;code class="docutils literal"&gt;C&lt;/code&gt; is a class, then &lt;code class="docutils literal"&gt;A&lt;/code&gt; is a class decorator.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;deep copy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A copy of an object in which all the objects that are attributes of the object are themselves also copied. Contrast with &lt;em&gt;shallow copy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;descriptor&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class implementing one or more of the &lt;code class="docutils literal"&gt;__get__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__set__&lt;/code&gt;, or &lt;code class="docutils literal"&gt;__delete__&lt;/code&gt; special methods becomes a descriptor when one of its instances is used as a class attribute of another class, the &lt;em&gt;managed class&lt;/em&gt;. Descriptors manage the access and deletion of &lt;em&gt;managed attributes&lt;/em&gt; in the &lt;em&gt;managed class&lt;/em&gt;, often storing data in the &lt;em&gt;managed instances&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;docstring&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Short for documentation string. When the first statement in a module, class, or function is a string literal, it is taken to be the &lt;em&gt;docstring&lt;/em&gt; for the enclosing object, and the interpreter saves it as the &lt;code class="docutils literal"&gt;__doc__&lt;/code&gt; attribute of that object. See also &lt;em&gt;doctest&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;doctest&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A module with functions to parse and run examples embedded in the docstrings of Python modules or in plain-text files. May also be used from the command line as:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 195)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "screen"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: screen

   python -m doctest
   module_with_tests.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;DRY&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Don't Repeat Yourself—a software engineering principle stating that “Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.” It first appeared in the book &lt;em&gt;The Pragmatic Programmer&lt;/em&gt; by Andy Hunt and Dave Thomas (Addison-Wesley, 1999).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;duck typing&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A form of polymorphism where functions operate on any object that implements the appropriate methods, regardless of their classes or explicit interface declarations.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;dunder&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Shortcut to pronounce the names of &lt;em&gt;special methods&lt;/em&gt; and attributes that are written with leading and trailing double-underscores (i.e., &lt;code class="docutils literal"&gt;__len__&lt;/code&gt; is read as “dunder len”).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;dunder method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;See &lt;em&gt;dunder&lt;/em&gt; and &lt;em&gt;special methods&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;EAFP&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Acronym standing for the quote “It's easier to ask forgiveness than permission,” attributed to computer pioneer Grace Hopper, and quoted by Pythonistas referring to dynamic programming practices like accessing attributes without testing first if they exist, and then catching the exception when that is the case. The docstring for the &lt;code class="docutils literal"&gt;hasattr&lt;/code&gt; function actually says that it works “by calling getattr(object, name) and catching AttributeError.”&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;eager&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An iterable object that builds all its items at once. In Python, a &lt;em&gt;list comprehension&lt;/em&gt; is eager. Contrast with &lt;em&gt;lazy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;fail-fast&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A systems design approach recommending that errors should be reported as early as possible. Python adheres to this principle more closely than most dynamic languages. For example, there is no “undefined” value: variables referenced before initialization generate an error, and &lt;code class="docutils literal"&gt;my_dict[k]&lt;/code&gt; raises an exception if &lt;code class="docutils literal"&gt;k&lt;/code&gt; is missing (in contrast with JavaScript). As another example, parallel assignment via tuple unpacking in Python only works if every item is explicitly handled, while Ruby silently deals with item count mismatches by ignoring unused items on the right side of the &lt;code class="docutils literal"&gt;=&lt;/code&gt;, or by assigning &lt;code class="docutils literal"&gt;nil&lt;/code&gt; to extra variables on the left side.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;falsy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Any value &lt;code class="docutils literal"&gt;x&lt;/code&gt; for which &lt;code class="docutils literal"&gt;bool(x)&lt;/code&gt; returns &lt;code class="docutils literal"&gt;False&lt;/code&gt;; Python implicitly uses &lt;code class="docutils literal"&gt;bool&lt;/code&gt; to evaluate objects in Boolean contexts, such as the expression controlling an &lt;code class="docutils literal"&gt;if&lt;/code&gt; or &lt;code class="docutils literal"&gt;while&lt;/code&gt; loop. The opposite of &lt;em&gt;truthy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;file-like object&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Used informally in the official documentation to refer to objects implementing the file protocol, with methods such as &lt;code class="docutils literal"&gt;read&lt;/code&gt;, &lt;code class="docutils literal"&gt;write&lt;/code&gt;, &lt;code class="docutils literal"&gt;close&lt;/code&gt;, etc. Common variants are text files containing encoded strings with line-oriented reading and writing, &lt;code class="docutils literal"&gt;StringIO&lt;/code&gt; instances which are in-memory text files, and binary files, containing unencoded bytes. The latter may be buffered or unbuffered. ABCs for the standard file types are defined in the &lt;code class="docutils literal"&gt;io&lt;/code&gt; module since Python 2.6.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;first-class function&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Any function that is a first-class object in the language (i.e., can be created at runtime, assigned to variables, passed as an argument, and returned as the result of another function). Python functions are first-class functions.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;flat sequence&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A sequence type that physically stores the values of its items, and not references to other objects. The built-in types &lt;code class="docutils literal"&gt;str&lt;/code&gt;, &lt;code class="docutils literal"&gt;bytes&lt;/code&gt;, &lt;code class="docutils literal"&gt;bytearray&lt;/code&gt;, &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt;, and &lt;code class="docutils literal"&gt;array.array&lt;/code&gt; are flat sequences. Contrast with &lt;code class="docutils literal"&gt;list&lt;/code&gt;, &lt;code class="docutils literal"&gt;tuple&lt;/code&gt;, and &lt;code class="docutils literal"&gt;collections.deque&lt;/code&gt;, which are container sequences. See &lt;em&gt;container&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;function&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Strictly, an object resulting from evaluation of a &lt;code class="docutils literal"&gt;def&lt;/code&gt; block or a &lt;code class="docutils literal"&gt;lambda&lt;/code&gt; expression. Informally, the word &lt;em&gt;function&lt;/em&gt; is used to describe any callable object, such as methods and even classes sometimes. The official &lt;a class="reference external" href="http://docs.python.org/library/functions.html"&gt;Built-in Functions&lt;/a&gt; list includes several built-in classes like &lt;code class="docutils literal"&gt;dict&lt;/code&gt;, &lt;code class="docutils literal"&gt;range&lt;/code&gt;, and &lt;code class="docutils literal"&gt;str&lt;/code&gt;. Also see &lt;em&gt;callable object&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;genexp&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Short for &lt;em&gt;generator expression&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;generator&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An iterator built with a generator function or a generator expression that may produce values without necessarily iterating over a collection; the canonical example is a generator to produce the Fibonacci series which, because it is infinite, would never fit in a collection. The term is sometimes used to describe a &lt;em&gt;generator function&lt;/em&gt;, besides the object that results from calling it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;generator function&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A function that has the &lt;code class="docutils literal"&gt;yield&lt;/code&gt; keyword in its body. When invoked, a generator function returns a &lt;em&gt;generator&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;generator expression&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An expression enclosed in parentheses using the same syntax of a &lt;em&gt;list comprehension&lt;/em&gt;, but returning a generator instead of a list. A &lt;em&gt;generator expression&lt;/em&gt; can be understood as a &lt;em&gt;lazy&lt;/em&gt; version of a &lt;em&gt;list comprehension&lt;/em&gt;. See &lt;em&gt;lazy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;generic function&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A group of functions designed to implement the same operation in customized ways for different object types. As of Python 3.4, the &lt;code class="docutils literal"&gt;functools.singledispatch&lt;/code&gt; decorator is the standard way to create generic functions. This is known as multimethods in other languages.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;GoF book&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Alias for &lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt; (Addison-Wesley, 1995), authored by the so-called Gang of Four (GoF): Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;hashable&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An object is hashable if it has both &lt;code class="docutils literal"&gt;__hash__&lt;/code&gt; and &lt;code class="docutils literal"&gt;__eq__&lt;/code&gt; methods, with the constraints that the hash value must never change and if &lt;code class="docutils literal"&gt;a =&lt;/code&gt; b= then &lt;code class="docutils literal"&gt;hash(a) =&lt;/code&gt; hash(b)= must also be &lt;code class="docutils literal"&gt;True&lt;/code&gt;. Most immutable built-in types are hashable, but a tuple is only hashable if every one of its items is also hashable.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;higher-order function&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A function that takes another function as argument, like &lt;code class="docutils literal"&gt;sorted&lt;/code&gt;, &lt;code class="docutils literal"&gt;map&lt;/code&gt;, and &lt;code class="docutils literal"&gt;filter&lt;/code&gt;, or a function that returns a function as result, as Python decorators do.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;idiom&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;“A manner of speaking that is natural to native speakers of a language,” according to the Princeton WordNet.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;import time&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The moment of initial execution of a module when its code is loaded by the Python interpreter, evaluated from top to bottom, and compiled into bytecode. This is when classes and functions are defined and become live objects. This is also when decorators are executed.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;initializer&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A better name for the &lt;code class="docutils literal"&gt;__init__&lt;/code&gt; method (instead of &lt;em&gt;constructor&lt;/em&gt;). Initializing the instance received as &lt;code class="docutils literal"&gt;self&lt;/code&gt; is the task of &lt;code class="docutils literal"&gt;__init__&lt;/code&gt;. Actual instance construction is done by the &lt;code class="docutils literal"&gt;__new__&lt;/code&gt; method. See &lt;em&gt;constructor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;iterable&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Any object from which the &lt;code class="docutils literal"&gt;iter&lt;/code&gt; built-in function can obtain an iterator. An iterable object works as the source of items in &lt;code class="docutils literal"&gt;for&lt;/code&gt; loops, comprehensions, and tuple unpacking. Objects implementing an &lt;code class="docutils literal"&gt;__iter__&lt;/code&gt; method returning an &lt;em&gt;iterator&lt;/em&gt; are iterable. Sequences are always iterable; other objects implementing a &lt;code class="docutils literal"&gt;__getitem__&lt;/code&gt; method may also be iterable.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;iterable unpacking&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A modern, more precise synonym for &lt;em&gt;tuple unpacking&lt;/em&gt;. See also &lt;em&gt;parallel assignment&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;iterator&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Any object that implements the &lt;code class="docutils literal"&gt;__next__&lt;/code&gt; no-argument method, which returns the next item in a series, or raises &lt;code class="docutils literal"&gt;StopIteration&lt;/code&gt; when there are no more items. Python iterators also implement the &lt;code class="docutils literal"&gt;__iter__&lt;/code&gt; method so they are also &lt;em&gt;iterable&lt;/em&gt;. Classic iterators, according to the original design pattern, return items from a collection. A &lt;em&gt;generator&lt;/em&gt; is also an &lt;em&gt;iterator&lt;/em&gt;, but it's more flexible. See &lt;em&gt;generator&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;KISS principle&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The acronym stands for “Keep It Simple, Stupid.” This calls for seeking the simplest possible solution, with the fewest moving parts. The phrase was coined by Kelly Johnson, a highly accomplished aerospace engineer who worked in the real Area 51 designing some of the most advanced aircraft of the 20th century.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;lazy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An iterable object that produces items on demand. In Python, generators are lazy. Contrast &lt;em&gt;eager&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;listcomp&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Short for &lt;em&gt;list comprehension&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;list comprehension&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An expression enclosed in brackets that uses the &lt;code class="docutils literal"&gt;for&lt;/code&gt; and &lt;code class="docutils literal"&gt;in&lt;/code&gt; keywords to build a list by processing and filtering the elements from one or more iterables. A list comprehension works eagerly. See &lt;em&gt;eager&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;liveness&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An asynchronous, threaded, or distributed system exhibits the liveness property when “something good eventually happens” (i.e., even if some expected computation is not happening right now, it will be completed eventually). If a system deadlocks, it has lost its liveness.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;magic method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Same as &lt;em&gt;special method&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;managed attribute&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A public attribute managed by a descriptor object. Although the &lt;em&gt;managed attribute&lt;/em&gt; is defined in the &lt;em&gt;managed class&lt;/em&gt;, it operates like an instance attribute (i.e., it usually has a value per instance, held in a &lt;em&gt;storage attribute&lt;/em&gt;). See &lt;em&gt;descriptor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;managed class&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class that uses a descriptor object to manage one of its attributes. See &lt;em&gt;descriptor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;managed instance&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An instance of a &lt;em&gt;managed class&lt;/em&gt;. See &lt;em&gt;managed attribute&lt;/em&gt; and &lt;em&gt;descriptor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;metaclass&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class whose instances are classes. By default, Python classes are instances of &lt;code class="docutils literal"&gt;type&lt;/code&gt;, for example, &lt;code class="docutils literal"&gt;type(int)&lt;/code&gt; is the class &lt;code class="docutils literal"&gt;type&lt;/code&gt;, therefore &lt;code class="docutils literal"&gt;type&lt;/code&gt; is a metaclass. User-defined metaclasses can be created by subclassing &lt;code class="docutils literal"&gt;type&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;metaprogramming&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The practice of writing programs that use runtime information about themselves to change their behavior. For example, an &lt;em&gt;ORM&lt;/em&gt; may introspect model class declarations to determine how to validate database record fields and convert database types to Python types.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;monkey patching&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Dynamically changing a module, class, or function at runtime, usually to add features or fix bugs. Because it is done in memory and not by changing the source code, a monkey patch only affects the currently running instance of the program. Monkey patches break encapsulation and tend to be tightly coupled to the implementation details of the patched code units, so they are seen as temporary workarounds and not a recommended technique for code integration.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;mixin class&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class designed to be subclassed together with one or more additional classes in a multiple-inheritance class tree. A mixin class should never be instantiated, and a concrete subclass of a mixin class should also subclass another nonmixin class.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;mixin method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A concrete method implementation provided in an ABC or in a &lt;em&gt;mixin class&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;mutator&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;See &lt;em&gt;accessor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;name mangling&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The automatic renaming of private attributes from &lt;code class="docutils literal"&gt;__x&lt;/code&gt; to &lt;code class="docutils literal"&gt;_MyClass__x&lt;/code&gt;, performed by the Python interpreter at runtime.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;nonoverriding descriptor&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A &lt;em&gt;descriptor&lt;/em&gt; that does not implement &lt;code class="docutils literal"&gt;__set__&lt;/code&gt; and therefore does not interfere with setting of the &lt;em&gt;managed attribute&lt;/em&gt; in the &lt;em&gt;managed instance&lt;/em&gt;. Consequently, if a namesake attribute is set in the &lt;em&gt;managed instance&lt;/em&gt;, it will shadow the descriptor in that instance. Also called nondata descriptor or shadowable descriptor. Contrast with &lt;em&gt;overriding descriptor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;ORM&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Object-Relational Mapper—an API that provides access to database tables and records as Python classes and objects, providing method calls to perform database operations. SQLAlchemy is a popular standalone Python ORM; the Django and Web2py frameworks have their own bundled ORMs.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;overriding descriptor&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A &lt;em&gt;descriptor&lt;/em&gt; that implements &lt;code class="docutils literal"&gt;__set__&lt;/code&gt; and therefore intercepts and overrides attempts at setting the &lt;em&gt;managed attribute&lt;/em&gt; in the &lt;em&gt;managed instance&lt;/em&gt;. Also called data descriptor or enforced descriptor. Contrast with &lt;em&gt;non-overriding descriptor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;parallel assignment&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Assigning to several variables from items in an iterable, using syntax like &lt;code class="docutils literal"&gt;a, b = [c, d]&lt;/code&gt;—also known as destructuring assignment. This is a common application of &lt;em&gt;tuple unpacking&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;parameter&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Functions are declared with 0 or more “formal parameters,” which are unbound local variables. When the function is called, the &lt;em&gt;arguments&lt;/em&gt; or “actual parameters” passed are bound to those variables. In this book, I tried to use &lt;em&gt;argument&lt;/em&gt; to refer to an actual parameter passed to a function, and &lt;em&gt;parameter&lt;/em&gt; for a formal parameter in the function declaration. However, that is not always feasible because the terms &lt;em&gt;parameter&lt;/em&gt; and &lt;em&gt;argument&lt;/em&gt; are used interchangeably all over the Python docs and API. See &lt;em&gt;argument&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;prime (verb)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Calling &lt;code class="docutils literal"&gt;next(coro)&lt;/code&gt; on a coroutine to advance it to its first &lt;code class="docutils literal"&gt;yield&lt;/code&gt; expression so that it becomes ready to receive values in succeeding &lt;code class="docutils literal"&gt;coro.send(value)&lt;/code&gt; calls.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;PyPI&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The &lt;a class="reference external" href="https://pypi.python.org"&gt;Python Package Index&lt;/a&gt;, where more than 60,000 packages are available, also known as the &lt;em&gt;Cheese shop&lt;/em&gt; (see &lt;em&gt;Cheese shop&lt;/em&gt;). PyPI is pronounced as “pie-P-eye” to avoid confusion with &lt;em&gt;PyPy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;PyPy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An alternative implementation of the Python programming language using a toolchain that compiles a subset of Python to machine code, so the interpreter source code is actually written in Python. PyPy also includes a JIT to generate machine code for user programs on the fly—like the Java VM does. As of November 2014, PyPy is 6.8 times faster than CPython on average, according to &lt;a class="reference external" href="http://speed.pypy.org"&gt;published benchmarks&lt;/a&gt;. PyPy is pronounced as “pie-pie” to avoid confusion with &lt;em&gt;PyPI&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Pythonic&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Used to praise idiomatic Python code, that makes good use of language features to be concise, readable, and often faster as well. Also said of APIs that enable coding in a way that seems natural to proficient Python programmers. See &lt;em&gt;idiom&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;refcount&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The reference counter that each CPython object keeps internally in order to determine when it can be destroyed by the garbage collector.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;referent&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The object that is the target of a reference. This term is most often used to discuss &lt;em&gt;weak references&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;REPL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Read-eval-print loop, an interactive console, like the standard &lt;code class="docutils literal"&gt;python&lt;/code&gt; or alternatives like &lt;code class="docutils literal"&gt;ipython&lt;/code&gt;, &lt;code class="docutils literal"&gt;bpython&lt;/code&gt;, and Python Anywhere.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;sequence&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Generic name for any iterable data structure with a known size (e.g., &lt;code class="docutils literal"&gt;len(s)&lt;/code&gt;) and allowing item access via 0-based integer indexes (e.g., &lt;code class="docutils literal"&gt;s[0]&lt;/code&gt;). The word &lt;em&gt;sequence&lt;/em&gt; has been part of the Python jargon from the start, but only with Python 2.6 was it formalized as an abstract class in &lt;code class="docutils literal"&gt;collections.abc.Sequence&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;serialization&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Converting an object from its in-memory structure to a binary or text-oriented format for storage or transmission, in a way that allows the future reconstruction of a clone of the object on the same system or on a different one. The &lt;code class="docutils literal"&gt;pickle&lt;/code&gt; module supports serialization of arbitrary Python objects to a binary format.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;shallow copy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A copy of an object which shares references to all the objects that are attributes of the original object. Contrast with &lt;em&gt;deep copy&lt;/em&gt;. Also see &lt;em&gt;aliasing&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;singleton&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An object that is the only existing instance of a class—usually not by accident but because the class is designed to prevent creation of more than one instance. There is also a design pattern named Singleton, which is a recipe for coding such classes. The &lt;code class="docutils literal"&gt;None&lt;/code&gt; object is a singleton in Python.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;slicing&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Producing a subset of a sequence by using the slice notation, e.g., &lt;code class="docutils literal"&gt;my_sequence[2:6]&lt;/code&gt;. Slicing usually copies data to produce a new object; in particular, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;my_sequence[:]&lt;/span&gt;&lt;/code&gt; creates a shallow copy of the entire sequence. But a &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt; object can be sliced to produce a new &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt; that shares data with the original object.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;snake\&lt;sub&gt;case&lt;/sub&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The convention of writing identifiers by joining words with the underscore character (&lt;code class="docutils literal"&gt;_&lt;/code&gt;)—for example, &lt;code class="docutils literal"&gt;run_until_complete&lt;/code&gt;. PEP-8 calls this style “lowercase with words separated by underscores” and recommends it for naming functions, methods, arguments, and variables. For packages, PEP-8 recommends concatenating words with no separators. The Python standard library has many examples of &lt;code class="docutils literal"&gt;snake_case&lt;/code&gt; identifiers, but also many examples of identifiers with no separation between words (e.g., &lt;code class="docutils literal"&gt;getattr&lt;/code&gt;, &lt;code class="docutils literal"&gt;classmethod&lt;/code&gt;, &lt;code class="docutils literal"&gt;isinstance&lt;/code&gt;, &lt;code class="docutils literal"&gt;str.endswith&lt;/code&gt;, etc.). See &lt;em&gt;CamelCase&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;special method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A method with a special name such as &lt;code class="docutils literal"&gt;__getitem__&lt;/code&gt;, spelled with leading and trailing double underscores. Almost all special methods recognized by Python are described in the &lt;a class="reference external" href="http://bit.ly/1GsZwss"&gt;“Data model” chapter&lt;/a&gt; of &lt;em&gt;The Python Language Reference&lt;/em&gt;, but a few that are used only in specific contexts are documented in other parts of the documentation. For example, the &lt;code class="docutils literal"&gt;__missing__&lt;/code&gt; method of mappings is mentioned in &lt;cite&gt;“4.10. Mapping Types — ``dict`&lt;/cite&gt;" &amp;lt;&lt;a class="reference external" href="http://bit.ly/1QS9Ong"&gt;http://bit.ly/1QS9Ong&lt;/a&gt;&amp;gt;`__ in &lt;em&gt;The Python Standard Library&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;storage attribute&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An attribute in a &lt;em&gt;managed instance&lt;/em&gt; used to store the value of an attribute managed by a &lt;em&gt;descriptor&lt;/em&gt;. See also &lt;em&gt;managed attribute&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;strong reference&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A reference that keeps an object alive in Python. Contrast with &lt;em&gt;weak reference&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;tuple unpacking&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Assigning items from an iterable object to a tuple of variables (e.g., &lt;code class="docutils literal"&gt;first, second, third =&lt;/code&gt; my&lt;sub&gt;list&lt;/sub&gt;=). This is the usual term used by Pythonistas, but &lt;em&gt;iterable unpacking&lt;/em&gt; is gaining traction.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;truthy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Any value &lt;code class="docutils literal"&gt;x&lt;/code&gt; for which &lt;code class="docutils literal"&gt;bool(x)&lt;/code&gt; returns &lt;code class="docutils literal"&gt;True&lt;/code&gt;; Python implicitly uses &lt;code class="docutils literal"&gt;bool&lt;/code&gt; to evaluate objects in Boolean contexts, such as the expression controlling an &lt;code class="docutils literal"&gt;if&lt;/code&gt; or &lt;code class="docutils literal"&gt;while&lt;/code&gt; loop. The opposite of &lt;em&gt;falsy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;type&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Each specific category of program data, defined by a set of possible values and operations on them. Some Python types are close to machine data types (e.g., &lt;code class="docutils literal"&gt;float&lt;/code&gt; and &lt;code class="docutils literal"&gt;bytes&lt;/code&gt;) while others are extensions (e.g., &lt;code class="docutils literal"&gt;int&lt;/code&gt; is not limited to CPU word size, &lt;code class="docutils literal"&gt;str&lt;/code&gt; holds multibyte Unicode data points) and very high-level abstractions (e.g., &lt;code class="docutils literal"&gt;dict&lt;/code&gt;, &lt;code class="docutils literal"&gt;deque&lt;/code&gt;, etc.). Types may be user defined or built into the interpreter (a “built-in” type). Before the watershed type/class unification in Python 2.2, types and classes were different entities, and user-defined classes could not extend built-in types. Since then, built-in types and new-style classes became compatible, and a class is an instance of &lt;code class="docutils literal"&gt;type&lt;/code&gt;. In Python 3 all classes are new-style classes. See &lt;em&gt;class&lt;/em&gt; and &lt;em&gt;metaclass&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;unbound method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An instance method accessed directly on a class is not bound to an instance; therefore it's said to be an “unbound method.” To succeed, a call to an unbound method must explicitly pass an instance of the class as the first argument. That instance will be assigned to the &lt;code class="docutils literal"&gt;self&lt;/code&gt; argument in the method. See &lt;em&gt;bound method&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;uniform access principle&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Bertrand Meyer, creator of the Eiffel Language, wrote: “All services offered by a module should be available through a uniform notation, which does not betray whether they are implemented through storage or through computation.” Properties and descriptors allow the implementation of the uniform access principle in Python. The lack of a &lt;code class="docutils literal"&gt;new&lt;/code&gt; operator, making function calls and object instantiation look the same, is another form of this principle: the caller does not need to know whether the invoked object is a class, a function, or any other callable.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;user-defined&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Almost always in the Python docs the word &lt;em&gt;user&lt;/em&gt; refers to you and I—programmers who use the Python language—as opposed to the developers who implement a Python interpreter. So the term “user-defined class” means a class written in Python, as opposed to built-in classes written in C, like &lt;code class="docutils literal"&gt;str&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;view&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Python 3 views are special data structures returned by the &lt;code class="docutils literal"&gt;dict&lt;/code&gt; methods &lt;code class="docutils literal"&gt;.keys()&lt;/code&gt;, &lt;code class="docutils literal"&gt;.values()&lt;/code&gt;, and &lt;code class="docutils literal"&gt;.items()&lt;/code&gt;, providing a dynamic view into the &lt;code class="docutils literal"&gt;dict&lt;/code&gt; keys and values without data duplication, which occurs in Python 2 where those methods return lists. All &lt;code class="docutils literal"&gt;dict&lt;/code&gt; views are iterable and support the &lt;code class="docutils literal"&gt;in&lt;/code&gt; operator. In addition, if the items referenced by the view are all hashable, then the view also implements the &lt;code class="docutils literal"&gt;collections.abc.Set&lt;/code&gt; interface. This is the case for all views returned by the &lt;code class="docutils literal"&gt;.keys()&lt;/code&gt; method, and for views returned by &lt;code class="docutils literal"&gt;.items()&lt;/code&gt; when the values are also hashable.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;virtual subclass&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class that does not inherit from a superclass but is registered using &lt;code class="docutils literal"&gt;TheSuperClass.register(TheSubClass)&lt;/code&gt;. See documentation for &lt;code class="docutils literal"&gt;`abc.ABCMeta.register&lt;/code&gt; &amp;lt;&lt;a class="reference external" href="http://bit.ly/1DeDbKf"&gt;http://bit.ly/1DeDbKf&lt;/a&gt;&amp;gt;`__.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;wart&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A misfeature of the language. Andrew Kuchling's famous post “Python warts” has been acknowledged by the &lt;em&gt;BDFL&lt;/em&gt; as influential in the decision to break backward-compatibility in the design of Python 3, as most of the failings could not be fixed otherwise. Many of Kuchling's issues were fixed in Python 3.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;weak reference&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A special kind of object reference that does not increase the &lt;em&gt;referent&lt;/em&gt; object reference count. Weak references are created with one of the functions and data structures in the &lt;code class="docutils literal"&gt;weakref&lt;/code&gt; module.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;YAGNI&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;“You Ain't Gonna Need It,” a slogan to avoid implementing functionality that is not immediately necessary based on assumptions about future needs.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Zen of Python&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Type &lt;code class="docutils literal"&gt;import this&lt;/code&gt; into any Python console since version 2.2.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/#id10"&gt;Publish&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_0138b57960df40c39957869ee026f296-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt;pandoc --wrap&lt;span class="o"&gt;=&lt;/span&gt;none &lt;span class="m"&gt;00&lt;/span&gt;.preface.org -o ~/Public/nikola_post/posts/fluent-python.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://alinbxsorcerer.github.io/posts/flunt-python%20/</guid><pubDate>Wed, 01 Aug 2018 12:53:29 GMT</pubDate></item><item><title>Regex Summary</title><link>https://alinbxsorcerer.github.io/posts/regex-summary/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="section" id="wildcards"&gt;
&lt;h2&gt;Wildcards&lt;/h2&gt;
&lt;p&gt;总结基本符号
&lt;code class="docutils literal"&gt;shopt &lt;span class="pre"&gt;-s&lt;/span&gt; gotglob.&lt;/code&gt;
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;*?[^]{}&lt;/span&gt;&lt;/code&gt; 记住这5种基本符号便可.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm"&gt;http://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Standard Wildcards (globbing patterns)&lt;/p&gt;
&lt;p&gt;? (question mark)&lt;/p&gt;
&lt;p&gt;this can represent any single character. If you specified something at the command line like "hd?" GNU/Linux would look for hda, hdb, hdc and every other letter/number between a-z, 0-9.&lt;/p&gt;
&lt;p&gt;[ ] (square brackets)&lt;/p&gt;
&lt;p&gt;specifies a range. If you did m[a,o,u]m it can become: mam, mum, mom if you did: m[a-d]m it can become anything that starts and ends with m and has any character a to d inbetween. For example, these would work: mam, mbm, mcm, mdm. This kind of wildcard specifies an “or” relationship (you only need one to match).&lt;/p&gt;
&lt;p&gt;{ } (curly brackets)&lt;/p&gt;
&lt;p&gt;terms are separated by commas and each term must be the name of something or a wildcard. This wildcard will copy anything that matches either wildcard(s), or exact name(s) (an “or” relationship, one or the other).&lt;/p&gt;
&lt;p&gt;For example, this would be valid:&lt;/p&gt;
&lt;p&gt;cp {&lt;strong&gt;.doc,&lt;/strong&gt;.pdf} ~&lt;/p&gt;
&lt;p&gt;This will copy anything ending with .doc or .pdf to the users home directory. Note that spaces are not allowed after the commas (or anywhere else).
[^] or [!]&lt;/p&gt;
&lt;p&gt;This construct is similar to the [ ] construct, except rather than matching any characters inside the brackets, it'll match any character, as long as it is not listed between the [ and ]. This is a logical NOT. For example rm myfile[!9] will remove all myfiles* (ie. myfiles1, myfiles2 etc) but won't remove a file with the number 9 anywhere within it's name.&lt;/p&gt;
&lt;p&gt;\ (backslash)&lt;/p&gt;
&lt;p&gt;is used as an "escape" character, i.e. to protect a subsequent special character. Thus, "\” searches for a backslash. Note you may need to use quotation marks and backslash(es).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="regex-new-map"&gt;
&lt;h2&gt;Regex New Map&lt;/h2&gt;
&lt;p&gt;#+caption Metacharacters&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 20%"&gt;
&lt;col style="width: 20%"&gt;
&lt;col style="width: 20%"&gt;
&lt;col style="width: 20%"&gt;
&lt;col style="width: 20%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Categories&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Counter&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;dot and
classes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;^.[^]$ or&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;capture and
repetation&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;()&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;* {}, +, ?&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;or + ? only
in ERE&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;back-refere
nce&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;dl class="field-list simple"&gt;
&lt;dt&gt;raw-latex&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 53)&lt;/p&gt;
&lt;p&gt;Field list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;cite&gt;n&lt;/cite&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Sum:&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这个Meta-class最成功的一点是将 back-reference放在里面.&lt;/p&gt;
&lt;p&gt;#+Intermediate topics&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;capturing&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;a(bc), a(?:bc),
a(?&amp;lt;foo&amp;gt;bc)
(?P&amp;lt;name&amp;gt;) (?P=name)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;python的格式&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;bracket&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;[a-z]&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;greedy and lazy&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&amp;lt;.+?&amp;gt;, &amp;lt;[^&amp;lt;&amp;gt;]+&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;#+Advanced topics&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;back-reference                    | \1, \?&amp;lt;foo&amp;gt;&amp;lt;foo&amp;gt; k for keyword  |&lt;/div&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 74)&lt;/p&gt;
&lt;p&gt;Line block ends without a blank line.&lt;/p&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 50%"&gt;
&lt;col style="width: 50%"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;look-ahead&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;d(?=r) look r's ahead,
从r前面找d, followed&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;look-behind&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;(?&amp;lt;=r)d 从r的后面找d,
d小于r的意思, 在其后, proceeded,
按照习惯大于等于写在前面&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Negotive operator&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;d(?!r) (?&amp;lt;!r)d (大括号代表方向.)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(?=r)注意这里的指向与format的指向是相反的.&lt;/p&gt;
&lt;p&gt;注意这里的三个flags&lt;/p&gt;
&lt;p&gt;#+name old map&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 17%"&gt;
&lt;col style="width: 17%"&gt;
&lt;col style="width: 17%"&gt;
&lt;col style="width: 17%"&gt;
&lt;col style="width: 17%"&gt;
&lt;col style="width: 17%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Scope&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Individua
l&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Group&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Repetitio
n&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Flags&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Basic
Regex&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;wide-card
dot: .&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;^$&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;* + ?&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;re.A
ASCII
only&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;character
-class:[]&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;:raw-late
x:&lt;cite&gt;b&lt;/cite&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;re.M
Multiple-
line&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Negating:
^&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;re.S dot
matches
all&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Range:
rang&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;re.X
verbose&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Extensive&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;`, ()   |
不需要escape |&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;? +&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(?P&amp;lt;name&amp;gt;…)&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Context of reference
to group “quote”&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Ways to reference it&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;——————————————————-&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—————————————–&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;in the same pattern
itself&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`(?P=quote)` as
shown&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`1`&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;when processing match
object &lt;strong&gt;m&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`m.group('quote')`&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`m.end('quote') `
(etc.)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;in a string passed to
the &lt;strong&gt;repl&lt;/strong&gt; argument
of `re.sub()`&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`g&amp;lt;quote&amp;gt;`&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`g&amp;lt;1&amp;gt;`&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;\1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 需要注意的一点是, findall只返回匹配的group&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s1"&gt;'methods'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="s1"&gt;'search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'match'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'findall'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'finditer'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-3"&gt;&lt;/a&gt;                  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'split'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sub'&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="c1"&gt;#modify and replcae&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-4"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'match_object'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'group'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'groups'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'groupdict'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'end'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'span'&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-5"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Performing matches&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;findinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# module level functions&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#complilation Flags&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;DOTALL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;single&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;IGNORECASE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;MULTIPLELINE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#Modify strings&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-13"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="regex-in-python"&gt;
&lt;h2&gt;Regex in Python&lt;/h2&gt;
&lt;p&gt;CLOSED: [2019-06-01 Sat 14:10]&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;:LOGBOOK:&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://stackoverflow.com/a/48207102/7301792"&gt;python's regex summary in stackoverflow&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://stackoverflow.com/a/10060065/7301792"&gt;what does P mean in (?&amp;lt;name&amp;gt;)&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/22937618/reference-what-does-this-regex-mean/22944075#22944075"&gt;regex collections&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://docs.python.org/3/howto/regex.html#regex-howto"&gt;python regex how to&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;Besides&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;performance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;Using&lt;/span&gt; &lt;span class="sb"&gt;`compile`&lt;/span&gt; &lt;span class="n"&gt;helps&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;distinguish&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;concepts&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-4"&gt;&lt;/a&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-5"&gt;&lt;/a&gt;&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-6"&gt;&lt;/a&gt;&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;   &lt;span class="c1"&gt;#重要的是我总结的三个概念. 三个层级.&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;python的特殊之处是在named&lt;/span&gt; &lt;span class="n"&gt;group上的纠结&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="n"&gt;learning&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#regex object&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;regex_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'[a-zA-Z]+'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#match object&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;match_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regex_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1.Hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#matching content&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;match_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'[a-zA-Z]+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'1.Hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-22"&gt;&lt;/a&gt;&lt;span class="n"&gt;As&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;complement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;made&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exhaustive&lt;/span&gt; &lt;span class="n"&gt;cheatsheet&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="sb"&gt;`re`&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-23"&gt;&lt;/a&gt;    &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-24"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'brackets'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s1"&gt;'single_character'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'[]'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'negate'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="err"&gt;试图从少到多去解析&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-25"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'capturing_group'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'()'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'(?:)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'(?!)'&lt;/span&gt; &lt;span class="s1"&gt;'|'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'backreferences and named group'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-26"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'repetition'&lt;/span&gt;      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'{}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'+?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'??'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'greedy v.s. lazy ?'&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-27"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'lookaround'&lt;/span&gt; &lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s1"&gt;'lookahead'&lt;/span&gt;  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'(?=...)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'(?!...)'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-28"&gt;&lt;/a&gt;               &lt;span class="s1"&gt;'lookbehind'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'(?&amp;lt;=...)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'(?&amp;lt;!...)'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-29"&gt;&lt;/a&gt;               &lt;span class="s1"&gt;'caputuring'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'(?P&amp;lt;name&amp;gt;...)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'(?P=name)'&lt;/span&gt;&lt;span class="err"&gt;这是应用&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'(?:)'&lt;/span&gt;&lt;span class="p"&gt;],},&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-30"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'escapes'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s1"&gt;'anchor'&lt;/span&gt;         &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-31"&gt;&lt;/a&gt;              &lt;span class="s1"&gt;'non_printable'&lt;/span&gt;   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\v&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-32"&gt;&lt;/a&gt;              &lt;span class="s1"&gt;'shorthand'&lt;/span&gt;       &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'\d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'\w'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'\s'&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-33"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'methods'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="s1"&gt;'search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'match'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'findall'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'finditer'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-34"&gt;&lt;/a&gt;                  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'split'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sub'&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="c1"&gt;#modify and replcae&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-35"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'match_object'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'group'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'groups'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'groupdict'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'end'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'span'&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-36"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-37"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Performing matches&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-38"&gt;&lt;/a&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;findinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-39"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# module level functions&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-40"&gt;&lt;/a&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-41"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#complilation Flags&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-42"&gt;&lt;/a&gt;&lt;span class="n"&gt;DOTALL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;single&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;IGNORECASE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;MULTIPLELINE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-43"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#Modify strings&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-44"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-45"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#Search and Replace&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-46"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'section{ (?P&amp;lt;name&amp;gt; [^}]* ) }'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-47"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'subsection{\1}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-48"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'subsection{First}'&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-49"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'subsection{\g&amp;lt;1&amp;gt;}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-50"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'subsection{First}'&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-51"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'subsection{\g&amp;lt;name&amp;gt;}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-52"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'subsection{First}'&lt;/span&gt; &lt;span class="c1"&gt;#三种不同的形式.&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'section{ (?P&amp;lt;name&amp;gt; [^}]* ) }'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;res2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;res3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finditer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"He was carefully disguised but captured quickly by police."&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finditer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\w+ly"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%02d&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%02d&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 这里关键的一点, 在sub中用的是Search&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="grep-examples"&gt;
&lt;h2&gt;Grep examples&lt;/h2&gt;
&lt;div class="section" id="remove-the-blank-lines"&gt;
&lt;h3&gt;Remove the blank lines&lt;/h3&gt;
&lt;pre class="code zsh"&gt;&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-1"&gt;&lt;/a&gt;Remove the blank lines.
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-2"&gt;&lt;/a&gt;$ grep . 2daygeek.txt
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-3"&gt;&lt;/a&gt;or
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-4"&gt;&lt;/a&gt;$ grep -Ev &lt;span class="s2"&gt;"^&lt;/span&gt;$&lt;span class="s2"&gt;"&lt;/span&gt; 2daygeek.txt
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-5"&gt;&lt;/a&gt;or
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-6"&gt;&lt;/a&gt;$ grep -v -e &lt;span class="s1"&gt;'^$'&lt;/span&gt; 2daygeek.txt
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-7"&gt;&lt;/a&gt;2daygeek.com is a best Linux blog to learn Linux.
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-8"&gt;&lt;/a&gt;It&lt;span class="s1"&gt;'s FIVE years old blog.&lt;/span&gt;
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-9"&gt;&lt;/a&gt;&lt;span class="s1"&gt;This website is maintained by Magesh M, it'&lt;/span&gt;s licensed under CC BY-NC &lt;span class="m"&gt;4&lt;/span&gt;.0.
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-10"&gt;&lt;/a&gt;He got two GIRL babes.
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-11"&gt;&lt;/a&gt;Her names are Tanisha &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; Renusha.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="remove-lines-containing-logging"&gt;
&lt;h3&gt;Remove lines containing logging&lt;/h3&gt;
&lt;p&gt;[bash - Remove lines which contain 'logging' - Ask Ubuntu](&lt;a class="reference external" href="https://askubuntu.com/questions/1127589/remove-lines-which-contain-logging?noredirect=1#comment1866586_1127589"&gt;https://askubuntu.com/questions/1127589/remove-lines-which-contain-logging?noredirect=1#comment1866586_1127589&lt;/a&gt;)&lt;/p&gt;
&lt;pre class="literal-block"&gt;grep -v logging twoSum.py &amp;gt; logging-new
sed "/^\t$name/d" in-file
sed -i '/adf\.ly/d' inputfile&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sed"&gt;
&lt;h2&gt;Sed&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="remove-the-blank-lines-1"&gt;&lt;/span&gt;&lt;h3&gt;Remove the blank lines&lt;/h3&gt;
&lt;p&gt;$ sed '/^$/d' 2daygeek.txt&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="emacs-regular-expression-syntax"&gt;
&lt;h2&gt;Emacs Regular Expression Syntax&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Here is the syntax used by Emacs for regular expressions. Any character matches itself, except for the list below.&lt;/div&gt;
&lt;div class="line"&gt;The following characters are special : . * + ? ^ $ \ [&lt;/div&gt;
&lt;div class="line"&gt;Between brackets [], the following are special : ] - ^&lt;/div&gt;
&lt;div class="line"&gt;Many characters are special when they follow a backslash – see below.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;.&lt;/span&gt;        &lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;but&lt;/span&gt; &lt;span class="nv"&gt;newline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-2"&gt;&lt;/a&gt;&lt;span class="nf"&gt;*&lt;/span&gt;        &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;more&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-3"&gt;&lt;/a&gt;&lt;span class="nf"&gt;+&lt;/span&gt;        &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;more&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-4"&gt;&lt;/a&gt;&lt;span class="sc"&gt;? &lt;/span&gt;       &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;^&lt;/span&gt;        &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-6"&gt;&lt;/a&gt;&lt;span class="nv"&gt;$&lt;/span&gt;        &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;between&lt;/span&gt; &lt;span class="nv"&gt;brackets&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;^..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;brackets&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;a-z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;between&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;z&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-10"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\ &lt;/span&gt;       &lt;span class="nv"&gt;prevents&lt;/span&gt; &lt;span class="nv"&gt;interpretation&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;following&lt;/span&gt; &lt;span class="nv"&gt;special&lt;/span&gt; &lt;span class="nv"&gt;char&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-11"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\|&lt;/span&gt;       &lt;span class="k"&gt;or&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-12"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\w&lt;/span&gt;       &lt;span class="nv"&gt;word&lt;/span&gt; &lt;span class="nv"&gt;constituent&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-13"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\b&lt;/span&gt;       &lt;span class="nv"&gt;word&lt;/span&gt; &lt;span class="nv"&gt;boundary&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-14"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\sc&lt;/span&gt;      &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="nv"&gt;syntax&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;e.g.&lt;/span&gt; &lt;span class="nv"&gt;\s-&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;whitespace&lt;/span&gt; &lt;span class="nv"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-15"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\(&lt;/span&gt; &lt;span class="nv"&gt;\)&lt;/span&gt;    &lt;span class="nv"&gt;start/end&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;group&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-16"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\&amp;amp;lt&lt;/span&gt;&lt;span class="c1"&gt;; \&amp;amp;gt;    start/end of word (faulty rendering: backslash + less-than and backslash + greater-than)&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-17"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\_&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;\_&amp;gt;&lt;/span&gt;  &lt;span class="nv"&gt;start/end&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;symbol&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-18"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\`&lt;/span&gt; &lt;span class="nv"&gt;\'&lt;/span&gt;    &lt;span class="nv"&gt;start/end&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;buffer/string&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-19"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\1&lt;/span&gt;       &lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;matched&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="nv"&gt;group&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-20"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\n&lt;/span&gt;       &lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;matched&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nf"&gt;nth&lt;/span&gt; &lt;span class="nv"&gt;group&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-21"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\{3\}&lt;/span&gt;    &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;times&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-22"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\{3,\}&lt;/span&gt;   &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;more&lt;/span&gt; &lt;span class="nv"&gt;times&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-23"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\{3,6\}&lt;/span&gt;  &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="nv"&gt;times&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-24"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\=&lt;/span&gt;       &lt;span class="nv"&gt;match&lt;/span&gt; &lt;span class="nv"&gt;succeeds&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;located&lt;/span&gt; &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nf"&gt;point&lt;/span&gt;
&lt;/pre&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;*?, +?, and ?? are non-greedy versions of *, +, and ? – see NonGreedyRegexp. Also, W, &lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id2"&gt;&lt;span class="problematic" id="id3"&gt;:raw-latex:`\B`&lt;/span&gt;&lt;/a&gt;, and ⪼ match any character that does not match &lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id4"&gt;&lt;span class="problematic" id="id5"&gt;:raw-latex:`\w`&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id6"&gt;&lt;span class="problematic" id="id7"&gt;:raw-latex:`\b`&lt;/span&gt;&lt;/a&gt;, and ≻.&lt;/div&gt;
&lt;div class="line"&gt;Characters are organized by category. Use C-u C-x = to display the category of the character under the cursor.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 315); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role "raw-latex".&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id4"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 315); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role "raw-latex".&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id6"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 315); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id7"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role "raw-latex".&lt;/p&gt;
&lt;/div&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_a836327345eb4b4aaecf1054a927d29f-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\ca&lt;/span&gt;      &lt;span class="nv"&gt;ascii&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_a836327345eb4b4aaecf1054a927d29f-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\Ca&lt;/span&gt;      &lt;span class="nv"&gt;non-ascii&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;newline&lt;/span&gt; &lt;span class="nv"&gt;included&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a836327345eb4b4aaecf1054a927d29f-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\cl&lt;/span&gt;      &lt;span class="nv"&gt;latin&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_a836327345eb4b4aaecf1054a927d29f-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\cg&lt;/span&gt;      &lt;span class="nv"&gt;greek&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Here are some syntax classes, also known as character classes, that can be used between brackets, e.g. [[:upper:]|[:digit:].].&lt;/p&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:digit:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;digit,&lt;/span&gt; &lt;span class="nv"&gt;same&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;0-9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:alpha:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;letter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;alphabetic&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:alnum:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;letter&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;digit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;alphanumeric&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:upper:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;letter&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;uppercase&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:lower:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;letter&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;lowercase&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:graph:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;visible&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:print:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;visible&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;plus&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;space&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:space:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;whitespace&lt;/span&gt; &lt;span class="nv"&gt;character,&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;syntax&lt;/span&gt; &lt;span class="nv"&gt;table,&lt;/span&gt; &lt;span class="nv"&gt;but&lt;/span&gt; &lt;span class="nv"&gt;typically&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;\t\r\n\v\f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;which&lt;/span&gt; &lt;span class="nv"&gt;includes&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;newline&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:blank:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;space&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;tab&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:xdigit:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;hexadecimal&lt;/span&gt; &lt;span class="nv"&gt;digit&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:cntrl:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:ascii:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;ascii&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Syntax classes:&lt;/p&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s-&lt;/span&gt;   &lt;span class="nv"&gt;whitespace&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;        &lt;span class="nv"&gt;\s/&lt;/span&gt;   &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;quote&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\sw&lt;/span&gt;   &lt;span class="nv"&gt;word&lt;/span&gt; &lt;span class="nv"&gt;constituent&lt;/span&gt;            &lt;span class="nv"&gt;\s$&lt;/span&gt;   &lt;span class="nv"&gt;paired&lt;/span&gt; &lt;span class="nv"&gt;delimiter&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s_&lt;/span&gt;   &lt;span class="nv"&gt;symbol&lt;/span&gt; &lt;span class="nv"&gt;constituent&lt;/span&gt;          &lt;span class="nv"&gt;\s&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;   &lt;span class="nv"&gt;expression&lt;/span&gt; &lt;span class="nv"&gt;prefix&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s.&lt;/span&gt;   &lt;span class="nv"&gt;punctuation&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;       &lt;span class="nv"&gt;\s&amp;lt;&lt;/span&gt;   &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="nv"&gt;starter&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;   &lt;span class="nv"&gt;open&lt;/span&gt; &lt;span class="nv"&gt;delimiter&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;    &lt;span class="nv"&gt;\s&amp;gt;&lt;/span&gt;   &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="nv"&gt;ender&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-6"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="nv"&gt;close&lt;/span&gt; &lt;span class="nv"&gt;delimiter&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;   &lt;span class="nv"&gt;\s!&lt;/span&gt;   &lt;span class="nv"&gt;generic&lt;/span&gt; &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="nv"&gt;delimiter&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-7"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s&lt;/span&gt;&lt;span class="s"&gt;"   string quote character      \s|   generic string delimiter&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-8"&gt;&lt;/a&gt;&lt;span class="s"&gt;\s\   escape character&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h2&gt;Publish&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_7ea969aae62d43d996ddb89b78e7dbc2-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; ls ~/Public/nikola_post/posts
&lt;a name="rest_code_7ea969aae62d43d996ddb89b78e7dbc2-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; pwd
&lt;a name="rest_code_7ea969aae62d43d996ddb89b78e7dbc2-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; pandoc --wrap&lt;span class="o"&gt;=&lt;/span&gt;preserve regex-offprint.org  -o ~/Public/nikola_post/posts/Regex-Summary.rst
&lt;/pre&gt;&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 364)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "commonlisp"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: commonlisp

   (print (replace-regexp "war" "negotiation" "trade war")))
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;nil&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>emacs</category><category>python</category><category>regex</category><guid>https://alinbxsorcerer.github.io/posts/regex-summary/</guid><pubDate>Tue, 28 Nov 2017 12:53:29 GMT</pubDate></item></channel></rss>