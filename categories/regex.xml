<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>A Magic Land Declared by David (Posts about regex)</title><link>https://alinbxsorcerer.github.io/</link><description></description><atom:link href="https://alinbxsorcerer.github.io/categories/regex.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:davad.fhl.wang@foxmail.com"&gt;David&lt;/a&gt; </copyright><lastBuildDate>Thu, 14 Nov 2019 05:05:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Re.sub参数顺序的问题</title><link>https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id1" id="id4"&gt;提出问题&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id2" id="id5"&gt;分析问题&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id3" id="id6"&gt;总结:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id4"&gt;提出问题&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在写 &lt;code class="docutils literal"&gt;re.sub&lt;/code&gt; 或者 &lt;code class="docutils literal"&gt;re.subn&lt;/code&gt; 的时候, 常常会不太确定引用参数的顺序,
需要中断的时间查看提示或者help文档. 比如  &lt;code class="docutils literal"&gt;trade war&lt;/code&gt;
修改为 &lt;code class="docutils literal"&gt;trade negotiation&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"war"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"negotiation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"trade war"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'trade negotiation'&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#首先处理regex-pattern&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id5"&gt;分析问题&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与 &lt;code class="docutils literal"&gt;string.methods&lt;/code&gt; 比较. &lt;code class="docutils literal"&gt;pattern&lt;/code&gt;
是与source(input&lt;sub&gt;string&lt;/sub&gt;)的匹配的内容,
repl是修改后的内容(destination), 这里顺序与=str.replace=是一致.&lt;/p&gt;
&lt;pre class="literal-block"&gt;replace(self, old, new, count=-1, /)&lt;/pre&gt;
&lt;p&gt;old 来自source, new是输出到destination结果中.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d8b4edb0986e4cb1b43d6f9d5b71acf5-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s2"&gt;"trade war"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"war"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"negotiation"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d8b4edb0986e4cb1b43d6f9d5b71acf5-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'trade negotiation'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;sed&lt;/code&gt; 也遵循同样的模式.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-1"&gt;&lt;/a&gt;s/regexp/replacement/
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-2"&gt;&lt;/a&gt;       Attempt  to  match  regexp  against  the  pattern  space.   If successful, replace that portion matched with
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-3"&gt;&lt;/a&gt;       replacement.  The replacement may contain the special character &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; to refer to that portion  of  the  pattern
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-4"&gt;&lt;/a&gt;       space  which  matched,  and  the  special  escapes &lt;span class="se"&gt;\1&lt;/span&gt; through &lt;span class="se"&gt;\9&lt;/span&gt; to refer to the corresponding matching sub-
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-5"&gt;&lt;/a&gt;       expressions in the regexp.
&lt;/pre&gt;&lt;p&gt;regex-pattern匹配 source 数据中的内容,
replacement则是替换后输出到destination结果中.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_5b9b3e0d70ba433f81740d71a242d342-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'trade war'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;"s/war/negotiation/g"&lt;/span&gt;
&lt;a name="rest_code_5b9b3e0d70ba433f81740d71a242d342-2"&gt;&lt;/a&gt;trade negotiation
&lt;/pre&gt;&lt;p&gt;其他的Text Processing&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"trade-war"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s2"&gt;"-"&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-2"&gt;&lt;/a&gt;trade
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-3"&gt;&lt;/a&gt;war
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-4"&gt;&lt;/a&gt;   tr &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... SET1 &lt;span class="o"&gt;[&lt;/span&gt;SET2&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;SET1 is from the source, SET2 is the result of the destination after
been processed.&lt;/p&gt;
&lt;p&gt;总结这种模式和思维惯例:&lt;/p&gt;
&lt;pre class="literal-block"&gt;function source destination&lt;/pre&gt;
&lt;p&gt;Text Processing如此,&lt;/p&gt;
&lt;p&gt;File Handling的utilities遵循同样的模式.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-1"&gt;&lt;/a&gt;mv &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... SOURCE... DIRECTORY
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-2"&gt;&lt;/a&gt;cp &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... &lt;span class="o"&gt;[&lt;/span&gt;-T&lt;span class="o"&gt;]&lt;/span&gt; SOURCE DEST
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-3"&gt;&lt;/a&gt;ln &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... Source... DIRECTORY
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-4"&gt;&lt;/a&gt;rsync &lt;span class="o"&gt;[&lt;/span&gt;OPTION...&lt;span class="o"&gt;]&lt;/span&gt; SRC... &lt;span class="o"&gt;[&lt;/span&gt;DEST&lt;span class="o"&gt;]&lt;/span&gt;
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-5"&gt;&lt;/a&gt;scp  SRC... DEST
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-6"&gt;&lt;/a&gt;dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/&lt;span class="o"&gt;{{&lt;/span&gt;source_drive&lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/&lt;span class="o"&gt;{{&lt;/span&gt;dest_drive&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;例外的情况是tar. =tar=是将目标放在前面.&lt;/p&gt;
&lt;p&gt;再回头看 &lt;code class="docutils literal"&gt;re.sub&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#扩展后&lt;/span&gt;
&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern_from_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replacement_to_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;三个参数中 &lt;code class="docutils literal"&gt;pattern_from_source&lt;/code&gt;, &lt;code class="docutils literal"&gt;replacement_to_result&lt;/code&gt; ,
&lt;code class="docutils literal"&gt;source_data&lt;/code&gt;
的最后一个是=source&lt;sub&gt;data&lt;/sub&gt;&lt;code class="docutils literal"&gt;, 将source放置在最后. =grep&lt;/code&gt; 与
=sed=都遵循同样的模式&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c56fdbba928b444dbc4aca82ff26de98-1"&gt;&lt;/a&gt;sed &lt;span class="s1"&gt;'s/{{regex}}/{{replace}}/'&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt;filename&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;a name="rest_code_c56fdbba928b444dbc4aca82ff26de98-2"&gt;&lt;/a&gt;grep &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt; -e PATTERN ... &lt;span class="o"&gt;[&lt;/span&gt;FILE...&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#grep regex source&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;例外的情况是=find=&lt;/p&gt;
&lt;pre class="literal-block"&gt;find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]
find [Option] source pattern&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id6"&gt;总结:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Data Stream Processing和File Handling遵循 &lt;code class="docutils literal"&gt;subroutine src dst&lt;/code&gt;
模式.两个例外的情况是=tar and find=&lt;/p&gt;
&lt;p&gt;这个问题之所以值得探讨,是因为涉及底层的方法论和工作模式.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>python</category><category>regex</category><guid>https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/</guid><pubDate>Wed, 08 May 2019 09:17:55 GMT</pubDate></item></channel></rss>