<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>A Magic Land Declared by David (Posts about programming)</title><link>https://alinbxsorcerer.github.io/</link><description></description><atom:link href="https://alinbxsorcerer.github.io/categories/cat_programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:davad.fhl.wang@foxmail.com"&gt;David&lt;/a&gt; </copyright><lastBuildDate>Thu, 21 Nov 2019 02:06:48 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>淘宝双十一的销售额造假了吗? 用本福特定律检验</title><link>https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id1" id="id4"&gt;0.引言&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id2" id="id5"&gt;1.构建本福特柱状图&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id3" id="id6"&gt;2.构建历年销售额的柱状图&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#qualitive-analysis-take-a-view-by-setting-them-side-by-side" id="id7"&gt;3.Qualitive Analysis: Take a view by setting them side by side&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#quantitative-analysis" id="id8"&gt;4.Quantitative Analysis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#publish" id="id9"&gt;5.Publish&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id4"&gt;0.引言&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;看过李永乐老师的视频 &lt;a class="reference external" href="https://www.youtube.com/watch?v=CCo4k9Ax7cM&amp;amp;t=7s"&gt;淘宝“双11”2684亿销售额造假了吗？用本福特定律检验一下&lt;/a&gt;, 用本福特定律检验下:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id5"&gt;1.构建本福特柱状图&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-13"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.18&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-16"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-17"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="/images/PogAvJ.png" src="https://alinbxsorcerer.github.io/images/PogAvJ.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id6"&gt;2.构建历年销售额的柱状图&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# data, unit: ten million RMB&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;sales_by_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"2009"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-3"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2010"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"93.6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-4"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2011"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"520"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-5"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2012"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"1910"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-6"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2013"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"3500"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-7"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2014"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"5710"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-8"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2015"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"9120"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-9"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2016"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"12070"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-10"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2018"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"21350"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-11"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2019"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"26840"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-14"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sales_by_year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-21"&gt;&lt;/a&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-23"&gt;&lt;/a&gt;&lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-25"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-26"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-28"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.18&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-29"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-30"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="/images/QtppzN.png" src="https://alinbxsorcerer.github.io/images/QtppzN.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="qualitive-analysis-take-a-view-by-setting-them-side-by-side"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id7"&gt;3.Qualitive Analysis: Take a view by setting them side by side&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.18&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# create benford bar graph&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-16"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-18"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-19"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-20"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="/images/p1Nqxa.png" src="https://alinbxsorcerer.github.io/images/p1Nqxa.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="quantitative-analysis"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id8"&gt;4.Quantitative Analysis&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;从图表上直观看, 匹配度不高, 那么匹配的具体数值是多少呢?&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;benford_seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chisquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;benford_seq&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Power_divergenceResult(statistic=14.508778904402215, pvalue=0.06943079701067742)&lt;/p&gt;
&lt;p&gt;匹配度为6.94%.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id9"&gt;5.Publish&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_962eda3f0c1f4e2e9a30fba68e16b5ac-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;a name="rest_code_962eda3f0c1f4e2e9a30fba68e16b5ac-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pandoc --wrap=none benford_law.org -o ~/Public/nikola_post/posts/淘宝销售额造假了吗.rst"&lt;/span&gt;
&lt;a name="rest_code_962eda3f0c1f4e2e9a30fba68e16b5ac-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_0e6f0b5b1b4246cbaeeef5e2e3a88db3-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;  ~/Documents/OrgMode/ORG/images
&lt;a name="rest_code_0e6f0b5b1b4246cbaeeef5e2e3a88db3-2"&gt;&lt;/a&gt;ls -t  &lt;span class="p"&gt;|&lt;/span&gt; head -n &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; line&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; cp &lt;span class="nv"&gt;$line&lt;/span&gt;     ~/Public/nikola_post/images/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>benford</category><category>matplotlib</category><category>numpy</category><category>python</category><guid>https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/</guid><pubDate>Wed, 20 Nov 2019 12:53:29 GMT</pubDate></item><item><title>Emacs中的datetime与clock</title><link>https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id1" id="id3"&gt;前文概要:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#emacs" id="id4"&gt;Emacs中的时间格式与任务的时间属性&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#datetime" id="id5"&gt;Datetime时间戳与任务的时间属性&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#clock" id="id6"&gt;Clock计时与中断处理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id2" id="id7"&gt;总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id3"&gt;前文概要:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;时间管理的三件工具 (clock, datetime, calendar)
时间变量的顺序与时间表示的格式 (%a %b-d %H:%M %Y)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="emacs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id4"&gt;Emacs中的时间格式与任务的时间属性&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;时间管理的三件工具: 钟表, 日历, 以及二者结合的便利工具datetime.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://orgmode.org/manual/Dates-and-Times.html#Dates-and-Times"&gt;The Org Manual: Dates and
Times&lt;/a&gt;主要应用datetime和clock两个工具管理时间.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;时间戳的格式 （Datetime)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;datetime格式 &amp;lt;2019-05-18 sat 09:52&amp;gt; C-u C-c . 6个时间变量 %Y-%m-%d
%a %H:%M&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;date格式 &amp;lt;2019-05-18 sat&amp;gt; C-c . 4个时间变量&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="datetime"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id5"&gt;Datetime时间戳与任务的时间属性&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;时间(戳)到底什么? 时间戳从概念上辨析为两个类别 1) appointment 2)
schedule. 可以将主动安排的时间理解为schedule,
被动参与的时间为appointment&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事件(任务)的四个时间属性&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Repeater 三种repeater,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;standard 时间戳后面 +1w day, week, month, year&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;过期后只需要补上一次, ++1w(比如每周给父母打电话)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以档次完成时间为下一个interval的开始点,比如3个周理一次发. 理发
.+3w; 任何时间点上理完发,自动从该时间点上启动下一轮repeat.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time Span 会议的时间 &amp;lt;2019-05-18 sat 10:04&amp;gt;–&amp;lt;2019-05-18 sat 10:05&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scheduled 任务的开始时间, SCHEDULED: &amp;lt;2019-05-18 sat&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deadline 任务的截止时间 DEADLINE: &amp;lt;2019-05-18 sat&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任务的监控与跟踪 Check&lt;/p&gt;
&lt;p&gt;整合管理deadline与schedule.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-check-deadlines&lt;/span&gt;&lt;/code&gt;, C-7 C-c / d
#7天内将要截止的任务.变量org-deadline-warning-days&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-check-before-date&lt;/span&gt;&lt;/code&gt;, given-date前的schedule and appointments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-check-after-date&lt;/span&gt;&lt;/code&gt;, given-date后的schedule and appointments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(这些功能并不好用)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clock"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id6"&gt;Clock计时与中断处理&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;基本计时功能, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-clock-in&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-clock-out&lt;/span&gt;&lt;/code&gt; 可以手动修改计时,
然后调用=org-evaluate-time-range=或者=update-maybe=&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任务的第五个属性, efforts 总结任务的5个属性, 1)schedule 2)deadline
3)repeater 4)time span 5)预测的time span(efforts).
efforts是核心参数,逐步提高对时间和任务的掌控.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Resolve idle time and continuous clocking
中断计时的问题,=调出来org-resolve-clocks=重新设置.k(keep),
s(substract),只用keep便可.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id7"&gt;总结&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;计时与计算&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任务的5个时间属性&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;idle中断计时的处理.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>time</category><guid>https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/</guid><pubDate>Sat, 18 May 2019 12:35:15 GMT</pubDate></item><item><title>评注Eamcs: 31.The Calendar and the Diary</title><link>https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id1" id="id8"&gt;总结:&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#movement-in-the-calendar" id="id9"&gt;31.1 Movement in the Calendar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#motion-by-standard-lengths-of-time" id="id10"&gt;31.1.1 Motion by Standard Lengths of Time&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#beginning-or-end-of-week-month-or-year" id="id11"&gt;31.1.2 Beginning or End of Week, Month or Year&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#specified-dates" id="id12"&gt;31.1.3 Specified Dates&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#scrolling-in-the-calendar" id="id13"&gt;31.2 Scrolling in the Calendar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#counting-days" id="id14"&gt;31.3 Counting Days&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#miscellaneous-calendar-commands" id="id15"&gt;31.4 Miscellaneous Calendar Commands&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#writing-calendar-files" id="id16"&gt;31.5 Writing Calendar Files&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#holidays" id="id17"&gt;31.6 Holidays&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#times-of-sunrise-and-sunset" id="id18"&gt;31.7 Times of Sunrise and Sunset&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#phases-of-the-moon" id="id19"&gt;31.8 Phases of the Moon&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#conversion-to-and-from-other-calendars" id="id20"&gt;31.9 Conversion To and From Other Calendars&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#supported-calendar-systems" id="id21"&gt;31.9.1 Supported Calendar Systems&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#converting-to-other-calendars" id="id22"&gt;31.9.2 Converting To Other Calendars&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#converting-from-other-calendars" id="id23"&gt;31.9.3 Converting From Other Calendars&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#the-diary" id="id24"&gt;31.10 The Diary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#the-diary-file" id="id25"&gt;31.10.1 The Diary File&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#displaying-the-diary" id="id26"&gt;31.10.2 Displaying the Diary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#date-formats" id="id27"&gt;31.10.3 Date Formats&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#commands-to-add-to-the-diary" id="id28"&gt;31.10.4 Commands to Add to the Diary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#special-diary-entries" id="id29"&gt;31.10.5 Special Diary Entries&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#appointments" id="id30"&gt;31.10.6 Appointments&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#importing-and-exporting-diary-entries" id="id31"&gt;31.10.7 Importing and Exporting Diary Entries&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#daylight-saving-time" id="id32"&gt;31.11 Daylight Saving Time&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#summing-time-intervals" id="id33"&gt;31.12 Summing Time Intervals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#more-advanced-features-of-the-calendar-and-diary" id="id34"&gt;31.13 More advanced features of the Calendar and Diary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#customizing-the-calendar" id="id35"&gt;31.13.1 Customizing the Calendar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#customizing-the-holidays" id="id36"&gt;31.13.2 Customizing the Holidays&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#converting-from-the-mayan-calendar" id="id37"&gt;31.13.3 Converting from the Mayan Calendar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#date-display-format" id="id38"&gt;31.13.4 Date Display Format&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#time-display-format" id="id39"&gt;31.13.5 Time Display Format&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#customizing-the-diary" id="id40"&gt;31.13.6 Customizing the Diary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#diary-entries-using-non-gregorian-calendars" id="id41"&gt;31.13.7 Diary Entries Using non-Gregorian Calendars&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#diary-display" id="id42"&gt;31.13.8 Diary Display&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#fancy-diary-display" id="id43"&gt;31.13.9 Fancy Diary Display&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#sexp-entries-and-the-fancy-diary-display" id="id44"&gt;31.13.10 Sexp Entries and the Fancy Diary Display&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id8"&gt;总结:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;三个部分:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;基本的操作&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;与社会的互动, holidays and calendars&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;与天地四时的互动, sunrise-sunset 因此需要再加上两个时间点, sunrise and sunset&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="/images/emacs-calendars-structure.jpeg" src="https://alinbxsorcerer.github.io/images/emacs-calendars-structure.jpeg" style="width: 700px;"&gt;
&lt;p&gt;Emacs provides the functions of a desk calendar, with a diary of planned
or past events. It also has facilities for managing your appointments,
and keeping track of how much time you spend working on certain
projects.&lt;/p&gt;
&lt;p&gt;To enter the calendar, type M-x calendar. This displays a three-month
calendar centered on the current month, with point on the current date.
With a numeric argument, as in C-u M-x calendar, it prompts you for the
month and year to be the center of the three-month calendar. The
calendar uses its own buffer, whose major mode is Calendar mode.&lt;/p&gt;
&lt;p&gt;mouse-3 in the calendar brings up a menu of operations on a particular
date; mouse-2 brings up a menu of commonly used calendar features that
are independent of any particular date. To exit the calendar, type q.&lt;/p&gt;
&lt;p&gt;我想要一个类似在桌面操作系统中, 可以操作任务的日历.&lt;/p&gt;
&lt;div class="section" id="movement-in-the-calendar"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id9"&gt;31.1 Movement in the Calendar&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Calendar mode provides commands to move through the calendar
&lt;code class="docutils literal"&gt;in logical units&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;of time such as days, weeks, months, and years. If you move outside the
three months originally displayed, the calendar display scrolls
automatically through time to make the selected date visible. Moving to
a date lets you view its holidays or diary entries, or convert it to
other calendars; moving by long time periods is also useful simply to
scroll the calendar.&lt;/p&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_07092f5b9649463c99a4145dd8899245-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;;修改calendar-week-start-day&lt;/span&gt;
&lt;a name="rest_code_07092f5b9649463c99a4145dd8899245-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;calendar-week-start-day&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;对movement的总结, span, 按照四个logical unit, day, week, month, year&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;backwords and forwards with specified lenghts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;selector, begin and end&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;specified dates&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="motion-by-standard-lengths-of-time"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id10"&gt;31.1.1 Motion by Standard Lengths of Time&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The commands for movement in the calendar buffer parallel the commands
for movement in text. You can move forward and backward by days, weeks,
months, and years.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C-f&lt;/p&gt;
&lt;p&gt;Move point one day forward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-forward-day&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-b&lt;/p&gt;
&lt;p&gt;Move point one day backward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-backward-day&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-n&lt;/p&gt;
&lt;p&gt;Move point one week forward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-forward-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-p&lt;/p&gt;
&lt;p&gt;Move point one week backward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-backward-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-}
Move point one month forward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-forward-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-{&lt;/p&gt;
&lt;p&gt;Move point one month backward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-backward-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in logical unit- C-x ]&lt;/p&gt;
&lt;p&gt;Move point one year forward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-forward-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C-x [&lt;/p&gt;
&lt;p&gt;Move point one year backward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-backward-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The day and week commands are natural analogues of the usual Emacs
commands for moving by characters and by lines. Just as C-n usually
moves to the same column in the following line, in Calendar mode it
moves to the same day in the following week. And C-p moves to the same
day in the previous week.&lt;/p&gt;
&lt;p&gt;The arrow keys are equivalent to C-f, C-b, C-n and C-p, just as they
normally are in other modes.&lt;/p&gt;
&lt;p&gt;The commands for motion by months and years work like those for weeks,
but move a larger distance. The month commands M-} and M-{ move forward
or backward by an entire month. The year commands C-x ] and C-x [ move
forward or backward a whole year.&lt;/p&gt;
&lt;p&gt;The easiest way to remember these commands is to consider months and
years analogous to paragraphs and pages of text, respectively. But the
calendar movement commands themselves do not quite parallel those for
movement through text: the ordinary Emacs paragraph commands move to the
beginning or end of a paragraph, whereas these month and year commands
move by an entire month or an entire year, keeping the same date within
the month or year.&lt;/p&gt;
&lt;p&gt;All these commands accept a numeric argument as a repeat count. For
convenience, the digit keys and the minus sign specify numeric arguments
in Calendar mode even without the Meta modifier. For example, 100 C-f
moves point 100 days forward from its present location.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="beginning-or-end-of-week-month-or-year"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id11"&gt;31.1.2 Beginning or End of Week, Month or Year&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A week (or month, or year) is not just a quantity of days; we think of
weeks (months, years) as starting on particular dates. So Calendar mode
provides commands to move to the start or end of a week, month or year:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C-a&lt;/p&gt;
&lt;p&gt;Move point to start of week (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-beginning-of-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-e&lt;/p&gt;
&lt;p&gt;Move point to end of week (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-end-of-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-a&lt;/p&gt;
&lt;p&gt;Move point to start of month (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-beginning-of-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-e&lt;/p&gt;
&lt;p&gt;Move point to end of month (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-end-of-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-&amp;lt;&lt;/p&gt;
&lt;p&gt;Move point to start of year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-beginning-of-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-&amp;gt;&lt;/p&gt;
&lt;p&gt;Move point to end of year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-end-of-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These commands also take numeric arguments as repeat counts, with the
repeat count indicating how many weeks, months, or years to move
backward or forward.&lt;/p&gt;
&lt;p&gt;By default, weeks begin on Sunday. To make them begin on Monday instead,
set the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-week-start-day&lt;/span&gt;&lt;/code&gt; to 1. To change which day
headers are highlighted as weekend days, set the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-weekend-days&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="specified-dates"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id12"&gt;31.1.3 Specified Dates&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Calendar mode provides commands for moving to a particular date
specified in various ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;g d&lt;/p&gt;
&lt;p&gt;Move point to specified date (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g D&lt;/p&gt;
&lt;p&gt;Move point to specified day of year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-day-of-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g w&lt;/p&gt;
&lt;p&gt;Move point to specified week of year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-iso-goto-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;o&lt;/p&gt;
&lt;p&gt;Center calendar around specified month (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-other-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;Move point to today's date (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-today&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;g d (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-date&lt;/span&gt;&lt;/code&gt;) prompts for a year, a month, and a day
of the month, and then moves to that date. Because the calendar
includes all dates from the beginning of the current era, you must
type the year in its entirety; that is, type '2010', not '10'.&lt;/p&gt;
&lt;p&gt;g D (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-day-of-year&lt;/span&gt;&lt;/code&gt;) prompts for a year and day
number, and moves to that date. Negative day numbers count backward
from the end of the year. g w (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-iso-goto-week&lt;/span&gt;&lt;/code&gt;) prompts
for a year and week number, and moves to that week.&lt;/p&gt;
&lt;p&gt;o (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-other-month&lt;/span&gt;&lt;/code&gt;) prompts for a month and year, then
centers the three-month calendar around that month.&lt;/p&gt;
&lt;p&gt;You can return to today's date with . (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-today&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="scrolling-in-the-calendar"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id13"&gt;31.2 Scrolling in the Calendar&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The calendar display scrolls automatically through time when you move
out of the visible portion. You can also scroll it manually. Imagine
that the calendar window contains a long strip of paper with the months
on it. Scrolling the calendar means moving the strip horizontally, so
that new months become visible in the window.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;Scroll calendar one month forward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-scroll-left&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;lt;&lt;/p&gt;
&lt;p&gt;Scroll calendar one month backward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-scroll-right&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-v Scroll forward by three months
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-scroll-left-three-months&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-v Scroll backward by three months
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-scroll-right-three-months&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most basic calendar scroll commands scroll by one month at a time.
This means that there are two months of overlap between the display
before the command and the display after. &amp;gt; scrolls the calendar
contents one month forward in time. &amp;lt; scrolls the contents one month
backwards in time.&lt;/p&gt;
&lt;p&gt;The commands C-v and M-v scroll the calendar by an entire
screenful—three months—in analogy with the usual meaning of these
commands. C-v makes later dates visible and M-v makes earlier dates
visible. These commands take a numeric argument as a repeat count; in
particular, since C-u multiplies the next command by four, typing C-u
C-v scrolls the calendar forward by a year and typing C-u M-v scrolls
the calendar backward by a year.&lt;/p&gt;
&lt;p&gt;The function keys (or ) and (or ) are equivalent to C-v and M-v, just as
they are in other modes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="counting-days"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id14"&gt;31.3 Counting Days&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;M-=&lt;/p&gt;
&lt;p&gt;Display the number of days in the current region
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-count-days-region&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To determine the number of days in a range, set the mark on one date
using C-, move point to another date, and type M-=
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-count-days-region&lt;/span&gt;&lt;/code&gt;). The numbers of days shown is
&lt;em&gt;inclusive&lt;/em&gt;; that is, it includes the days specified by mark and
point.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="miscellaneous-calendar-commands"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id15"&gt;31.4 Miscellaneous Calendar Commands&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Display day-in-year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-print-day-of-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C-c C-l&lt;/p&gt;
&lt;p&gt;Regenerate the calendar window (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-redraw&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;lt;SPC&amp;gt;&lt;/p&gt;
&lt;p&gt;Scroll the next window up (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;scroll-other-window&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;lt;DEL&amp;gt;&lt;/p&gt;
&lt;p&gt;Scroll the next window down (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;scroll-other-window-down&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;q&lt;/p&gt;
&lt;p&gt;Exit from calendar (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-exit&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;p&gt;To display the number of days elapsed since the start of the year, or
the number of days remaining in the year, type the p d command
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-print-day-of-year&lt;/span&gt;&lt;/code&gt;). This displays both of those numbers in
the echo area. The count of days elapsed includes the selected date. The
count of days remaining does not include that date.&lt;/p&gt;
&lt;p&gt;If the calendar window text gets corrupted, type C-c C-l
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-redraw&lt;/span&gt;&lt;/code&gt;) to redraw it. (This can only happen if you use
non-Calendar-mode editing commands.)&lt;/p&gt;
&lt;p&gt;In Calendar mode, you can use (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;scroll-other-window&lt;/span&gt;&lt;/code&gt;) and
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;scroll-other-window-down&lt;/span&gt;&lt;/code&gt;) to scroll the other window (if there is
one) up or down, respectively. This is handy when you display a list of
holidays or diary entries in another window.&lt;/p&gt;
&lt;p&gt;To exit from the calendar, type q (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-exit&lt;/span&gt;&lt;/code&gt;). This buries all
buffers related to the calendar, selecting other buffers. (If a frame
contains a dedicated calendar window, exiting from the calendar deletes
or iconifies that frame depending on the value of
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-remove-frame-by-deleting&lt;/span&gt;&lt;/code&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-calendar-files"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id16"&gt;31.5 Writing Calendar Files&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can write calendars and diary entries to HTML and LaTeX files.&lt;/p&gt;
&lt;p&gt;The Calendar HTML commands produce files of HTML code that contain
calendar, holiday, and diary entries. Each file applies to one month,
and has a name of the format yyyy-mm.html, where yyyy and mm are the
four-digit year and two-digit month, respectively. The variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-directory&lt;/span&gt;&lt;/code&gt; specifies the default output directory for the
HTML files. To prevent holidays from being shown, customize
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-holidays&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Diary entries enclosed by &lt;code class="docutils literal"&gt;&amp;lt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&amp;gt;&lt;/code&gt; are interpreted as HTML tags
(for example: this is a diary entry with some red text). You can change
the overall appearance of the displayed HTML pages (for example, the
color of various page elements, header styles) via a stylesheet cal.css
in the directory containing the HTML files (see the value of the
variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-css-default&lt;/span&gt;&lt;/code&gt; for relevant style settings).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;H m&lt;/p&gt;
&lt;p&gt;Generate a one-month calendar (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-cursor-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;H y&lt;/p&gt;
&lt;p&gt;Generate a calendar file for each month of a year, as well as an
index page (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-cursor-year&lt;/span&gt;&lt;/code&gt;). By default, this command
writes files to a yyyy subdirectory—if this is altered some
hyperlinks between years will not work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-print-day-number-flag&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;,
then the monthly calendars show the day-of-the-year number. The variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-year-index-cols&lt;/span&gt;&lt;/code&gt; specifies the number of columns in the
yearly index page.&lt;/p&gt;
&lt;p&gt;The Calendar LaTeX commands produce a buffer of LaTeX code that prints
as a calendar. Depending on the command you use, the printed calendar
covers the day, week, month or year that point is in.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;t m&lt;/p&gt;
&lt;p&gt;Generate a one-month calendar (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t M&lt;/p&gt;
&lt;p&gt;Generate a sideways-printing one-month calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-month-landscape&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t d&lt;/p&gt;
&lt;p&gt;Generate a one-day calendar (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-day&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t w 1&lt;/p&gt;
&lt;p&gt;Generate a one-page calendar for one week, with hours
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t w 2&lt;/p&gt;
&lt;p&gt;Generate a two-page calendar for one week, with hours
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-week2&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t w 3&lt;/p&gt;
&lt;p&gt;Generate an ISO-style calendar for one week, without hours
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-week-iso&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t w 4&lt;/p&gt;
&lt;p&gt;Generate a calendar for one Monday-starting week, with hours
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-week-monday&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t w W&lt;/p&gt;
&lt;p&gt;Generate a two-page calendar for one week, without hours
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-week2-summary&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t f w&lt;/p&gt;
&lt;p&gt;Generate a Filofax-style two-weeks-at-a-glance calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-filofax-2week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t f W&lt;/p&gt;
&lt;p&gt;Generate a Filofax-style one-week-at-a-glance calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-filofax-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t y&lt;/p&gt;
&lt;p&gt;Generate a calendar for one year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t Y&lt;/p&gt;
&lt;p&gt;Generate a sideways-printing calendar for one year
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-year-landscape&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t f y&lt;/p&gt;
&lt;p&gt;Generate a Filofax-style calendar for one year
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-filofax-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these commands print the calendar sideways (in landscape mode),
so it can be wider than it is long. Some of them use Filofax paper size
(3.75in x 6.75in). All of these commands accept a prefix argument, which
specifies how many days, weeks, months or years to print (starting
always with the selected one).&lt;/p&gt;
&lt;p&gt;If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-holidays&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt; (the default),
then the printed calendars show the holidays in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-holidays&lt;/span&gt;&lt;/code&gt;.
If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-diary&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt; (the default is
&lt;code class="docutils literal"&gt;nil&lt;/code&gt;), diary entries are included also (in monthly, Filofax, and
iso-week calendars only). If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-rules&lt;/span&gt;&lt;/code&gt; is
non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt; (the default is &lt;code class="docutils literal"&gt;nil&lt;/code&gt;), the calendar displays ruled
pages in styles that have sufficient room. Consult the documentation of
the individual cal-tex functions to see which calendars support which
features.&lt;/p&gt;
&lt;p&gt;You can use the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-preamble-extra&lt;/span&gt;&lt;/code&gt; to insert extra
LaTeX commands in the preamble of the generated document if you need to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="holidays"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id17"&gt;31.6 Holidays&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Emacs calendar knows about many major and minor holidays, and can
display them. You can add your own holidays to the default list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mouse-3 Holidays&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;h&lt;/p&gt;
&lt;p&gt;Display holidays for the selected date
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-cursor-holidays&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;x&lt;/p&gt;
&lt;p&gt;Mark holidays in the calendar window (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mark-holidays&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;u&lt;/p&gt;
&lt;p&gt;Unmark calendar window (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-unmark&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a&lt;/p&gt;
&lt;p&gt;List all holidays for the displayed three months in another window
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-list-holidays&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x holidays&lt;/p&gt;
&lt;p&gt;List all holidays for three months around today's date in another
window.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;Define: Veterans' day 老兵 Etymology: Old Lithuanian vetušas "old,
aged;" and compare wether). 助记: Veterans day&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_544c0528e1244185b5e8dc97ec40f05b-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;;(sunrise-sunset)&lt;/span&gt;
&lt;a name="rest_code_544c0528e1244185b5e8dc97ec40f05b-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lunar-phases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;M-x list-holidays&lt;/p&gt;
&lt;p&gt;List holidays in another window for a specified range of years.&lt;/p&gt;
&lt;p&gt;To see if any holidays fall on a given date, position point on that
date in the calendar window and use the h command. Alternatively,
click on that date with mouse-3 and then choose Holidays from the
menu that appears. Either way, this displays the holidays for that
date, in the echo area if they fit there, otherwise in a separate
window.&lt;/p&gt;
&lt;p&gt;To view the distribution of holidays for all the dates shown in the
calendar, use the x command. This displays the dates that are
holidays in a different face. See
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Calendar-Customizing"&gt;calendar-holiday-marker&lt;/a&gt;.
The command applies both to the currently visible months and to other
months that subsequently become visible by scrolling. To turn marking
off and erase the current marks, type u, which also erases any diary
marks (see
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Diary"&gt;Diary&lt;/a&gt;).
If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mark-holidays-flag&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;,
creating or updating the calendar marks holidays automatically.&lt;/p&gt;
&lt;p&gt;To get even more detailed information, use the a command, which
displays a separate buffer containing a list of all holidays in the
current three-month range. You can use and in the calendar window to
scroll that list up and down, respectively.&lt;/p&gt;
&lt;p&gt;The command M-x holidays displays the list of holidays for the
current month and the preceding and succeeding months; this works
even if you don't have a calendar window. If the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-view-holidays-initially-flag&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;, creating
the calendar displays holidays in this way. If you want the list of
holidays centered around a different month, use C-u M-x holidays,
which prompts for the month and year.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The holidays known to Emacs include United States holidays and the major
Bahá'í, Chinese, Christian, Islamic, and Jewish holidays; also the
solstices and equinoxes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Define: solstices &lt;em&gt;ˈsɑːl.stɪs&lt;/em&gt; 至日, 至点 Etymology: Middle English:
from Old French, from Latin solstitium, from sol ‘sun’ + stit-
‘stopped, stationary’ (from the verb sistere). 助记:sol(sun) stice,
stand, 停止的点.&lt;/p&gt;
&lt;p&gt;Define: equinox &lt;em&gt;ˈek.wə.nɑːks&lt;/em&gt; Etymology: late Middle English: from
Old French equinoxe or Latin aequinoctium, from aequi- ‘equal’ + nox,
noct- ‘night’. 助记: equal好说,nox是night&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The command M-x holiday-list displays the list of holidays for a range
of years. This function asks you for the starting and stopping years,
and allows you to choose all the holidays or one of several categories
of holidays. You can use this command even if you don't have a calendar
window.&lt;/p&gt;
&lt;p&gt;The dates used by Emacs for holidays are based on &lt;em&gt;current practice&lt;/em&gt;,
not historical fact. For example Veteran's Day began in 1919, but is
shown in earlier years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="times-of-sunrise-and-sunset"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id18"&gt;31.7 Times of Sunrise and Sunset&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Special calendar commands can tell you, to within a minute or two, the
times of sunrise and sunset for any date.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mouse-3 Sunrise/sunset&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S&lt;/p&gt;
&lt;p&gt;Display times of sunrise and sunset for the selected date
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-sunrise-sunset&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x sunrise-sunset&lt;/p&gt;
&lt;p&gt;Display times of sunrise and sunset for today's date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-u M-x sunrise-sunset&lt;/p&gt;
&lt;p&gt;Display times of sunrise and sunset for a specified date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x calendar-sunrise-sunset-month&lt;/p&gt;
&lt;p&gt;Display times of sunrise and sunset for the selected month.&lt;/p&gt;
&lt;p&gt;Within the calendar, to display the &lt;em&gt;local times&lt;/em&gt; of sunrise and
sunset in the echo area, move point to the date you want, and type S.
Alternatively, click mouse-3 on the date, then choose
'Sunrise/sunset' from the menu that appears. The command M-x
sunrise-sunset is available outside the calendar to display this
information for today's date or a specified date. To specify a date
other than today, use C-u M-x sunrise-sunset, which prompts for the
year, month, and day.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can display the times of sunrise and sunset for any location and any
date with C-u C-u M-x sunrise-sunset. This asks you for a longitude,
latitude, number of minutes difference from Coordinated Universal Time,
and date, and then tells you the times of sunrise and sunset for that
location on that date.&lt;/p&gt;
&lt;p&gt;Because the times of sunrise and sunset depend on the location on earth,
you need to tell Emacs your latitude, longitude, and location name
before using these commands. Here is an example of what to set:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(setq calendar-latitude 40.1)
(setq calendar-longitude -88.2)
(setq calendar-location-name "Urbana, IL")&lt;/pre&gt;
&lt;p&gt;Use one decimal place in the values of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-latitude&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-longitude&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your time zone also affects the local time of sunrise and sunset. Emacs
usually gets time zone information from the operating system, but if
these values are not what you want (or if the operating system does not
supply them), you must set them yourself. Here is an example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(setq calendar-time-zone -360)
(setq calendar-standard-time-zone-name "CST")
(setq calendar-daylight-time-zone-name "CDT")&lt;/pre&gt;
&lt;p&gt;The value of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-time-zone&lt;/span&gt;&lt;/code&gt; is the number of minutes difference
between your local standard time and Coordinated Universal Time
(Greenwich time). The values of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-standard-time-zone-name&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-time-zone-name&lt;/span&gt;&lt;/code&gt; are the abbreviations used in your
time zone. Emacs displays the times of sunrise and sunset &lt;em&gt;corrected for
daylight saving time&lt;/em&gt;. See&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Daylight-Saving"&gt;Daylight
Saving&lt;/a&gt;,
for how daylight saving time is determined.&lt;/p&gt;
&lt;p&gt;As a user, you might find it convenient to set the calendar location
variables for your usual physical location in your .emacs file. If you
are a system administrator, you may want to set these variables for all
users in a default.el file. See &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Init-File"&gt;Init
File&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="phases-of-the-moon"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id19"&gt;31.8 Phases of the Moon&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;These calendar commands display the dates and times of the phases of the
moon (new moon, first quarter, full moon, last quarter). This feature is
useful for debugging problems that depend on the phase of the moon.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;M Display the dates and times for all the quarters of the moon for
the three-month period shown (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-lunar-phases&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x lunar-phases&lt;/p&gt;
&lt;p&gt;Display dates and times of the quarters of the moon for three months
around today's date.&lt;/p&gt;
&lt;p&gt;Within the calendar, use the M command to display a separate buffer
of the phases of the moon for the current three-month range. The
dates and times listed are accurate to within a few minutes.&lt;/p&gt;
&lt;p&gt;Outside the calendar, use the command M-x lunar-phases to display the
list of the phases of the moon for the current month and the
preceding and succeeding months. For information about a different
month, use C-u M-x lunar-phases, which prompts for the month and
year.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The dates and times given for the phases of the moon are given in local
time (corrected for daylight saving, when appropriate). See the
discussion in the previous section. See
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Sunrise_002fSunset"&gt;Sunrise/Sunset&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conversion-to-and-from-other-calendars"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id20"&gt;31.9 Conversion To and From Other Calendars&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Emacs calendar displayed is &lt;em&gt;always&lt;/em&gt; the Gregorian calendar,
sometimes called the New Style calendar, which is used in most of the
world today. However, this calendar did not exist before the sixteenth
century and was not widely used before the eighteenth century; it did
not fully displace the Julian calendar and gain universal acceptance
until the early twentieth century. The Emacs calendar can display any
month since January, year 1 of the current era, but the calendar
displayed is always the Gregorian, even for a date at which the
Gregorian calendar did not exist.&lt;/p&gt;
&lt;p&gt;While Emacs cannot display other calendars, it can convert dates to and
from several other calendars.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Calendar-Systems"&gt;Calendar
Systems&lt;/a&gt;:
The calendars Emacs understands (aside from Gregorian).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#To-Other-Calendar"&gt;To Other
Calendar&lt;/a&gt;:
Converting the selected date to various calendars.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#From-Other-Calendar"&gt;From Other
Calendar&lt;/a&gt;:
Moving to a date specified in another calendar.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="supported-calendar-systems"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id21"&gt;31.9.1 Supported Calendar Systems&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The ISO commercial calendar is often used in business.&lt;/p&gt;
&lt;p&gt;The Julian calendar, named after Julius Caesar, was the one used in
Europe throughout medieval times, and in many countries up until the
nineteenth century.&lt;/p&gt;
&lt;p&gt;Astronomers use a simple counting of days elapsed since noon, Monday,
January 1, 4713 B.C. on the Julian calendar. The number of days elapsed
is called the Julian day number or the Astronomical day number.&lt;/p&gt;
&lt;p&gt;The Hebrew calendar is used by tradition in the Jewish religion. The
Emacs calendar program uses the Hebrew calendar to determine the dates
of Jewish holidays. Hebrew calendar dates begin and end at sunset.&lt;/p&gt;
&lt;p&gt;The Islamic calendar is used in many predominantly Islamic countries.
Emacs uses it to determine the dates of Islamic holidays. There is no
universal agreement in the Islamic world about the calendar; Emacs uses
a widely accepted version, but the precise dates of Islamic holidays
often depend on proclamation by religious authorities, not on
calculations. As a consequence, the actual dates of observance can vary
slightly from the dates computed by Emacs. Islamic calendar dates begin
and end at sunset.&lt;/p&gt;
&lt;p&gt;The French Revolutionary calendar was created by the Jacobins after the
1789 revolution, to represent a more secular and nature-based view of
the annual cycle, and to install a 10-day week in a rationalization
measure similar to the metric system. The French government officially
abandoned this calendar at the end of 1805.&lt;/p&gt;
&lt;p&gt;The Maya of Central America used three separate, overlapping calendar
systems, the &lt;em&gt;long count&lt;/em&gt;, the &lt;em&gt;tzolkin&lt;/em&gt;, and the &lt;em&gt;haab&lt;/em&gt;. Emacs knows
about all three of these calendars. Experts dispute the exact
correlation between the Mayan calendar and our calendar; Emacs uses the
Goodman-Martinez-Thompson correlation in its calculations.&lt;/p&gt;
&lt;p&gt;The Copts use a calendar based on the ancient Egyptian solar calendar.
Their calendar consists of twelve 30-day months followed by an extra
five-day period. Once every fourth year they add a leap day to this
extra period to make it six days. The Ethiopic calendar is identical in
structure, but has different year numbers and month names.&lt;/p&gt;
&lt;p&gt;The Persians use a solar calendar based on a design of Omar Khayyam.
Their calendar consists of twelve months of which the first six have 31
days, the next five have 30 days, and the last has 29 in ordinary years
and 30 in leap years. Leap years occur in a complicated pattern every
four or five years. The calendar implemented here is the arithmetical
Persian calendar championed by Birashk, based on a 2,820-year cycle. It
differs from the astronomical Persian calendar, which is based on
astronomical events. As of this writing the first future discrepancy is
projected to occur on March 20, 2025. It is currently not clear what the
official calendar of Iran will be at that time.&lt;/p&gt;
&lt;p&gt;The Chinese calendar is a complicated system of lunar months arranged
into solar years. The years go in cycles of sixty, each year containing
either twelve months in an ordinary year or thirteen months in a leap
year; each month has either 29 or 30 days. Years, ordinary months, and
days are named by combining one of ten celestial stems with one of
twelve terrestrial branches for a total of sixty names that are repeated
in a cycle of sixty.&lt;/p&gt;
&lt;p&gt;The Bahá'í calendar system is based on a solar cycle of 19 months with
19 days each. The four remaining intercalary days are placed between the
18th and 19th months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="converting-to-other-calendars"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id22"&gt;31.9.2 Converting To Other Calendars&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following commands describe the selected date (the date at point) in
various other calendar systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mouse-3 Other calendars&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p o&lt;/p&gt;
&lt;p&gt;Display the selected date in various other calendars.
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-print-other-dates&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p c&lt;/p&gt;
&lt;p&gt;Display ISO commercial calendar equivalent for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-iso-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p j&lt;/p&gt;
&lt;p&gt;Display Julian date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-julian-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p a&lt;/p&gt;
&lt;p&gt;Display astronomical (Julian) day number for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-astro-print-day-number&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p h&lt;/p&gt;
&lt;p&gt;Display Hebrew date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-hebrew-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p i&lt;/p&gt;
&lt;p&gt;Display Islamic date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-islamic-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p f&lt;/p&gt;
&lt;p&gt;Display French Revolutionary date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-french-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p b&lt;/p&gt;
&lt;p&gt;Display Bahá'í date for selected day (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-bahai-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p C&lt;/p&gt;
&lt;p&gt;Display Chinese date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-chinese-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p k&lt;/p&gt;
&lt;p&gt;Display Coptic date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-coptic-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p e&lt;/p&gt;
&lt;p&gt;Display Ethiopic date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-ethiopic-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p p&lt;/p&gt;
&lt;p&gt;Display Persian date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-persian-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p m&lt;/p&gt;
&lt;p&gt;Display Mayan date for selected day (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Otherwise, move point to the date you want to convert, then type the
appropriate command starting with p from the table above. The prefix p
is a mnemonic for "print", since Emacs "prints" the equivalent date in
the echo area. p o displays the date in all forms known to Emacs. You
can also use mouse-3 and then choose Other calendars from the menu that
appears. This displays the equivalent forms of the date in all the
calendars Emacs understands, in the form of a menu. (Choosing an
alternative from this menu doesn't actually do anything—the menu is used
only for display.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="converting-from-other-calendars"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id23"&gt;31.9.3 Converting From Other Calendars&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can use the other supported calendars to specify a date to move to.
This section describes the commands for doing this using calendars other
than Mayan; for the Mayan calendar, see the following section.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;g c&lt;/p&gt;
&lt;p&gt;Move to a date specified in the ISO commercial calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-iso-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g w&lt;/p&gt;
&lt;p&gt;Move to a week specified in the ISO commercial calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-iso-goto-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g j&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Julian calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-julian-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g a&lt;/p&gt;
&lt;p&gt;Move to a date specified with an astronomical (Julian) day number
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-astro-goto-day-number&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g b&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Bahá'í calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-bahai-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g h&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Hebrew calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-hebrew-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g i&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Islamic calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-islamic-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g f&lt;/p&gt;
&lt;p&gt;Move to a date specified in the French Revolutionary calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-french-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g C&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Chinese calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-chinese-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g p&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Persian calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-persian-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g k&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Coptic calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-coptic-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g e&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Ethiopic calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-ethiopic-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These commands ask you for a date on the other calendar, move point to
the Gregorian calendar date equivalent to that date, and display the
other calendar's date in the echo area. Emacs uses strict completion
(see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Completion-Exit"&gt;Completion
Exit&lt;/a&gt;)
whenever it asks you to type a month name, so you don't have to worry
about the spelling of Hebrew, Islamic, or French names.&lt;/p&gt;
&lt;p&gt;One common issue concerning the Hebrew calendar is the computation of
the anniversary of a date of death, called a yahrzeit. The Emacs
calendar includes a facility for such calculations. If you are in the
calendar, the command M-x calendar-hebrew-list-yahrzeits asks you for a
range of years and then displays a list of the yahrzeit dates for those
years for the date given by point. If you are not in the calendar, this
command first asks you for the date of death and the range of years, and
then displays the list of yahrzeit dates.&lt;/p&gt;
&lt;div class="section" id="the-diary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id24"&gt;31.10 The Diary&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Emacs diary keeps track of appointments or other events on a daily
basis, in &lt;code class="docutils literal"&gt;conjunction&lt;/code&gt; with the calendar. To use the diary feature,
you must first create a diary file containing a list of events and their
dates. Then Emacs can automatically pick out and display the events for
today, for the immediate future, or for any specified date.&lt;/p&gt;
&lt;p&gt;Although you probably will start by creating a diary manually, Emacs
provides a number of commands to let you view, add, and change diary
entries.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-diary-file"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id25"&gt;31.10.1 The Diary File&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Your diary file is a file that records events associated with particular
dates. The name of the diary file is specified by the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-file&lt;/span&gt;&lt;/code&gt;. The default is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.emacs.d/diary&lt;/span&gt;&lt;/code&gt;, though for
compatibility with older versions Emacs will use ~/diary if it exists.&lt;/p&gt;
&lt;p&gt;Each entry in the diary file describes one event and consists of one or
more lines. An entry always begins with a date specification at the left
margin. The rest of the entry is simply text to describe the event. If
the entry has more than one line, then the lines after the first must
begin with whitespace to indicate they continue a previous entry. Lines
that do not begin with valid dates and do not continue a preceding entry
are ignored. Here's an example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;12/22/2015  Twentieth wedding anniversary!
10/22       Ruth's birthday.
* 21, *:    Payday
Tuesday--weekly meeting with grad students at 10am
         Supowit, Shen, Bitner, and Kapoor to attend.
1/13/89     Friday the thirteenth!!
thu 4pm     squash game with Lloyd.
mar 16      Dad's birthday
April 15, 2016 Income tax due.
* 15        time cards due.&lt;/pre&gt;
&lt;p&gt;This example uses extra spaces to align the event descriptions of most
of the entries. Such formatting is purely a matter of taste.&lt;/p&gt;
&lt;p&gt;You can also use a format where the first line of a diary entry consists
only of the date or day name (with no following blanks or punctuation).
For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;02/11/2012
      Bill B. visits Princeton today
      2pm Cognitive Studies Committee meeting
      2:30-5:30 Liz at Lawrenceville
      4:00pm Dentist appt
      7:30pm Dinner at George's
      8:00-10:00pm concert&lt;/pre&gt;
&lt;p&gt;This entry will have a different appearance if you use the simple diary
display (see`Diary
Display &amp;lt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Diary-Display"&gt;https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Diary-Display&lt;/a&gt;&amp;gt;`__).
The simple diary display omits the date line at the beginning; only the
continuation lines appear. This style of entry looks neater when you
display just a single day's entries, but can cause confusion if you ask
for more than one day's entries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="displaying-the-diary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id26"&gt;31.10.2 Displaying the Diary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once you have created a diary file, you can use the calendar to view it.
You can also view today's events outside of Calendar mode. In the
following, key bindings refer to the Calendar buffer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mouse-3 Diary&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;Display all diary entries for the selected date
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-view-entries&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;s&lt;/p&gt;
&lt;p&gt;Display the entire diary file (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-show-all-entries&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;m&lt;/p&gt;
&lt;p&gt;Mark all visible dates that have diary entries
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-mark-entries&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;u&lt;/p&gt;
&lt;p&gt;Unmark the calendar window (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-unmark&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x diary-print-entries&lt;/p&gt;
&lt;p&gt;Print hard copy of the diary display as it appears.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x diary&lt;/p&gt;
&lt;p&gt;Display all diary entries for today's date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x diary-mail-entries&lt;/p&gt;
&lt;p&gt;Mail yourself email reminders about upcoming diary entries.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Displaying the diary entries with d shows in a separate buffer the diary
entries for the selected date in the calendar. The mode line of the new
buffer shows the date of the diary entries. Holidays are shown either in
the buffer or in the mode line, depending on the display method you
choose (see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Diary-Display"&gt;Diary
Display&lt;/a&gt;).
If you specify a numeric argument with d, it shows all the diary entries
for that many successive days. Thus, 2 d displays all the entries for
the selected date and for the following day.&lt;/p&gt;
&lt;p&gt;Another way to display the diary entries for a date is to click mouse-3
on the date, and then choose Diary entries from the menu that appears.
If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-view-diary-initially-flag&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;,
creating the calendar lists the diary entries for the current date
(provided the current date is visible).&lt;/p&gt;
&lt;p&gt;To get a broader view of which days are mentioned in the diary, use the
m command. This marks the dates that have diary entries in a different
face. See
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Calendar-Customizing"&gt;diary-entry-marker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This command applies both to the months that are currently visible and
to those that subsequently become visible after scrolling. To turn
marking off and erase the current marks, type u, which also turns off
holiday marks (see
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Holidays"&gt;Holidays&lt;/a&gt;).
If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mark-diary-entries-flag&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;,
creating or updating the calendar marks diary dates automatically.&lt;/p&gt;
&lt;p&gt;To prevent an individual diary entry from being marked in the calendar,
insert the string that &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-nonmarking-symbol&lt;/span&gt;&lt;/code&gt; specifies (the
default is '&amp;amp;') at the beginning of the entry, before the date. This has
no effect on display of the entry in the diary buffer; it only affects
marks on dates in the calendar. Nonmarking entries can be useful for
generic entries that would otherwise mark many different dates.&lt;/p&gt;
&lt;p&gt;To see the full diary file, rather than just some of the entries, use
the s command.&lt;/p&gt;
&lt;p&gt;The command M-x diary displays the diary entries for the current date,
independently of the calendar display, and optionally for the next few
days as well; the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-number-of-entries&lt;/span&gt;&lt;/code&gt; specifies how
many days to include. See
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Diary-Customizing"&gt;diary-number-of-entries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you put &lt;code class="docutils literal"&gt;(diary)&lt;/code&gt; in your .emacs file, this automatically displays
a window with the day's diary entries when you start Emacs.&lt;/p&gt;
&lt;p&gt;Some people like to receive email notifications of events in their
diary. To send such mail to yourself, use the command M-x
diary-mail-entries. A prefix argument specifies how many days (starting
with today) to check; otherwise, the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-mail-days&lt;/span&gt;&lt;/code&gt; says
how many days.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="date-formats"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id27"&gt;31.10.3 Date Formats&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are some sample diary entries, illustrating different ways of
formatting a date. The examples all show dates in American order (month,
day, year), but Calendar mode supports European order (day, month, year)
and ISO order (year, month, day) as options.&lt;/p&gt;
&lt;pre class="literal-block"&gt;4/20/12  Switch-over to new tabulation system
apr. 25  Start tabulating annual results
4/30  Results for April are due
*/25  Monthly cycle finishes
Friday  Don't leave without backing up files&lt;/pre&gt;
&lt;p&gt;The first entry appears only once, on April 20, 2012. The second and
third appear every year on the specified dates, and the fourth uses a
wildcard (asterisk) for the month, so it appears on the 25th of every
month. The final entry appears every week on Friday.&lt;/p&gt;
&lt;p&gt;You can use just numbers to express a date, as in 'month/day' or
'month/day/year'. This must be followed by a nondigit. In the date
itself, month and day are numbers of one or two digits. The optional
year is also a number, and may be abbreviated to the last two digits;
that is, you can use '11/12/2012' or '11/12/12'.&lt;/p&gt;
&lt;p&gt;Dates can also have the form 'monthname day' or 'monthname day, year',
where the month's name can be spelled in full or abbreviated (with or
without a period). The preferred abbreviations for month and day names
can be set using the variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-abbrev-length&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-month-abbrev-array&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-day-abbrev-array&lt;/span&gt;&lt;/code&gt;. The
default is to use the first three letters of a name as its abbreviation.
Case is not significant.&lt;/p&gt;
&lt;p&gt;A date may be generic,that is, partially unspecified. Then the entry
applies to all dates that match the specification. If the date does not
contain a year, it is generic and applies to any year. Alternatively,
month, day, or year can be '*'; this matches any month, day, or year,
respectively. Thus, a diary entry ‘3///&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id2"&gt;&lt;span class="problematic" id="id3"&gt;*&lt;/span&gt;&lt;/a&gt;' matches any day in March of
any year; so does ‘march /'.&lt;/p&gt;
&lt;div class="system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 1085); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline emphasis start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you prefer the European style of writing dates (in which the day
comes before the month), or the ISO style (in which the order is year,
month, day), type M-x calendar-set-date-style while in the calendar, or
customize the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-date-style&lt;/span&gt;&lt;/code&gt;. This affects how diary
dates are interpreted, date display, and the order in which some
commands expect their arguments to be given.&lt;/p&gt;
&lt;p&gt;You can use the name of a day of the week as a generic date which
applies to any date falling on that day of the week. You can abbreviate
the day of the week as described above, or spell it in full; case is not
significant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="commands-to-add-to-the-diary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id28"&gt;31.10.4 Commands to Add to the Diary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While in the calendar, there are several commands to create diary
entries. The basic commands are listed here; more sophisticated commands
are in the next section (see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Special-Diary-Entries"&gt;Special Diary
Entries&lt;/a&gt;).
Entries can also be based on non-Gregorian calendars. See &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Non_002dGregorian-Diary"&gt;Non-Gregorian
Diary&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;i d&lt;/p&gt;
&lt;p&gt;Add a diary entry for the selected date (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i w&lt;/p&gt;
&lt;p&gt;Add a diary entry for the selected day of the week
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-weekly-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i m&lt;/p&gt;
&lt;p&gt;Add a diary entry for the selected day of the month
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-monthly-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i y&lt;/p&gt;
&lt;p&gt;Add a diary entry for the selected day of the year
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-yearly-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can make a diary entry for a specific date by selecting that date in
the calendar window and typing the i d command. This command displays
the end of your diary file in another window and inserts the date; you
can then type the rest of the diary entry.&lt;/p&gt;
&lt;p&gt;If you want to make a diary entry that applies to a specific day of the
week, select that day of the week (any occurrence will do) and type i w.
This inserts the day-of-week as a generic date; you can then type the
rest of the diary entry. You can make a monthly diary entry in the same
fashion: select the day of the month, use the i m command, and type the
rest of the entry. Similarly, you can insert a yearly diary entry with
the i y command.&lt;/p&gt;
&lt;p&gt;All of the above commands make marking diary entries by default. To make
a nonmarking diary entry, give a prefix argument to the command. For
example, C-u i w makes a nonmarking weekly diary entry.&lt;/p&gt;
&lt;p&gt;When you modify the diary file, be sure to save the file before exiting
Emacs. Saving the diary file after using any of the above insertion
commands will automatically update the diary marks in the calendar
window, if appropriate. You can use the command &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-redraw&lt;/span&gt;&lt;/code&gt; to
force an update at any time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="special-diary-entries"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id29"&gt;31.10.5 Special Diary Entries&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to entries based on calendar dates, the diary file can
contain sexp entries for regular events such as anniversaries. These
entries are based on Lisp expressions (sexps) that Emacs evaluates as it
scans the diary file. Instead of a date, a sexp entry contains '%%'
followed by a Lisp expression which must begin and end with parentheses.
The Lisp expression determines which dates the entry applies to.&lt;/p&gt;
&lt;p&gt;Calendar mode provides commands to insert certain commonly used sexp
entries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;i a&lt;/p&gt;
&lt;p&gt;Add an anniversary diary entry for the selected date
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-anniversary-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i b&lt;/p&gt;
&lt;p&gt;Add a block diary entry for the current region
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-block-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i c&lt;/p&gt;
&lt;p&gt;Add a cyclic diary entry starting at the date
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-cyclic-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If you want to make a diary entry that applies to the anniversary of
a specific date, move point to that date and use the i a command.
This displays the end of your diary file in another window and
inserts the anniversary description; you can then type the rest of
the diary entry. The entry looks like this:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;%%(diary-anniversary 10 31 1988) Arthur's birthday&lt;/pre&gt;
&lt;p&gt;This entry applies to October 31 in any year after 1988; '10 31 1988'
specifies the date. (If you are using the European or ISO calendar
style, the input order of month, day and year is different.) The reason
this expression requires a beginning year is that advanced diary
functions can use it to calculate the number of elapsed years.&lt;/p&gt;
&lt;p&gt;A block diary entry applies to a specified range of consecutive dates.
Here is a block diary entry that applies to all dates from June 24, 2012
through July 10, 2012:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-block 6 24 2012 7 10 2012) Vacation&lt;/pre&gt;
&lt;p&gt;The '6 24 2012' indicates the starting date and the '7 10 2012'
indicates the stopping date. (Again, if you are using the European or
ISO calendar style, the input order of month, day and year is
different.)&lt;/p&gt;
&lt;p&gt;To insert a block entry, place point and the mark on the two dates that
begin and end the range, and type i b. This command displays the end of
your diary file in another window and inserts the block description; you
can then type the diary entry.&lt;/p&gt;
&lt;p&gt;Cyclic diary entries repeat after a fixed interval of days. To create
one, select the starting date and use the i c command. The command
prompts for the length of interval, then inserts the entry, which looks
like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-cyclic 50 3 1 2012) Renew medication&lt;/pre&gt;
&lt;p&gt;This entry applies to March 1, 2012 and every 50th day following; '3 1
2012' specifies the starting date. (If you are using the European or ISO
calendar style, the input order of month, day and year is different.)&lt;/p&gt;
&lt;p&gt;All three of these commands make marking diary entries. To insert a
nonmarking entry, give a prefix argument to the command. For example,
C-u i a makes a nonmarking anniversary diary entry.&lt;/p&gt;
&lt;p&gt;Marking sexp diary entries in the calendar can be time-consuming, since
every date visible in the calendar window must be individually checked.
So it's a good idea to make sexp diary entries nonmarking (with '&amp;amp;')
when possible.&lt;/p&gt;
&lt;p&gt;Another sophisticated kind of sexp entry, a floating diary entry,
specifies a regularly occurring event by offsets specified in days,
weeks, and months. It is comparable to a crontab entry interpreted by
the &lt;code class="docutils literal"&gt;cron&lt;/code&gt; utility. Here is a nonmarking, floating diary entry that
applies to the fourth Thursday in November:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;amp;%%(diary-float 11 4 4) American Thanksgiving&lt;/pre&gt;
&lt;p&gt;The 11 specifies November (the eleventh month), the 4 specifies Thursday
(the fourth day of the week, where Sunday is numbered zero), and the
second 4 specifies the fourth Thursday (1 would mean "first", 2 would
mean "second", −2 would mean "second-to-last", and so on). The month can
be a single month or a list of months. Thus you could change the 11
above to ‘'(1 2 3)' and have the entry apply to the last Thursday of
January, February, and March. If the month is &lt;code class="docutils literal"&gt;t&lt;/code&gt;, the entry applies
to all months of the year.&lt;/p&gt;
&lt;p&gt;Each of the standard sexp diary entries takes an optional parameter
specifying the name of a face or a single-character string to use when
marking the entry in the calendar. Most generally, sexp diary entries
can perform arbitrary computations to determine when they apply.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="appointments"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id30"&gt;31.10.6 Appointments&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have a diary entry for an appointment, and that diary entry
begins with a recognizable time of day, Emacs can warn you in advance
that an appointment is pending. Emacs alerts you to the appointment by
displaying a message in your chosen format, as specified by the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-display-format&lt;/span&gt;&lt;/code&gt;. If the value of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-audible&lt;/span&gt;&lt;/code&gt; is
non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;, the warning includes an audible reminder. In addition, if
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-display-mode-line&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;, Emacs displays the number
of minutes to the appointment on the mode line.&lt;/p&gt;
&lt;p&gt;If &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-display-format&lt;/span&gt;&lt;/code&gt; has the value &lt;code class="docutils literal"&gt;window&lt;/code&gt;, then the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-display-duration&lt;/span&gt;&lt;/code&gt; controls how long the reminder window is
visible for; and the variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-disp-window-function&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-delete-window-function&lt;/span&gt;&lt;/code&gt; give the names of functions used to
create and destroy the window, respectively.&lt;/p&gt;
&lt;p&gt;To enable appointment notification, type M-x appt-activate. With a
positive argument, it enables notification; with a negative argument, it
disables notification; with no argument, it toggles. Enabling
notification also sets up an appointment list for today from the diary
file, giving all diary entries found with recognizable times of day, and
reminds you just before each of them.&lt;/p&gt;
&lt;p&gt;For example, suppose the diary file contains these lines:&lt;/p&gt;
&lt;pre class="literal-block"&gt;Monday
  9:30am Coffee break
 12:00pm Lunch&lt;/pre&gt;
&lt;p&gt;Then on Mondays, you will be reminded at around 9:20am about your coffee
break and at around 11:50am about lunch. The variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-message-warning-time&lt;/span&gt;&lt;/code&gt; specifies how many minutes (default 12) in
advance to warn you. This is a default warning time. Each appointment
can specify a different warning time by adding a piece matching
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-warning-time-regexp&lt;/span&gt;&lt;/code&gt; (see that variable's documentation for
details).&lt;/p&gt;
&lt;p&gt;You can write times in am/pm style (with '12:00am' standing for midnight
and '12:00pm' standing for noon), or 24-hour European/military style.
You need not be consistent; your diary file can have a mixture of the
two styles. Times must be at the beginning of diary entries if they are
to be recognized.&lt;/p&gt;
&lt;p&gt;Emacs updates the appointments list from the diary file automatically
just after midnight. You can force an update at any time by re-enabling
appointment notification. Both these actions also display the day's
diary buffer, unless you set &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-display-diary&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;nil&lt;/code&gt;. The
appointments list is also updated whenever the diary file (or a file it
includes; see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Fancy-Diary-Display"&gt;Fancy Diary
Display&lt;/a&gt;)
is saved. If you use the Org Mode and keep appointments in your Org
agenda files, you can add those appointments to the list using the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-agenda-to-appt&lt;/span&gt;&lt;/code&gt; command. See &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/org.html#Weekly_002fdaily-agenda"&gt;Appointment
reminders&lt;/a&gt;,
for more about that command.&lt;/p&gt;
&lt;p&gt;You can also use the appointment notification facility like an alarm
clock. The command M-x appt-add adds entries to the appointment list
without affecting your diary file. You delete entries from the
appointment list with M-x appt-delete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="importing-and-exporting-diary-entries"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id31"&gt;31.10.7 Importing and Exporting Diary Entries&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can transfer diary entries between Emacs diary files and a variety
of other formats.&lt;/p&gt;
&lt;p&gt;You can import diary entries from Outlook-generated appointment
messages. While viewing such a message in Rmail or Gnus, do M-x
diary-from-outlook to import the entry. You can make this command
recognize additional appointment message formats by customizing the
variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-outlook-formats&lt;/span&gt;&lt;/code&gt;. Other mail clients can set
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-from-outlook-function&lt;/span&gt;&lt;/code&gt; to an appropriate value.&lt;/p&gt;
&lt;p&gt;The icalendar package allows you to transfer data between your Emacs
diary file and iCalendar files, which are defined in RFC 2445—Internet
Calendaring and Scheduling Core Object Specification (iCalendar) (as
well as the earlier vCalendar format).&lt;/p&gt;
&lt;p&gt;The command &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;icalendar-import-buffer&lt;/span&gt;&lt;/code&gt; extracts iCalendar data from the
current buffer and adds it to your diary file. This function is also
suitable for automatic extraction of iCalendar data; for example with
the Rmail mail client one could use:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(add-hook 'rmail-show-message-hook 'icalendar-import-buffer)&lt;/pre&gt;
&lt;p&gt;The command &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;icalendar-import-file&lt;/span&gt;&lt;/code&gt; imports an iCalendar file and adds
the results to an Emacs diary file. For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(icalendar-import-file "/here/is/calendar.ics"
                       "/there/goes/ical-diary")&lt;/pre&gt;
&lt;p&gt;You can use an &lt;code class="docutils literal"&gt;#include&lt;/code&gt; directive to add the import file contents to
the main diary file, if these are different files. See &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Fancy-Diary-Display"&gt;Fancy Diary
Display&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;icalendar-export-file&lt;/span&gt;&lt;/code&gt; to interactively export an entire Emacs
diary file to iCalendar format. To export only a part of a diary file,
mark the relevant area, and call &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;icalendar-export-region&lt;/span&gt;&lt;/code&gt;. In both
cases, Emacs appends the result to the target file.&lt;/p&gt;
&lt;div class="section" id="daylight-saving-time"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id32"&gt;31.11 Daylight Saving Time&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Emacs understands the difference between standard time and daylight
saving time—the times given for sunrise, sunset, solstices, equinoxes,
and the phases of the moon take that into account. The rules for
daylight saving time vary from place to place and have also varied
historically from year to year. To do the job properly, Emacs needs to
know which rules to use.&lt;/p&gt;
&lt;p&gt;Some operating systems keep track of the rules that apply to the place
where you are; on these systems, Emacs gets the information it needs
from the system automatically. If some or all of this information is
missing, Emacs fills in the gaps with the rules currently used in
Cambridge, Massachusetts. If the resulting rules are not what you want,
you can tell Emacs the rules to use by setting certain variables:
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-starts&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-ends&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These values should be Lisp expressions that refer to the variable
&lt;code class="docutils literal"&gt;year&lt;/code&gt;, and evaluate to the Gregorian date on which daylight saving
time starts or (respectively) ends, in the form of a list &lt;code class="docutils literal"&gt;(=month day
year&lt;/code&gt;)=. The values should be &lt;code class="docutils literal"&gt;nil&lt;/code&gt; if your area does not use
daylight saving time.&lt;/p&gt;
&lt;p&gt;Emacs uses these expressions to determine the starting date of daylight
saving time for the holiday list and for correcting times of day in the
solar and lunar calculations.&lt;/p&gt;
&lt;p&gt;The values for Cambridge, Massachusetts are as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(calendar-nth-named-day 2 0 3 year)
(calendar-nth-named-day 1 0 11 year)&lt;/pre&gt;
&lt;p&gt;That is, the second 0th day (Sunday) of the third month (March) in the
year specified by &lt;code class="docutils literal"&gt;year&lt;/code&gt;, and the first Sunday of the eleventh month
(November) of that year. If daylight saving time were changed to start
on October 1, you would set &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-starts&lt;/span&gt;&lt;/code&gt; to
this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(list 10 1 year)&lt;/pre&gt;
&lt;p&gt;If there is no daylight saving time at your location, or if you want all
times in standard time, set &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-starts&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-ends&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-time-offset&lt;/span&gt;&lt;/code&gt; specifies the difference
between daylight saving time and standard time, measured in minutes. The
value for Cambridge, Massachusetts is 60.&lt;/p&gt;
&lt;p&gt;Finally, the two variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-starts-time&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-ends-time&lt;/span&gt;&lt;/code&gt; specify the number of minutes
after midnight local time when the transition to and from daylight
saving time should occur. For Cambridge, Massachusetts both variables'
values are 120.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summing-time-intervals"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id33"&gt;31.12 Summing Time Intervals&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The timeclock package adds up time intervals, so you can (for instance)
keep track of how much time you spend working on particular projects. (A
more advanced alternative is to use the Org Mode's facilities for
clocking time, see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/org.html#Clocking-work-time"&gt;Clocking work
time&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Use the M-x timeclock-in command when you start working on a project,
and M-x timeclock-out command when you're done. Each time you do this,
it adds one time interval to the record of the project. You can change
to working on a different project with M-x timeclock-change.&lt;/p&gt;
&lt;p&gt;Once you've collected data from a number of time intervals, you can use
M-x timeclock-workday-remaining to see how much time is left to work
today (assuming a typical average of 8 hours a day), and M-x
timeclock-when-to-leave which will calculate when you're done.&lt;/p&gt;
&lt;p&gt;If you want Emacs to display the amount of time left of your workday in
the mode line, either customize the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;timeclock-modeline-display&lt;/span&gt;&lt;/code&gt;
variable and set its value to &lt;code class="docutils literal"&gt;t&lt;/code&gt;, or invoke the M-x
timeclock-modeline-display command.&lt;/p&gt;
&lt;p&gt;Terminating the current Emacs session might or might not mean that you
have stopped working on the project and, by default, Emacs asks you. You
can, however, customize the value of the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;timeclock-ask-before-exiting&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;nil&lt;/code&gt; to avoid the question; then,
only an explicit M-x timeclock-out or M-x timeclock-change will tell
Emacs that the current interval is over.&lt;/p&gt;
&lt;p&gt;The timeclock functions work by accumulating the data in a file called
~/.emacs.d/timelog. You can specify a different name for this file by
customizing the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;timeclock-file&lt;/span&gt;&lt;/code&gt;. If you edit the timeclock
file manually, or if you change the value of any of timeclock's
customizable variables, you should run the command M-x
timeclock-reread-log to update the data in Emacs from the file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-advanced-features-of-the-calendar-and-diary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id34"&gt;31.13 More advanced features of the Calendar and Diary&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This section describes some of the more advanced/specialized features of
the calendar and diary. It starts with some of the many ways in which
you can customize the calendar and diary to suit your personal tastes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="customizing-the-calendar"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id35"&gt;31.13.1 Customizing the Calendar&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The calendar display unfortunately cannot be changed from three months,
but you can customize the whitespace used by setting the variables:
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-left-margin&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-day-header-width&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-day-digit-width&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-column-width&lt;/span&gt;&lt;/code&gt;, and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-intermonth-spacing&lt;/span&gt;&lt;/code&gt;. To display text &lt;em&gt;between&lt;/em&gt; the months,
for example week numbers, customize the variables
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-intermonth-header&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-intermonth-text&lt;/span&gt;&lt;/code&gt; as
described in their documentation.&lt;/p&gt;
&lt;p&gt;The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-month-header&lt;/span&gt;&lt;/code&gt; controls the text that appears
above each month in the calendar. By default, it shows the month and
year. The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-day-header-array&lt;/span&gt;&lt;/code&gt; controls the text that
appears above each day's column in every month. By default, it shows the
first two letters of each day's name.&lt;/p&gt;
&lt;p&gt;The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-holiday-marker&lt;/span&gt;&lt;/code&gt; specifies how to mark a date
that is a holiday. Its value may be a single-character string to insert
next to the date, or a face name to use for displaying the date.
Likewise, the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-entry-marker&lt;/span&gt;&lt;/code&gt; specifies how to mark a
date that has diary entries. The function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mark-today&lt;/span&gt;&lt;/code&gt; uses
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-today-marker&lt;/span&gt;&lt;/code&gt; to mark today's date. By default, the calendar
uses faces named &lt;code class="docutils literal"&gt;holiday&lt;/code&gt;, &lt;code class="docutils literal"&gt;diary&lt;/code&gt;, and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-today&lt;/span&gt;&lt;/code&gt; for
these purposes.&lt;/p&gt;
&lt;p&gt;Starting the calendar runs the normal hook
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-initial-window-hook&lt;/span&gt;&lt;/code&gt;. Recomputation of the calendar display
does not run this hook. But if you leave the calendar with the q command
and reenter it, the hook runs again.&lt;/p&gt;
&lt;p&gt;The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-today-visible-hook&lt;/span&gt;&lt;/code&gt; is a normal hook run after
the calendar buffer has been prepared with the calendar, when the
current date is visible in the window. One use of this hook is to mark
today's date; to do that use either of the functions
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mark-today&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-star-date&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(add-hook 'calendar-today-visible-hook 'calendar-mark-today)&lt;/pre&gt;
&lt;p&gt;A similar normal hook, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-today-invisible-hook&lt;/span&gt;&lt;/code&gt; is run if the
current date is &lt;em&gt;not&lt;/em&gt; visible in the window.&lt;/p&gt;
&lt;p&gt;Each of the calendar cursor motion commands runs the hook
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-move-hook&lt;/span&gt;&lt;/code&gt; after it moves the cursor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customizing-the-holidays"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id36"&gt;31.13.2 Customizing the Holidays&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are several variables listing the default holidays that Emacs
knows about. These are: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-general-holidays&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-local-holidays&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-solar-holidays&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-bahai-holidays&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-christian-holidays&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-hebrew-holidays&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-islamic-holidays&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-oriental-holidays&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-other-holidays&lt;/span&gt;&lt;/code&gt;. The names
should be self-explanatory; e.g., &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-solar-holidays&lt;/span&gt;&lt;/code&gt; lists sun-
and moon-related holidays.&lt;/p&gt;
&lt;p&gt;You can customize these lists of holidays to your own needs, deleting or
adding holidays as described below. Set any of them to &lt;code class="docutils literal"&gt;nil&lt;/code&gt; to not
show the associated holidays.&lt;/p&gt;
&lt;p&gt;The general holidays are, by default, holidays common throughout the
United States. In contrast, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-local-holidays&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-other-holidays&lt;/span&gt;&lt;/code&gt; are both empty by default. These are intended
for system-wide settings and your individual use, respectively.&lt;/p&gt;
&lt;p&gt;By default, Emacs does not include all the holidays of the religions
that it knows, only those commonly found in secular calendars. For a
more extensive collection of religious holidays, you can set any (or
all) of the variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-bahai-all-holidays-flag&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-christian-all-holidays-flag&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-hebrew-all-holidays-flag&lt;/span&gt;&lt;/code&gt;, or
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-islamic-all-holidays-flag&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each of the holiday variables is a list of holiday forms, each form
describing a holiday (or sometimes a list of holidays). Here is a table
of the possible kinds of holiday form. Day numbers and month numbers
count starting from 1, but dayname numbers count Sunday as 0. The
argument string is always the description of the holiday, as a string.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-fixed=month&lt;/span&gt; day string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A fixed date on the Gregorian calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=(holiday-float=month dayname k string&lt;/p&gt;
&lt;p&gt;​ &amp;amp;optional day) The kth dayname (dayname=0 for Sunday, and so on)
after or before Gregorian date month, day. Negative k means count
back from the end of the month. Optional day defaults to 1 if k is
positive, and the last day of month otherwise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-chinese=month&lt;/span&gt; day string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A fixed date on the Chinese calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-hebrew=month&lt;/span&gt; day string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A fixed date on the Hebrew calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-islamic=month&lt;/span&gt; day string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A fixed date on the Islamic calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-julian=month&lt;/span&gt; day string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A fixed date on the Julian calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-sexp=sexp&lt;/span&gt; string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A date calculated by the Lisp expression sexp. The expression should
use the variable &lt;code class="docutils literal"&gt;year&lt;/code&gt; to compute and return the date of a holiday
in the form of a list &lt;code class="docutils literal"&gt;(=month day year&lt;/code&gt;)=, or &lt;code class="docutils literal"&gt;nil&lt;/code&gt; if the
holiday doesn't happen this year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;(if=condition &lt;span class="pre"&gt;holiday-form&lt;/span&gt;&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A holiday that happens only if condition is true.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;(=function [args]&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A list of dates calculated by the function function, called with
arguments args.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, suppose you want to add Bastille Day, celebrated in France
on July 14 (i.e., the fourteenth day of the seventh month). You can do
this as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(setq holiday-other-holidays '((holiday-fixed 7 14 "Bastille Day")))&lt;/pre&gt;
&lt;p&gt;Many holidays occur on a specific day of the week, at a specific time of
month. Here is a holiday form describing Hurricane Supplication Day,
celebrated in the Virgin Islands on the fourth Monday in July:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(holiday-float 7 1 4 "Hurricane Supplication Day")&lt;/pre&gt;
&lt;p&gt;Here the 7 specifies July, the 1 specifies Monday (Sunday is 0, Tuesday
is 2, and so on), and the 4 specifies the fourth occurrence in the month
(1 specifies the first occurrence, 2 the second occurrence, −1 the last
occurrence, −2 the second-to-last occurrence, and so on).&lt;/p&gt;
&lt;p&gt;You can specify holidays that occur on fixed days of the Bahá'í,
Chinese, Hebrew, Islamic, and Julian calendars too. For example,&lt;/p&gt;
&lt;pre class="literal-block"&gt;(setq holiday-other-holidays
      '((holiday-hebrew 10 2 "Last day of Hanukkah")
        (holiday-islamic 3 12 "Mohammed's Birthday")
        (holiday-julian 4 2 "Jefferson's Birthday")))&lt;/pre&gt;
&lt;p&gt;adds the last day of Hanukkah (since the Hebrew months are numbered with
1 starting from Nisan), the Islamic feast celebrating Mohammed's
birthday (since the Islamic months are numbered from 1 starting with
Muharram), and Thomas Jefferson's birthday, which is 2 April 1743 on the
Julian calendar.&lt;/p&gt;
&lt;p&gt;To include a holiday conditionally, use either Emacs Lisp's &lt;code class="docutils literal"&gt;if&lt;/code&gt; or
the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-sexp&lt;/span&gt;&lt;/code&gt; form. For example, American presidential elections
occur on the first Tuesday after the first Monday in November of years
divisible by 4:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(holiday-sexp '(if (zerop (% year 4))
                   (calendar-gregorian-from-absolute
                    (1+ (calendar-dayname-on-or-before
                          1 (+ 6 (calendar-absolute-from-gregorian
                                  (list 11 1 year)))))))
              "US Presidential Election")&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class="literal-block"&gt;(if (zerop (% displayed-year 4))
    (holiday-fixed 11
           (calendar-extract-day
             (calendar-gregorian-from-absolute
               (1+ (calendar-dayname-on-or-before
                     1 (+ 6 (calendar-absolute-from-gregorian
                              (list 11 1 displayed-year)))))))
           "US Presidential Election"))&lt;/pre&gt;
&lt;p&gt;Some holidays just don't fit into any of these forms because special
calculations are involved in their determination. In such cases you must
write a Lisp function to do the calculation. To include eclipses, for
example, add &lt;code class="docutils literal"&gt;(eclipses)&lt;/code&gt; to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-other-holidays&lt;/span&gt;&lt;/code&gt; and write an
Emacs Lisp function &lt;code class="docutils literal"&gt;eclipses&lt;/code&gt; that returns a (possibly empty) list of
the relevant Gregorian dates among the range visible in the calendar
window, with descriptive strings, like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(((6 4 2012) "Lunar Eclipse") ((11 13 2012) "Solar Eclipse") ... )&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="converting-from-the-mayan-calendar"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id37"&gt;31.13.3 Converting from the Mayan Calendar&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are the commands to select dates based on the Mayan calendar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;g m l&lt;/p&gt;
&lt;p&gt;Move to a date specified by the long count calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-goto-long-count-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m n t&lt;/p&gt;
&lt;p&gt;Move to the next occurrence of a place in the tzolkin calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-next-tzolkin-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m p t&lt;/p&gt;
&lt;p&gt;Move to the previous occurrence of a place in the tzolkin calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-previous-tzolkin-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m n h&lt;/p&gt;
&lt;p&gt;Move to the next occurrence of a place in the haab calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-next-haab-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m p h&lt;/p&gt;
&lt;p&gt;Move to the previous occurrence of a place in the haab calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-previous-haab-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m n c&lt;/p&gt;
&lt;p&gt;Move to the next occurrence of a place in the calendar round
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-next-calendar-round-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m p c&lt;/p&gt;
&lt;p&gt;Move to the previous occurrence of a place in the calendar round
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-previous-calendar-round-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To understand these commands, you need to understand the Mayan
calendars. The long count is a counting of days with these units:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;1 kin = 1 day   1 uinal = 20 kin   1 tun = 18 uinal
1 katun = 20 tun   1 baktun = 20 katun&lt;/pre&gt;
&lt;p&gt;Thus, the long count date 12.16.11.16.6 means 12 baktun, 16 katun, 11
tun, 16 uinal, and 6 kin. The Emacs calendar can handle Mayan long count
dates as early as 7.17.18.13.3, but no earlier. When you use the g m l
command, type the Mayan long count date with the baktun, katun, tun,
uinal, and kin separated by periods.&lt;/p&gt;
&lt;p&gt;The Mayan tzolkin calendar is a cycle of 260 days formed by a pair of
independent cycles of 13 and 20 days. Since this cycle repeats
endlessly, Emacs provides commands to move backward and forward to the
previous or next point in the cycle. Type g m p t to go to the previous
tzolkin date; Emacs asks you for a tzolkin date and moves point to the
previous occurrence of that date. Similarly, type g m n t to go to the
next occurrence of a tzolkin date.&lt;/p&gt;
&lt;p&gt;The Mayan haab calendar is a cycle of 365 days arranged as 18 months of
20 days each, followed by a 5-day monthless period. Like the tzolkin
cycle, this cycle repeats endlessly, and there are commands to move
backward and forward to the previous or next point in the cycle. Type g
m p h to go to the previous haab date; Emacs asks you for a haab date
and moves point to the previous occurrence of that date. Similarly, type
g m n h to go to the next occurrence of a haab date.&lt;/p&gt;
&lt;p&gt;The Maya also used the combination of the tzolkin date and the haab
date. This combination is a cycle of about 52 years called a &lt;em&gt;calendar
round&lt;/em&gt;. If you type g m p c, Emacs asks you for both a haab and a
tzolkin date and then moves point to the previous occurrence of that
combination. Use g m n c to move point to the next occurrence of a
combination. These commands signal an error if the haab/tzolkin date
combination you have typed is impossible.&lt;/p&gt;
&lt;p&gt;Emacs uses strict completion (see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Completion-Exit"&gt;Completion
Exit&lt;/a&gt;)
whenever it asks you to type a Mayan name, so you don't have to worry
about spelling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="date-display-format"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id38"&gt;31.13.4 Date Display Format&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can customize the way dates are displayed in the diary, mode lines,
and messages by setting &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-date-display-form&lt;/span&gt;&lt;/code&gt;. This variable
holds a list of expressions that can involve the variables &lt;code class="docutils literal"&gt;month&lt;/code&gt;,
&lt;code class="docutils literal"&gt;day&lt;/code&gt;, and &lt;code class="docutils literal"&gt;year&lt;/code&gt;, which are all numbers in string form, and
&lt;code class="docutils literal"&gt;monthname&lt;/code&gt; and &lt;code class="docutils literal"&gt;dayname&lt;/code&gt;, which are both alphabetic strings. In the
American style, the default value of this list is as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;((if dayname (concat dayname ", ")) monthname " " day ", " year)&lt;/pre&gt;
&lt;p&gt;while in the European style this value is the default:&lt;/p&gt;
&lt;pre class="literal-block"&gt;((if dayname (concat dayname ", ")) day " " monthname " " year)&lt;/pre&gt;
&lt;p&gt;The default ISO date representation is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;((format "%s-%.2d-%.2d" year (string-to-number month)
         (string-to-number day)))&lt;/pre&gt;
&lt;p&gt;Another typical American format is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(month "/" day "/" (substring year -2))&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="time-display-format"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id39"&gt;31.13.5 Time Display Format&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The calendar and diary by default display times of day in the
conventional American style with the hours from 1 through 12, minutes,
and either 'am' or 'pm'. If you prefer the European style, also known in
the US as military, in which the hours go from 00 to 23, you can alter
the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-time-display-form&lt;/span&gt;&lt;/code&gt;. This variable is a list of
expressions that can involve the variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;12-hours&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;24-hours&lt;/span&gt;&lt;/code&gt;,
and &lt;code class="docutils literal"&gt;minutes&lt;/code&gt;, which are all numbers in string form, and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;am-pm&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;time-zone&lt;/span&gt;&lt;/code&gt;, which are both alphabetic strings. The default value is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(12-hours ":" minutes am-pm
          (if time-zone " (") time-zone (if time-zone ")"))&lt;/pre&gt;
&lt;p&gt;Here is a value that provides European style times:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(24-hours ":" minutes
          (if time-zone " (") time-zone (if time-zone ")"))&lt;/pre&gt;
&lt;p&gt;Note that few calendar functions return a time of day (at present, only
solar functions).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customizing-the-diary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id40"&gt;31.13.6 Customizing the Diary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ordinarily, the diary window indicates any holidays that fall on the
date of the diary entries, either in the mode line or the buffer itself.
The process of checking for holidays can be slow, depending on the
defined holidays. In that case, setting &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-show-holidays-flag&lt;/span&gt;&lt;/code&gt; to
&lt;code class="docutils literal"&gt;nil&lt;/code&gt; will speed up the diary display.&lt;/p&gt;
&lt;p&gt;The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-number-of-entries&lt;/span&gt;&lt;/code&gt; controls the number of days of
diary entries to be displayed at one time. It affects the initial
display when &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-view-diary-initially-flag&lt;/span&gt;&lt;/code&gt; is &lt;code class="docutils literal"&gt;t&lt;/code&gt;, as well as
the command M-x diary. For example, a value of 1 (the default) displays
only the current day's diary entries, whereas a value of 2 will also
show the next day's entries. The value can also be a vector of seven
integers: for example, if the value is &lt;code class="docutils literal"&gt;[0 2 2 2 2 4 1]&lt;/code&gt; then no diary
entries appear on Sunday, the current date's and the next day's diary
entries appear Monday through Thursday, Friday through Monday's entries
appear on Friday, while on Saturday only that day's entries appear.&lt;/p&gt;
&lt;p&gt;You can customize the form of dates in your diary file by setting the
variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-date-forms&lt;/span&gt;&lt;/code&gt;. This variable is a list of patterns for
recognizing a date. Each date pattern is a list whose elements may be
regular expressions (see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Regular-Expressions"&gt;Regular
Expressions&lt;/a&gt;)
or the symbols &lt;code class="docutils literal"&gt;month&lt;/code&gt;, &lt;code class="docutils literal"&gt;day&lt;/code&gt;, &lt;code class="docutils literal"&gt;year&lt;/code&gt;, &lt;code class="docutils literal"&gt;monthname&lt;/code&gt;, and
&lt;code class="docutils literal"&gt;dayname&lt;/code&gt;. All these elements serve as patterns that match certain
kinds of text in the diary file. In order for the date pattern as a
whole to match, all of its elements must match consecutively.&lt;/p&gt;
&lt;p&gt;A regular expression in a date pattern matches in its usual fashion,
using the standard syntax table altered so that ‘&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id4"&gt;&lt;span class="problematic" id="id5"&gt;*&lt;/span&gt;&lt;/a&gt;' is a word
constituent.&lt;/p&gt;
&lt;div class="system-message" id="id4"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 1853); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline emphasis start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The symbols &lt;code class="docutils literal"&gt;month&lt;/code&gt;, &lt;code class="docutils literal"&gt;day&lt;/code&gt;, &lt;code class="docutils literal"&gt;year&lt;/code&gt;, &lt;code class="docutils literal"&gt;monthname&lt;/code&gt;, and &lt;code class="docutils literal"&gt;dayname&lt;/code&gt;
match the month number, day number, year number, month name, and day
name of the date being considered. The symbols that match numbers allow
leading zeros; those that match names allow capitalization and
abbreviation (as specified by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-month-abbrev-array&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-day-abbrev-array&lt;/span&gt;&lt;/code&gt;). All the symbols can match '*'; since ‘&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id6"&gt;&lt;span class="problematic" id="id7"&gt;*&lt;/span&gt;&lt;/a&gt;'
in a diary entry means "any day", "any month", and so on, it should
match regardless of the date being considered.&lt;/p&gt;
&lt;div class="system-message" id="id6"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 1857); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id7"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline emphasis start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The default value of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-date-forms&lt;/span&gt;&lt;/code&gt; in the American style is
provided by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-american-date-forms&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;((month "/" day "[^/0-9]")
 (month "/" day "/" year "[^0-9]")
 (monthname " *" day "[^,0-9]")
 (monthname " *" day ", *" year "[^0-9]")
 (dayname "\\W"))&lt;/pre&gt;
&lt;p&gt;The variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-european-date-forms&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-iso-date-forms&lt;/span&gt;&lt;/code&gt;
provide other default styles.&lt;/p&gt;
&lt;p&gt;The date patterns in the list must be &lt;em&gt;mutually exclusive&lt;/em&gt; and must not
match any portion of the diary entry itself, just the date and one
character of whitespace. If, to be mutually exclusive, the pattern must
match a portion of the diary entry text—beyond the whitespace that ends
the date—then the first element of the date pattern &lt;em&gt;must&lt;/em&gt; be
&lt;code class="docutils literal"&gt;backup&lt;/code&gt;. This causes the date recognizer to back up to the beginning
of the current word of the diary entry, after finishing the match. Even
if you use &lt;code class="docutils literal"&gt;backup&lt;/code&gt;, the date pattern must absolutely not match more
than a portion of the first word of the diary entry. For example, the
default value of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-european-date-forms&lt;/span&gt;&lt;/code&gt; is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;((day "/" month "[^/0-9]")
 (day "/" month "/" year "[^0-9]")
 (backup day " *" monthname "\\W+\\&amp;lt;\\([^*0-9]\\|\\([0-9]+[:aApP]\\)\\)")
 (day " *" monthname " *" year "[^0-9]")
 (dayname "\\W"))&lt;/pre&gt;
&lt;p&gt;Notice the use of &lt;code class="docutils literal"&gt;backup&lt;/code&gt; in the third pattern, because it needs to
match part of a word beyond the date itself to distinguish it from the
fourth pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diary-entries-using-non-gregorian-calendars"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id41"&gt;31.13.7 Diary Entries Using non-Gregorian Calendars&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As well as entries based on the standard Gregorian calendar, your diary
can have entries based on Bahá'í, Chinese, Hebrew, or Islamic dates.
Recognition of such entries can be time-consuming, however, and since
most people don't use them, you must explicitly enable their use. If you
want the diary to recognize Hebrew-date diary entries, for example, you
must do this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(add-hook 'diary-nongregorian-listing-hook 'diary-hebrew-list-entries)
(add-hook 'diary-nongregorian-marking-hook 'diary-hebrew-mark-entries)&lt;/pre&gt;
&lt;p&gt;Similarly, for Islamic, Bahá'í and Chinese entries, add
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-list-entries&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-mark-entries&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-list-entries&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-mark-entries&lt;/span&gt;&lt;/code&gt;, or
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-list-entries&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-mark-entries&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These diary entries have the same formats as Gregorian-date diary
entries; except that &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-entry-symbol&lt;/span&gt;&lt;/code&gt; (default 'B') must
precede a Bahá'í date, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-entry-symbol&lt;/span&gt;&lt;/code&gt; (default 'C') a
Chinese date, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-hebrew-entry-symbol&lt;/span&gt;&lt;/code&gt; (default 'H') a Hebrew date,
and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-entry-symbol&lt;/span&gt;&lt;/code&gt; (default 'I') an Islamic date.
Moreover, non-Gregorian month names may not be abbreviated (because the
first three letters are often not unique). (Note also that you must use
"Adar I" if you want Adar of a common Hebrew year.) For example, a diary
entry for the Hebrew date Heshvan 25 could look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;HHeshvan 25 Happy Hebrew birthday!&lt;/pre&gt;
&lt;p&gt;and would appear in the diary for any date that corresponds to Heshvan
25 on the Hebrew calendar. And here is an Islamic-date diary entry that
matches Dhu al-Qada 25:&lt;/p&gt;
&lt;pre class="literal-block"&gt;IDhu al-Qada 25 Happy Islamic birthday!&lt;/pre&gt;
&lt;p&gt;As with Gregorian-date diary entries, non-Gregorian entries are
nonmarking if preceded by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-nonmarking-symbol&lt;/span&gt;&lt;/code&gt; (default '&amp;amp;').&lt;/p&gt;
&lt;p&gt;Here is a table of commands used in the calendar to create diary entries
that match the selected date and other dates that are similar in the
Bahá'í, Chinese, Hebrew, or Islamic calendars:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;i h d&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-hebrew-insert-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i h m&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-hebrew-insert-monthly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i h y&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-hebrew-insert-yearly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i i d&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-insert-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i i m&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-insert-monthly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i i y&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-insert-yearly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i B d&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-insert-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i B m&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-insert-monthly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i B y&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-insert-yearly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i C d&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-insert-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i C m&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-insert-monthly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i C y&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-insert-yearly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i C a&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-insert-anniversary-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These commands work much like the corresponding commands for ordinary
diary entries: they apply to the date that point is on in the
calendar window, and what they do is insert just the date portion of
a diary entry at the end of your diary file. You must then insert the
rest of the diary entry. The basic commands add an entry for the
specific non-Gregorian date, the 'monthly' commands for the given
non-Gregorian day-within-month in every month, and the 'yearly'
commands for the given non-Gregorian day and month in every year.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next: &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Fancy-Diary-Display"&gt;Fancy Diary
Display&lt;/a&gt;,
Previous: &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Non_002dGregorian-Diary"&gt;Non-Gregorian
Diary&lt;/a&gt;,
Up: &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Advanced-Calendar_002fDiary-Usage"&gt;Advanced Calendar/Diary
Usage&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diary-display"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id42"&gt;31.13.8 Diary Display&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Diary display works by preparing the list of diary entries and then
running the function specified by the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-display-function&lt;/span&gt;&lt;/code&gt;. The default value &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-fancy-display&lt;/span&gt;&lt;/code&gt;
displays diary entries and holidays by copying them into a special
buffer that exists only for the sake of display. Copying diary entries
to a separate buffer provides an opportunity to change the displayed
text to make it prettier—for example, to sort the entries by the dates
they apply to.&lt;/p&gt;
&lt;p&gt;Ordinarily, the fancy diary buffer does not show days for which there
are no diary entries, even if that day is a holiday. If you want such
days to be shown in the fancy diary buffer, set the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-list-include-blanks&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fancy diary buffer enables View mode (see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#View-Mode"&gt;View
Mode&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The alternative display method &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-simple-display&lt;/span&gt;&lt;/code&gt; shows the actual
diary buffer, and uses invisible text to hide entries that don't apply.
Holidays are shown in the mode line. The advantage of this method is
that you can edit the buffer and save your changes directly to the diary
file. This method is not as flexible as the fancy method, however. For
example, it cannot sort entries. Another disadvantage is that invisible
text can be confusing. For example, if you copy a region of text in
order to paste it elsewhere, invisible text may be included. Similarly,
since the diary buffer as you see it is an illusion, simply printing the
buffer may not print what you see on your screen.&lt;/p&gt;
&lt;p&gt;For this reason, there is a special command to print hard copy of the
diary buffer &lt;em&gt;as it appears&lt;/em&gt;; this command is M-x diary-print-entries.
It works with either display method, although with the fancy display you
can also print the buffer like any other. To print a hard copy of a
day-by-day diary for a week, position point on the first day of the
week, type 7 d, and then do M-x diary-print-entries. As usual, the
inclusion of the holidays slows down the display slightly; you can speed
things up by setting the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-show-holidays-flag&lt;/span&gt;&lt;/code&gt; to
&lt;code class="docutils literal"&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This command prepares a temporary buffer that contains only the diary
entries currently visible in the diary buffer. Unlike with the simple
display, the other irrelevant entries are really absent, not just
hidden. After preparing the buffer, it runs the hook
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-print-entries-hook&lt;/span&gt;&lt;/code&gt;. The default value of this hook sends the
data directly to the printer with the command &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;lpr-buffer&lt;/span&gt;&lt;/code&gt; (see
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Printing"&gt;Printing&lt;/a&gt;).
If you want to use a different command to do the printing, just change
the value of this hook. Other uses might include, for example,
rearranging the lines into order by day and time.&lt;/p&gt;
&lt;p&gt;You can edit the diary entries as they appear in the simple diary
window, but it is important to remember that the buffer displayed
contains the &lt;em&gt;entire&lt;/em&gt; diary file, with portions of it concealed from
view. This means, for instance, that the C-f (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;forward-char&lt;/span&gt;&lt;/code&gt;) command
can put point at what appears to be the end of the line, but what is in
reality the middle of some concealed line.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Be careful when editing the diary entries in the simple display!&lt;/em&gt;
Inserting additional lines or adding/deleting characters in the middle
of a visible line cannot cause problems, but editing at the end of a
line may not do what you expect. Deleting a line may delete other
invisible entries that follow it. Before editing the simple diary
buffer, it is best to display the entire file with s
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-show-all-entries&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fancy-diary-display"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id43"&gt;31.13.9 Fancy Diary Display&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following features only work with the fancy diary display.&lt;/p&gt;
&lt;p&gt;You can use the normal hook &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-list-entries-hook&lt;/span&gt;&lt;/code&gt; to sort each
day's diary entries by their time of day. Here's how:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(add-hook 'diary-list-entries-hook 'diary-sort-entries t)&lt;/pre&gt;
&lt;p&gt;For each day, this sorts diary entries that begin with a recognizable
time of day according to their times. Diary entries without times come
first within each day. Note how the sort command is placed at the end of
the hook list, in case earlier members of the list change the order of
the diary entries, or add items.&lt;/p&gt;
&lt;p&gt;You can write 'comments' in diary entries, by setting the variables
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-comment-start&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-comment-end&lt;/span&gt;&lt;/code&gt; to strings that
delimit comments. The fancy display does not print comments. You might
want to put meta-data for the use of other packages (e.g., the
appointment package, see
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Appointments"&gt;Appointments&lt;/a&gt;)
inside comments.&lt;/p&gt;
&lt;p&gt;Your main diary file can include other files. This permits a group of
people to share a diary file for events that apply to all of them. Lines
in the diary file starting with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-include-string&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;#include "filename"&lt;/pre&gt;
&lt;p&gt;include the diary entries from the file filename in the fancy diary
buffer. The include mechanism is recursive, so that included files can
include other files, and so on (you must be careful not to have a cycle
of inclusions, of course). Here is how to enable the include facility:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(add-hook 'diary-list-entries-hook 'diary-include-other-diary-files)
(add-hook 'diary-mark-entries-hook 'diary-mark-included-diary-files)&lt;/pre&gt;
&lt;p&gt;The include mechanism works only with the fancy diary display, because
simple diary display shows the entries directly from your diary file.&lt;/p&gt;
&lt;p&gt;Previous: &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Fancy-Diary-Display"&gt;Fancy Diary
Display&lt;/a&gt;,
Up: &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Advanced-Calendar_002fDiary-Usage"&gt;Advanced Calendar/Diary
Usage&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sexp-entries-and-the-fancy-diary-display"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id44"&gt;31.13.10 Sexp Entries and the Fancy Diary Display&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sexp diary entries allow you to do more than just have complicated
conditions under which a diary entry applies. Sexp entries should be
preceded by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-sexp-entry-symbol&lt;/span&gt;&lt;/code&gt; (default '%%') in the diary
file. With the fancy diary display, sexp entries can generate the text
of the entry depending on the date itself.&lt;/p&gt;
&lt;p&gt;For example, an anniversary diary entry can insert the number of years
since the anniversary date into the text of the diary entry. Thus the
'%d' in this diary entry:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-anniversary 10 31 1948) Arthur's birthday (%d years old)&lt;/pre&gt;
&lt;p&gt;gets replaced by the age, so on October 31, 1990 the entry appears in
the fancy diary buffer like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;Arthur's birthday (42 years old)&lt;/pre&gt;
&lt;p&gt;If the diary file instead contains this entry:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-anniversary 10 31 1948) Arthur's %d%s birthday&lt;/pre&gt;
&lt;p&gt;the entry in the fancy diary buffer for October 31, 1990 appears like
this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;Arthur's 42nd birthday&lt;/pre&gt;
&lt;p&gt;Similarly, cyclic diary entries can interpolate the number of
repetitions that have occurred:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-cyclic 50 1 1 2012) Renew medication (%d%s time)&lt;/pre&gt;
&lt;p&gt;looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;Renew medication (5th time)&lt;/pre&gt;
&lt;p&gt;in the fancy diary display on September 7, 2012.&lt;/p&gt;
&lt;p&gt;There is an early-reminder diary sexp that includes its entry in the
diary not only on the date of occurrence, but also on earlier dates. For
example, if you want a reminder a week before your anniversary, you can
use&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-remind '(diary-anniversary 12 22 1968) 7) Ed's anniversary&lt;/pre&gt;
&lt;p&gt;and the fancy diary will show 'Ed's anniversary' both on December 15 and
on December 22.&lt;/p&gt;
&lt;p&gt;The function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-date&lt;/span&gt;&lt;/code&gt; applies to dates described by a month, day,
year combination, each of which can be an integer, a list of integers,
or &lt;code class="docutils literal"&gt;t&lt;/code&gt; (meaning all values). For example,&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-date '(10 11 12) 22 t) Rake leaves&lt;/pre&gt;
&lt;p&gt;causes the fancy diary to show&lt;/p&gt;
&lt;pre class="literal-block"&gt;Rake leaves&lt;/pre&gt;
&lt;p&gt;on October 22, November 22, and December 22 of every year.&lt;/p&gt;
&lt;p&gt;The function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-float&lt;/span&gt;&lt;/code&gt; allows you to describe diary entries that
apply to dates like the third Friday of November, or the last Tuesday in
April. The parameters are the month, dayname, and an index n. The entry
appears on the nth dayname after the first day of month, where dayname=0
means Sunday, 1 means Monday, and so on. If n is negative it counts
backward from the end of month. The value of month can be a list of
months, a single month, or &lt;code class="docutils literal"&gt;t&lt;/code&gt; to specify all months. You can also use
an optional parameter day to specify the nth dayname on or after/before
day of month; the value of day defaults to 1 if n is positive and to the
last day of month if n is negative. For example,&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-float t 1 -1) Pay rent&lt;/pre&gt;
&lt;p&gt;causes the fancy diary to show&lt;/p&gt;
&lt;pre class="literal-block"&gt;Pay rent&lt;/pre&gt;
&lt;p&gt;on the last Monday of every month.&lt;/p&gt;
&lt;p&gt;The generality of sexp diary entries lets you specify any diary entry
that you can describe algorithmically. A sexp diary entry contains an
expression that computes whether the entry applies to any given date. If
its value is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;, the entry applies to that date; otherwise,
it does not. The expression can use the variable &lt;code class="docutils literal"&gt;date&lt;/code&gt; to find the
date being considered; its value is a list (month day year) that refers
to the Gregorian calendar.&lt;/p&gt;
&lt;p&gt;The sexp diary entry applies to a date when the expression's value is
non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;, but some values have more specific meanings. If the value
is a string, that string is a description of the event which occurs on
that date. The value can also have the form &lt;code class="docutils literal"&gt;(=mark&lt;/code&gt;.=string=)=; then
mark specifies how to mark the date in the calendar, and string is the
description of the event. If mark is a single-character string, that
character appears next to the date in the calendar. If mark is a face
name, the date is displayed in that face. If mark is &lt;code class="docutils literal"&gt;nil&lt;/code&gt;, that
specifies no particular highlighting for the date.&lt;/p&gt;
&lt;p&gt;Suppose you get paid on the 21st of the month if it is a weekday, and on
the Friday before if the 21st is on a weekend. Here is how to write a
sexp diary entry that matches those dates:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;amp;%%(let ((dayname (calendar-day-of-week date))
         (day (cadr date)))
      (or (and (= day 21) (memq dayname '(1 2 3 4 5)))
          (and (memq day '(19 20)) (= dayname 5)))
         ) Pay check deposited&lt;/pre&gt;
&lt;p&gt;The following sexp diary entries take advantage of the ability (in the
fancy diary display) to concoct diary entries whose text varies based on
the date:&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-sunrise-sunset)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry for today's local times of sunrise and sunset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-lunar-phases)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry for the phases (quarters) of the moon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-day-of-year)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's day number in the current year and
the number of days remaining in the current year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-iso-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent ISO commercial date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-julian-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Julian calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-astro-day-number)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent astronomical (Julian) day
number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-bahai-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Bahá'í calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-chinese-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Chinese calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-coptic-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Coptic calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-ethiopic-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Ethiopic calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-french-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent date on the French
Revolutionary calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Hebrew calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-islamic-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Islamic calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-mayan-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Mayan calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-persian-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Persian calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, including the diary entry&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;amp;%%(diary-hebrew-date)&lt;/pre&gt;
&lt;p&gt;causes every day's diary display to contain the equivalent date on the
Hebrew calendar, if you are using the fancy diary display. (With simple
diary display, the literal line '&amp;amp;%%(diary-hebrew-date)' appears in the
diary for any date.)&lt;/p&gt;
&lt;p&gt;This function has been used to construct certain standard Hebrew sexp
diary entries:&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-rosh-hodesh)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry that tells the occurrence and ritual announcement
of each new Hebrew month.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-parasha)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a Saturday diary entry that tells the weekly synagogue scripture
reading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-sabbath-candles)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a Friday diary entry that tells the &lt;em&gt;local time&lt;/em&gt; of Sabbath
candle lighting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-omer)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry that gives the omer count, when appropriate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-yahrzeit=month&lt;/span&gt; day year&lt;/code&gt;)=name&lt;/p&gt;
&lt;p&gt;Make a diary entry marking the anniversary of a date of death. The
date is the &lt;em&gt;Gregorian&lt;/em&gt; (civil) date of death. The diary entry
appears on the proper Hebrew calendar anniversary and on the day
before. (The order of the parameters changes according to the
calendar date style; for example in the European style to day, month,
year.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-birthday=month&lt;/span&gt; day year&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;Make a diary entry for a birthday on the Hebrew calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the functions documented above take an optional argument mark which
specifies how to mark the date in the calendar display. If one of these
functions decides that it applies to a certain date, it returns a value
that contains mark, as described above.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>time</category><category>评注笔记</category><guid>https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/</guid><pubDate>Thu, 16 May 2019 01:53:29 GMT</pubDate></item><item><title>时间管理的三件武器</title><link>https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id1" id="id8"&gt;前情概要&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id2" id="id9"&gt;时间管理的三件武器&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#python" id="id10"&gt;Python中的时间管理&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#calender" id="id11"&gt;1. Calender&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#time" id="id12"&gt;2. Time&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#datetime" id="id13"&gt;3. Datetime&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#shell" id="id14"&gt;Shell的时间管理工具&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#calendar" id="id15"&gt;1.Calendar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#clock-time" id="id16"&gt;2.Clock(Time)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id5" id="id17"&gt;3.Datetime&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#emacs" id="id18"&gt;Emacs中的时间管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id6" id="id19"&gt;总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id7" id="id20"&gt;参考资料&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id8"&gt;前情概要&lt;/a&gt;&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;“时间变量的顺序与时间表示的格式”
总结了时间的10个变量及其直觉解析的顺序&lt;/div&gt;
&lt;div class="line"&gt;&lt;code class="docutils literal"&gt;Weekday Hour:Minute &lt;span class="pre"&gt;Month-Day&lt;/span&gt; WeekNumber Year&lt;/code&gt;&lt;/div&gt;
&lt;div class="line"&gt;“时间的感知与分析”阐述对时间的认知方法论以奠定高效利用和有效掌控时间的基础。&lt;/div&gt;
&lt;div class="line"&gt;“工欲善其事必先利其器”，接下来的问题便是时间管理的工具。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id9"&gt;时间管理的三件武器&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;无论是手机的android系统还是Linux系统，都提供两项基本的时间管理工具日历(calendar)
and 时钟(clock). Calendar是date地图，提供全景式的鸟瞰图；
clock是指南针，指导具体的每一步应该迈向何处。
二者的结合形成第三个工具datetime。&lt;/p&gt;
&lt;p&gt;工具虽然简单，但如果不能抽象到认知的层面，则不能为己所用。试问，谁手机里没个日历，每个钟表呢。认知层面的结论是需要且仅需要这三件工具O(∩_∩)O。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;日历提供全景式鸟瞰&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-1"&gt;&lt;/a&gt;$ ncal -B &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;#ncal中的n竟然是new这个单词&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-2"&gt;&lt;/a&gt;    February &lt;span class="m"&gt;2019&lt;/span&gt;     March &lt;span class="m"&gt;2019&lt;/span&gt;        April &lt;span class="m"&gt;2019&lt;/span&gt;        May &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-3"&gt;&lt;/a&gt;Su      &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt;     &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;        &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-4"&gt;&lt;/a&gt;Mo     &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;      &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-5"&gt;&lt;/a&gt;Tu      &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;        &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;        &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-6"&gt;&lt;/a&gt;We     &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;      &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-7"&gt;&lt;/a&gt;Th      &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;        &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;      &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-8"&gt;&lt;/a&gt;Fr       &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;15&lt;/span&gt;   &lt;span class="m"&gt;22&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;       &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-9"&gt;&lt;/a&gt;Sa  &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;       &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时钟实施具体的测量&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_9ffe068b2b0847b5a3503e58fc89d81e-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; sleep 10real    0m10.011suser    0m0.002ssys     0m0.001s
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime整合二者，提供更加实用的功能&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b22cd1426a8644e486e48c600b5d6901-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#贸易战倒计时&lt;/span&gt;
&lt;a name="rest_code_b22cd1426a8644e486e48c600b5d6901-2"&gt;&lt;/a&gt;$ &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"America/New_York"&lt;/span&gt; date &lt;span class="c1"&gt;#美东夏季时间， 第十个变量时区。&lt;/span&gt;
&lt;a name="rest_code_b22cd1426a8644e486e48c600b5d6901-3"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:04:30 EDT &lt;span class="m"&gt;2019&lt;/span&gt;  &lt;span class="c1"&gt;#Eatern Daylight Timer&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id10"&gt;Python中的时间管理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以calendar,
clock(time),datetime与十个时间变量为基础，审视python的&lt;code class="docutils literal"&gt;calendar&lt;/code&gt;,
&lt;code class="docutils literal"&gt;time&lt;/code&gt;, and &lt;code class="docutils literal"&gt;datetime&lt;/code&gt;&lt;/p&gt;
&lt;div class="section" id="calender"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id11"&gt;1. Calender&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/calendar.html"&gt;calendar — General calendar-related
functions&lt;/a&gt; &lt;a class="reference external" href="https://pymotw.com/3/calendar/index.html"&gt;calendar
— Work with Dates — PyMOTW
3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python中的calendar十个无关紧要的工具，没有人会费力不讨好的到这里查看日期和规划日程。&lt;/p&gt;
&lt;pre class="literal-block"&gt;class TextCalendar(Calendar)
 |  TextCalendar(firstweekday=0)
In [326]: cal = calendar.TextCalendar(calendar.MONDAY)       #周一作为一周的起始点
In [327]: cal.prmonth(2019, 5)
      May 2019
Mo Tu We Th Fr Sa Su
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31
In [328]: cal.pryear(2019)
                                  2019
      January                                   February                                    March
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
    1  2  3  4  5  6                   1  2  3                                           1  2  3
 7  8  9 10 11 12 13           4  5  6  7  8  9 10                            4  5  6  7  8  9 10
14 15 16 17 18 19 20      11 12 13 14 15 16 17              11 12 13 14 15 16 17
21 22 23 24 25 26 27      18 19 20 21 22 23 24             18 19 20 21 22 23 24
28 29 30 31                       25 26 27 28                                  25 26 27 28 29 30 31
# 只了解下TextCalendar, pryear, prmonth&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="time"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id12"&gt;2. Time&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/time.html#module-time"&gt;time — Time access and
conversions&lt;/a&gt;
&lt;a class="reference external" href="https://pymotw.com/3/calendar/index.html"&gt;calendar — Work with Dates — PyMOTW
3&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;与epoch time的相互转换&lt;/p&gt;
&lt;p&gt;Use the following functions to convert between time representations:
人以minutes计时， 机器以second计时。&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;From&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;To&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Use&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in UTC&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`gmtime()&lt;/code&gt; &amp;lt;https:
//docs.python.org/3/l
ibrary/time.html#time
.gmtime&amp;gt;`__&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in local time&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`localtime()&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.localtime&amp;gt;`__&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in UTC&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id3"&gt;&lt;span class="problematic" id="id4"&gt;``&lt;/span&gt;&lt;/a&gt;&lt;cite&gt;calendar.timegm()&lt;/cite&gt;
` &amp;lt;&lt;a class="reference external" href="https://docs.pytho"&gt;https://docs.pytho&lt;/a&gt;
n.org/3/library/calen
dar.html#calendar.tim
egm&amp;gt;`__&lt;/p&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 120); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline literal start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in local time&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`mktime()&lt;/code&gt; &amp;lt;https:
//docs.python.org/3/l
ibrary/time.html#time
.mktime&amp;gt;`__&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class="literal-block"&gt;#seconds to  timetuple
In [8]: time.localtime() #local time
Out[8]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=15, tm_hour=20, tm_min=4, tm_sec=17, tm_wday=2, tm_yday=135, tm_isdst=0)

In [9]: time.gmtime() #UTC time
Out[9]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=15, tm_hour=12, tm_min=4, tm_sec=31, tm_wday=2, tm_yday=135, tm_isdst=0)

In [11]: time.gmtime(100)  #
Out[11]: time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=1, tm_sec=40, tm_wday=3, tm_yday=1, tm_isdst=0)
#timetuple to seconds
In [17]: calendar.timegm(time.gmtime()) #UTC time
Out[17]: 1557922318
In [18]: time.mktime(time.localtime()) #Local time
Out[18]: 1557922368.0&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第十一个-时间变量 &lt;code class="docutils literal"&gt;tm_isdst&lt;/code&gt; daylight saving time夏季时间&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_094a698ef79c436f9b86651afbf22bc2-1"&gt;&lt;/a&gt;gmtime&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt; -&amp;gt;time.struct_time,  &lt;span class="o"&gt;(&lt;/span&gt;strptime, localtime&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_094a698ef79c436f9b86651afbf22bc2-2"&gt;&lt;/a&gt;    gmtime&lt;span class="o"&gt;([&lt;/span&gt;seconds&lt;span class="o"&gt;])&lt;/span&gt; -&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;tm_year, tm_mon, tm_mday, tm_hour, tm_min,
&lt;a name="rest_code_094a698ef79c436f9b86651afbf22bc2-3"&gt;&lt;/a&gt;                           tm_sec, tm_wday, tm_yday, tm_isdst&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Processor Time and Timer&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-1"&gt;&lt;/a&gt;time.process_time&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#cpu time  of kernel and user-space&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-2"&gt;&lt;/a&gt;time.process_time_ns&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;int &lt;span class="c1"&gt;#not inclue sleep time&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-3"&gt;&lt;/a&gt;time.perf_counter&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;float
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-4"&gt;&lt;/a&gt;time.perf_counter_ns&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt; int
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-5"&gt;&lt;/a&gt;time.thread_time&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;float
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-6"&gt;&lt;/a&gt;time.thread_time_ns&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;int
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-7"&gt;&lt;/a&gt;time.time&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-8"&gt;&lt;/a&gt;time.time_ns&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-9"&gt;&lt;/a&gt;time.sleep
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-10"&gt;&lt;/a&gt;time.monotonic&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-11"&gt;&lt;/a&gt;time.monotonic_ns&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Timezone Constants&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-1"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.daylight
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-2"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-3"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.tzname
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-4"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CST'&lt;/span&gt;, &lt;span class="s1"&gt;'CST'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-5"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.altzone
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-6"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: -28800
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两个重要的methods&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_232b38deadda42eb9e8aa330e957a7f4-1"&gt;&lt;/a&gt;time.strptime&lt;span class="o"&gt;(&lt;/span&gt;string, format&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_232b38deadda42eb9e8aa330e957a7f4-2"&gt;&lt;/a&gt;time.strftime&lt;span class="o"&gt;(&lt;/span&gt;format&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctime&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-1"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.asctime&lt;span class="o"&gt;(&lt;/span&gt;time.localtime&lt;span class="o"&gt;())&lt;/span&gt;
&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-2"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="s1"&gt;'Wed May 15 21:05:27 2019'&lt;/span&gt;
&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-3"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.ctime&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-4"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="s1"&gt;'Wed May 15 21:05:32 2019'&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="datetime"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id13"&gt;3. Datetime&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;复习calendar(date), clock(time)的逻辑，先看两个没用的函数。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pymotw.com/3/datetime/index.html"&gt;datetime — Date and Time Value Manipulation — PyMOTW
3&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;datetime.date()&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="err"&gt;就是符号&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;x返回的内容&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-2"&gt;&lt;/a&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;135&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;135&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;136&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;136&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime.time()&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;符号&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;X返回的内容&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-2"&gt;&lt;/a&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;microsecond&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="p"&gt;]]]]])&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;#5个参数,由大到小排列&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;  &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzutc&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s2"&gt;:%S:%M:%H %Z"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'999999:30:15:06 UTC'&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolution&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;microseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#精确度&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime.datetime&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#前面两个datetime.time and datetime.date没啥用.&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#这里的关键是第十个时间变量tzinfo&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-4"&gt;&lt;/a&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;microsecond&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="p"&gt;]]]]])&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;Help&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;week&lt;/span&gt; &lt;span class="n"&gt;represented&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Monday&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;Sunday&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gettz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Asia/Shanghai"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;421561&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tzfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/usr/share/zoneinfo/Asia/Shanghai'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-13"&gt;&lt;/a&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;208&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timetuple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;208&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;struct_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tm_year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_sec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_wday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_yday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;129&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_isdst&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime.timedelta and Arithmetic Opertions&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;microseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weeks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;219&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;219&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;910880&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="s2"&gt;"1 days ago"&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;Wed&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="n"&gt;CST&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-6"&gt;&lt;/a&gt; &lt;span class="c1"&gt;#转换为seconds的另外一种写法&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'0:01:40'&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%H:%M:%S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gmtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'00:50:00'&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="shell"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id14"&gt;Shell的时间管理工具&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="calendar"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id15"&gt;1.Calendar&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;$ ncal -1
$ ncal -M #Monday as the first day
$ ncal -w #weeknumber
$ncal -y -m;
$ncal -d yyyy-mm
$ncal yyyy-mm-dd#highlight the current date
$ ncal -A3 -B4
#就只有这么多操作&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="clock-time"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id16"&gt;2.Clock(Time)&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hwclock&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-1"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: !sudo hwclock
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-2"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;-05-15 &lt;span class="m"&gt;21&lt;/span&gt;:25:29.514803+08:00
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-3"&gt;&lt;/a&gt;---------------------------------------------------
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-4"&gt;&lt;/a&gt;NAME
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-5"&gt;&lt;/a&gt;       hwclock - &lt;span class="nb"&gt;time&lt;/span&gt; clocks utility
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-6"&gt;&lt;/a&gt;FILES
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-7"&gt;&lt;/a&gt;       /etc/adjtime
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-8"&gt;&lt;/a&gt;              The configuration and state file &lt;span class="k"&gt;for&lt;/span&gt; hwclock.
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-9"&gt;&lt;/a&gt;       /etc/localtime
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-10"&gt;&lt;/a&gt;              The system timezone file
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-11"&gt;&lt;/a&gt;       /usr/share/zoneinfo/
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-12"&gt;&lt;/a&gt;              The system timezone database directory.
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-13"&gt;&lt;/a&gt;       Device files hwclock may try &lt;span class="k"&gt;for&lt;/span&gt; Hardware Clock access:
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-14"&gt;&lt;/a&gt;       /dev/rtc0
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-15"&gt;&lt;/a&gt;       /dev/rtc
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-16"&gt;&lt;/a&gt;       /dev/misc/rtc
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-17"&gt;&lt;/a&gt;       /dev/efirtc
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-18"&gt;&lt;/a&gt;       /dev/misc/efirtc
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;time (processing profile)&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-1"&gt;&lt;/a&gt;    $ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;tree  /usr/share/zoneinfo &lt;span class="p"&gt;|&lt;/span&gt; grep -i &lt;span class="s2"&gt;"prc"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-2"&gt;&lt;/a&gt;    │   ├── Chongqing -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-3"&gt;&lt;/a&gt;    │   ├── Chungking -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-4"&gt;&lt;/a&gt;    │   ├── Harbin -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-5"&gt;&lt;/a&gt;    │   ├── Shanghai -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-6"&gt;&lt;/a&gt;    │   │   ├── Chongqing -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-7"&gt;&lt;/a&gt;    │   │   ├── Chungking -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-8"&gt;&lt;/a&gt;    │   │   ├── Harbin -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-9"&gt;&lt;/a&gt;    │   │   ├── Shanghai -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-10"&gt;&lt;/a&gt;    │   ├── PRC -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-11"&gt;&lt;/a&gt;    ├── PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-12"&gt;&lt;/a&gt;    │   │   ├── Chongqing -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-13"&gt;&lt;/a&gt;    │   │   ├── Chungking -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-14"&gt;&lt;/a&gt;    │   │   ├── Harbin -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-15"&gt;&lt;/a&gt;    │   │   ├── Shanghai -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-16"&gt;&lt;/a&gt;    │   ├── PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-18"&gt;&lt;/a&gt;    real    0m0.017s
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-19"&gt;&lt;/a&gt;    user    0m0.015s
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-20"&gt;&lt;/a&gt;    sys     0m0.004s
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-22"&gt;&lt;/a&gt;&lt;span class="m"&gt;3&lt;/span&gt;.Datetime
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;span id="datetime-1"&gt;&lt;/span&gt;&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id17"&gt;3.Datetime&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;timedatectl&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#systemd的service&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-2"&gt;&lt;/a&gt;$ timedatectl
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-3"&gt;&lt;/a&gt;               Local time: Thu &lt;span class="m"&gt;2019&lt;/span&gt;-05-09 &lt;span class="m"&gt;21&lt;/span&gt;:30:27 CST
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-4"&gt;&lt;/a&gt;           Universal time: Thu &lt;span class="m"&gt;2019&lt;/span&gt;-05-09 &lt;span class="m"&gt;13&lt;/span&gt;:30:27 UTC
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-5"&gt;&lt;/a&gt;                 RTC time: Thu &lt;span class="m"&gt;2019&lt;/span&gt;-05-09 &lt;span class="m"&gt;13&lt;/span&gt;:30:27
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-6"&gt;&lt;/a&gt;                Time zone: Asia/Shanghai &lt;span class="o"&gt;(&lt;/span&gt;CST, +0800&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-7"&gt;&lt;/a&gt;System clock synchronized: yes
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-8"&gt;&lt;/a&gt;              NTP service: active
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-10"&gt;&lt;/a&gt; - Check the current system clock time:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-11"&gt;&lt;/a&gt;   timedatectl
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-12"&gt;&lt;/a&gt; - Set the &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; of the system clock directly:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-13"&gt;&lt;/a&gt;   timedatectl set-time &lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="s2"&gt;"yyyy-MM-dd hh:mm:ss"&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-15"&gt;&lt;/a&gt; - List available timezones:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-16"&gt;&lt;/a&gt;   timedatectl list-timezones
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-18"&gt;&lt;/a&gt; - Set the system timezone:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-19"&gt;&lt;/a&gt;   timedatectl set-timezone &lt;span class="o"&gt;{{&lt;/span&gt;timezone&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-21"&gt;&lt;/a&gt; - Enable Network Time Protocol &lt;span class="o"&gt;(&lt;/span&gt;NTP&lt;span class="o"&gt;)&lt;/span&gt; synchronization:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-22"&gt;&lt;/a&gt;   timedatectl set-ntp on
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;date (最趁手的一个工具)&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 日常应用date作为思考工具.&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-2"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.time&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-3"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;1557406444&lt;/span&gt;.1336956
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-4"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: !date +%s
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-5"&gt;&lt;/a&gt;&lt;span class="m"&gt;1557406449&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-6"&gt;&lt;/a&gt;$ date -d @&lt;span class="k"&gt;$(&lt;/span&gt;date +%s&lt;span class="k"&gt;)&lt;/span&gt;　&lt;span class="c1"&gt;#date -d @1557406449&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-7"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:11:15 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#基本的操作&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-10"&gt;&lt;/a&gt;$ date -u +&lt;span class="s2"&gt;"%Y-%m-%dT%H:%M:%SZ"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-11"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;-05-09T12:55:31Z
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#Future date and time&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-14"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;" two weeks"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-15"&gt;&lt;/a&gt;date: invalid date ‘ two weeks’
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-16"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"2 weeks"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-17"&gt;&lt;/a&gt;Thu May &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:20:17 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-18"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"next fri"&lt;/span&gt; &lt;span class="c1"&gt;#只有两个变量能够以文字表述 Month and Weekday&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-19"&gt;&lt;/a&gt;Fri May &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:00:00 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#the elpased date and time&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-22"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"last thursday"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-23"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:00:00 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-24"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"2 days ago"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-25"&gt;&lt;/a&gt;Tue May  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:22:28 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-26"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"last month"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-27"&gt;&lt;/a&gt;Tue Apr  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:22:39 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-29"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#贸易战倒计时&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-30"&gt;&lt;/a&gt;$ &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"America/New_York"&lt;/span&gt; date
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-31"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:04:30 EDT &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="emacs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id18"&gt;Emacs中的时间管理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;….&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id19"&gt;总结&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;时间管理的三个工具, time, datetime, calendar(从微观到宏观处理5, 8,
10个时间变量)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our units of temporal measurement, from seconds on up to months, are
so complicated, asymmetrical and disjunctive so as to make coherent
mental reckoning in time all but impossible. Indeed, had some
tyrannical god contrived to enslave our minds to time, to make it all
but impossible for us to escape subjection to sodden routines and
unpleasant surprises, he could hardly have done better than handing
down our present system. It is like a set of trapezoidal building
blocks, with no vertical or horizontal surfaces, like a language in
which the simplest thought demands constructions, useless particles
and lengthy circumlocutions. Unlike the more successful patterns of
language and science, which enable us to face experience boldly or at
least level-headedly, our system of temporal calculation silently and
persistently encourages our terror of time.&lt;/p&gt;
&lt;p&gt;… It is as though architects had to measure length in feet, width in
meters and height in ells; as though basic instruction manuals
demanded a knowledge of five different languages. It is no wonder
then that we often look into our own immediate past or future, last
Tuesday or a week from Sunday, with feelings of helpless confusion. …&lt;/p&gt;
&lt;p class="attribution"&gt;—Robert Grudin, Time and the Art of Living.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈哈～，神吐槽。因此需要将so complicated, asymmetrical and disjunctive
抽象为calender, time, datetime。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id20"&gt;参考资料&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;GNU Coreutils: Date input
formats &amp;lt;https://www.gnu.org/software/coreutils/manual/html_node/Date-input-formats.html#Date-input-formats&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>emacs</category><category>python</category><category>time</category><category>时间管理</category><guid>https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/</guid><pubDate>Wed, 15 May 2019 12:53:29 GMT</pubDate></item><item><title>时间变量的顺序与格式</title><link>https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id1" id="id4"&gt;时间的感知&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#cron" id="id5"&gt;Cron中时间变量的顺序&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id2" id="id6"&gt;时间的格式&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id3" id="id7"&gt;总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id4"&gt;时间的感知&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;直觉对时间的感知, 是按照怎么的顺序解析的呢?
从早晨起床这个场景中,分析大脑解析时间的顺序.&lt;/p&gt;
&lt;p&gt;似乎理所当然的一点,Hour(时)排在最前面,Hour:Minute的组合是醒来后第一时间想要获得的信息,以判断上班是否迟到,是否有时间吃早餐?但是再想一层,上班是否迟到?
在处理Hour:Minute之前,潜意识已经先获取并处理完了一个信息:今天是周几?(Weekday).如果是周末的话,几点几分起床并不特别重要.
因此,最先处理的三个变量是Weekday Hour:Minutes&lt;/p&gt;
&lt;p&gt;再看日期,Month-Day,哪个变量在前呢?
如果day在前,则是冗余信息,因为已经weekday在先.
解析日期,首先获取Month,以判断一年的进度,获得当前时间在一年中所处的位置,比如May的含义是一年已经将半.
日期的顺序是Month-Day&lt;/p&gt;
&lt;p&gt;还有变量week number,是对一年进度的另外一种表示.&lt;/p&gt;
&lt;p&gt;最后是Year&lt;/p&gt;
&lt;p&gt;综上, 直觉解析时间的顺序为:
&lt;code class="docutils literal"&gt;Weekday Hour:Minute &lt;span class="pre"&gt;Month-Day&lt;/span&gt; WeekNumber Year&lt;/code&gt;,
要事第一,最重要的信息是Weekday. 合计8个变量, 命名为intuitive time(or
intelligent time)简写为itime&lt;/p&gt;
&lt;p&gt;这也是CTIME时间格式的理念.&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [2]: time.ctime()
Out[2]: 'Wed May 15 08:29:38
[3]:!date
Wed May 15 08:31:45 CST 2019&lt;/pre&gt;
&lt;p&gt;ctime将weekday安排在最前面,然后遵循这个先处理日期的逻辑,May:15跟在后面提高日期的精确颗粒度.但是对大脑的瞬间思考而言,则是冗余信息.因此以itime作为基石,推导拓展到其他时间顺序.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cron"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id5"&gt;Cron中时间变量的顺序&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The sequence matters. 时间变量顺序的第一个应用场景是cron.&lt;/p&gt;
&lt;p&gt;Cron的顺序是Minute:Hour Day:Month Weekday&lt;/p&gt;
&lt;pre class="literal-block"&gt;# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
# │ │ │ │ │                                   7 is also Sunday on some systems)
# │ │ │ │ │
# │ │ │ │ │
# * * * * * command to execute&lt;/pre&gt;
&lt;p&gt;大脑长于处理模糊宏观的信息,而机器专于精确的信息,将最小的时间单位排在前面,是倒排的ctime.应用的时候也只需要将思考倒叙.&lt;/p&gt;
&lt;p&gt;cron将minute作为最小单位和第一顺序是因为crond按分钟扫描,可见从性能经济性的角度考虑,对大脑和对机器,
秒都是可以忽略的,不然会浪费大量的资源．&lt;/p&gt;
&lt;p&gt;接下来讨论一个问题: 在感知上, minutes:hours 与hours:minutes有何差异呢？&lt;/p&gt;
&lt;p&gt;minutes:hours的顺序，是将精力关注到一个小时之内，比如六点十五=15:06=表达出来是，在从6点到７点这一个小时的时间段内，已经过去了15分钟，知道现在已经消费了一个小时的四分之一(1/4)，接下来就会自然的发问，按照这个进度，等一个小时结束能完成多少工作．
而hours:minutes的顺序，是关注在一天之内，比如=06:15=表达的是，现在是早上时间(6/24)，一天之计在于晨，后面的分钟15只是作为辅助．
总结：hour:minutes(6:15)关注的是一天之内，而minute:hour关注的是一个小时之内，以一个小时为单位做计划和考核产出．&lt;/p&gt;
&lt;p&gt;在直觉上采用哪一个作为基础,等更多的应用总结后,再行确定.暂时采用Hour:Minute的格式,因为minute:hour消耗更多大脑内存和计算资源.&lt;/p&gt;
&lt;p&gt;总结, cron是写给机器读的,对象是机器,因此将ctime倒叙.&lt;/p&gt;
&lt;p&gt;需要记住时间顺序的另外一个应用场景是=journalctl=&lt;/p&gt;
&lt;pre class="literal-block"&gt;journalctl --since  “YYYY-MM-DD HH:MM:SS” --until “YYYY-MM-DD HH:MM:SS”&lt;/pre&gt;
&lt;p&gt;从宏观到微观,从模糊到精确,这是写给人用的时间格式,也是ISO的标准时间格式.&lt;/p&gt;
&lt;p&gt;引用一段话:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your computer is not a lifeless piece of machinery. It is a dynamic
tool that interacts with your very thought processes. Whenever you
use a computer it becomes, for better or for worse, an extension of
your mind.&lt;/p&gt;
&lt;p&gt;This means that, whenever you use a Unix or Linux system, you are
forging a mental relationship with some of the smartest, most
accomplished (and satisfied) programmers and computer scientists who
ever lived. Such a partnership can't help but have a positive effect
on you.&lt;/p&gt;
&lt;p&gt;As you do, your mind will change for the better, your thought
processes will improve, and your way of looking at the world and at
yourself will change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id6"&gt;时间的格式&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以Cron的5个时间变量顺序为基础分析时间表示的格式, 前面加上second+(minute,
hour day, month weekday)后面补充year and weeknumber.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;时间的格式以C, python采用的unix strftime格式为准.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="literal-block"&gt;|-------------+----------+----------+---------------------+-----------------+-------------------+---------------------+---------------+---------|
| 时间变量    | 1.second | 2.minute | 3.hour              | 4.day           | 5.month           | 6.weekday           | 7.week number | 8.year  |
|-------------+----------+----------+---------------------+-----------------+-------------------+---------------------+---------------+---------|
| 常规符号    | %S 01    | %M 01    | %H 23               | %d 01           | %m 01             | %w (0-6)            | %W            | %y 19   |
| 简单扩展    |          |          | %I (12-hour), %p AM |                 |                   |                     |               | %Y 2019 |
| 文字描述    |          |          |                     |                 | %b Oct, %BOctober | %a Thu, %A Thursday |               |         |
| Obscure扩展 | %f 微秒  |          |                     | % e 1~31 %j 366 |                   | %u(1~7)             | %V %U         | %G 2019 |
|-------------+----------+----------+---------------------+-----------------+-------------------+---------------------+---------------+---------|&lt;/pre&gt;
&lt;p&gt;分析:&lt;/p&gt;
&lt;p&gt;第一行, 钟表时间全部为大写, 日期时间全部为小写,
WeekNumber大写%W与weekday %w相区分; 第二行, 简单扩展, %H是24小时制,
H后面的字母是I,因此用%I表示12小时制,同时%p(postnoon)标注上下午;
大写的%Y表示四位数字的年2019; 第三行, 文字描述,只有两个变量能以文字描述,
weekday和month, 分别用A, B表示.weekday %A还是第一重要的.&lt;/p&gt;
&lt;p&gt;前三行是常规的表示.&lt;/p&gt;
&lt;p&gt;第四行, obscure扩展, 微秒的表示应该是从剩余可选字母中随机确定的,
%f(fly飞逝),和数日子day 366 %j , %e空格padding. weekday与weekNumber在u,
v, w这三个字母上打转, 小写是weekday大写是weekNumber.&lt;/p&gt;
&lt;p&gt;总结: 按照表格前三行可以在一秒钟内永久性记忆, 日常的书写也采用该格式.
日如ctime &lt;code class="docutils literal"&gt;%a %b %d &lt;span class="pre"&gt;%H:%M:%S&lt;/span&gt; %Y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Timezone的表示&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [7]: !date +"%z"   #UTC offset
+0800
In [8]: !date +"%Z"
CST #China Standard Time&lt;/pre&gt;
&lt;p&gt;快捷方式的format&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In [10]: datetime.now().strftime("%c")      #Locale’s appropriate date and time representation.
Out[10]: 'Thu May  9 11:48:33 2019 #这个格式将weekday放在了前面, 也就是 %a %b的形式.
In [11]: datetime.now().strftime("%x")      #Locale’s appropriate date representation
Out[11]: '05/09/19'
In [12]: datetime.now().strftime("%X")
Out[12]: '11:49:06'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id7"&gt;总结&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;10个时间变量,将时区放置在最后.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;%f:%S:%M:%H %d-%m %w %W %Y %Z 日常的书写,使用符号替代minute, hour等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时间格式的的标准：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;ISO 8601 - Wikipedia &amp;lt;https://en.wikipedia.org/wiki/ISO_8601&amp;gt;&lt;/cite&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;W3C DTF &amp;lt;https://www.w3.org/TR/NOTE-datetime&amp;gt;&lt;/cite&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RFC 822(as updated by RFC 1123)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;RFC 2822 - Internet Message Format &amp;lt;https://tools.ietf.org/html/rfc2822.html&amp;gt;&lt;/cite&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>python</category><category>time</category><guid>https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/</guid><pubDate>Mon, 13 May 2019 09:38:19 GMT</pubDate></item><item><title>Re.sub参数顺序的问题</title><link>https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id1" id="id4"&gt;提出问题&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id2" id="id5"&gt;分析问题&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id3" id="id6"&gt;总结:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id4"&gt;提出问题&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在写 &lt;code class="docutils literal"&gt;re.sub&lt;/code&gt; 或者 &lt;code class="docutils literal"&gt;re.subn&lt;/code&gt; 的时候, 常常会不太确定引用参数的顺序,
需要中断的时间查看提示或者help文档. 比如  &lt;code class="docutils literal"&gt;trade war&lt;/code&gt;
修改为 &lt;code class="docutils literal"&gt;trade negotiation&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"war"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"negotiation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"trade war"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'trade negotiation'&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#首先处理regex-pattern&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id5"&gt;分析问题&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与 &lt;code class="docutils literal"&gt;string.methods&lt;/code&gt; 比较. &lt;code class="docutils literal"&gt;pattern&lt;/code&gt;
是与source(input&lt;sub&gt;string&lt;/sub&gt;)的匹配的内容,
repl是修改后的内容(destination), 这里顺序与=str.replace=是一致.&lt;/p&gt;
&lt;pre class="literal-block"&gt;replace(self, old, new, count=-1, /)&lt;/pre&gt;
&lt;p&gt;old 来自source, new是输出到destination结果中.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d8b4edb0986e4cb1b43d6f9d5b71acf5-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s2"&gt;"trade war"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"war"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"negotiation"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d8b4edb0986e4cb1b43d6f9d5b71acf5-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'trade negotiation'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;sed&lt;/code&gt; 也遵循同样的模式.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-1"&gt;&lt;/a&gt;s/regexp/replacement/
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-2"&gt;&lt;/a&gt;       Attempt  to  match  regexp  against  the  pattern  space.   If successful, replace that portion matched with
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-3"&gt;&lt;/a&gt;       replacement.  The replacement may contain the special character &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; to refer to that portion  of  the  pattern
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-4"&gt;&lt;/a&gt;       space  which  matched,  and  the  special  escapes &lt;span class="se"&gt;\1&lt;/span&gt; through &lt;span class="se"&gt;\9&lt;/span&gt; to refer to the corresponding matching sub-
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-5"&gt;&lt;/a&gt;       expressions in the regexp.
&lt;/pre&gt;&lt;p&gt;regex-pattern匹配 source 数据中的内容,
replacement则是替换后输出到destination结果中.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_5b9b3e0d70ba433f81740d71a242d342-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'trade war'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;"s/war/negotiation/g"&lt;/span&gt;
&lt;a name="rest_code_5b9b3e0d70ba433f81740d71a242d342-2"&gt;&lt;/a&gt;trade negotiation
&lt;/pre&gt;&lt;p&gt;其他的Text Processing&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"trade-war"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s2"&gt;"-"&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-2"&gt;&lt;/a&gt;trade
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-3"&gt;&lt;/a&gt;war
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-4"&gt;&lt;/a&gt;   tr &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... SET1 &lt;span class="o"&gt;[&lt;/span&gt;SET2&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;SET1 is from the source, SET2 is the result of the destination after
been processed.&lt;/p&gt;
&lt;p&gt;总结这种模式和思维惯例:&lt;/p&gt;
&lt;pre class="literal-block"&gt;function source destination&lt;/pre&gt;
&lt;p&gt;Text Processing如此,&lt;/p&gt;
&lt;p&gt;File Handling的utilities遵循同样的模式.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-1"&gt;&lt;/a&gt;mv &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... SOURCE... DIRECTORY
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-2"&gt;&lt;/a&gt;cp &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... &lt;span class="o"&gt;[&lt;/span&gt;-T&lt;span class="o"&gt;]&lt;/span&gt; SOURCE DEST
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-3"&gt;&lt;/a&gt;ln &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... Source... DIRECTORY
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-4"&gt;&lt;/a&gt;rsync &lt;span class="o"&gt;[&lt;/span&gt;OPTION...&lt;span class="o"&gt;]&lt;/span&gt; SRC... &lt;span class="o"&gt;[&lt;/span&gt;DEST&lt;span class="o"&gt;]&lt;/span&gt;
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-5"&gt;&lt;/a&gt;scp  SRC... DEST
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-6"&gt;&lt;/a&gt;dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/&lt;span class="o"&gt;{{&lt;/span&gt;source_drive&lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/&lt;span class="o"&gt;{{&lt;/span&gt;dest_drive&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;例外的情况是tar. =tar=是将目标放在前面.&lt;/p&gt;
&lt;p&gt;再回头看 &lt;code class="docutils literal"&gt;re.sub&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#扩展后&lt;/span&gt;
&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern_from_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replacement_to_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;三个参数中 &lt;code class="docutils literal"&gt;pattern_from_source&lt;/code&gt;, &lt;code class="docutils literal"&gt;replacement_to_result&lt;/code&gt; ,
&lt;code class="docutils literal"&gt;source_data&lt;/code&gt;
的最后一个是=source&lt;sub&gt;data&lt;/sub&gt;&lt;code class="docutils literal"&gt;, 将source放置在最后. =grep&lt;/code&gt; 与
=sed=都遵循同样的模式&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c56fdbba928b444dbc4aca82ff26de98-1"&gt;&lt;/a&gt;sed &lt;span class="s1"&gt;'s/{{regex}}/{{replace}}/'&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt;filename&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;a name="rest_code_c56fdbba928b444dbc4aca82ff26de98-2"&gt;&lt;/a&gt;grep &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt; -e PATTERN ... &lt;span class="o"&gt;[&lt;/span&gt;FILE...&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#grep regex source&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;例外的情况是=find=&lt;/p&gt;
&lt;pre class="literal-block"&gt;find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]
find [Option] source pattern&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id6"&gt;总结:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Data Stream Processing和File Handling遵循 &lt;code class="docutils literal"&gt;subroutine src dst&lt;/code&gt;
模式.两个例外的情况是=tar and find=&lt;/p&gt;
&lt;p&gt;这个问题之所以值得探讨,是因为涉及底层的方法论和工作模式.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>python</category><category>regex</category><guid>https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/</guid><pubDate>Wed, 08 May 2019 09:17:55 GMT</pubDate></item><item><title>Grokking 补码</title><link>https://alinbxsorcerer.github.io/posts/grokking-complement/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;基本概念&lt;/h2&gt;
&lt;p&gt;反码是个生造出来的概念． 所谓反码，英语里又叫ones' complement（对1求补） 所谓补码，英语里又叫two's complement（对2求补）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;＂模＂的概念&lt;/h2&gt;
&lt;p&gt;正式开讲首先灌输一个新的概念叫，模什么是“模”，想象日常使用的钟表，它可以显示0~12点的时间，假设现在是2点钟，请用手动拨动时针的方式将时间减4小时，你会怎么做？有两种方式：逆时针将时针拨4小时顺时针将时针拨8（12-4）小时这里要讲的是第二种方式，为什么顺时针拨12-4也可以达到和正常思维的第一种方式一样的位置。12就是模。同样的，如果是十进制的两位数，80-10 和 80+90在不考虑百位数的基础上都是70。这里的90就是100-10得来的，这种情况下100就是模模就好比是一个极限，在它的范围内，两个相加等于模的数互为补数，还是举100的例子90和10，55和45，68和32，互为补数在模的范围内做减法，可以将“X-Y”的减法变更为“X+Y的补数“的加法，当然前提是不考虑百位数思考题，上面举的例子是大数减小数，那么如果是小数减大数会怎么样呢？如果是10-80，结果应该是-70，但如果按照10+（100-80），结果是30。而很明显-70和30不是一回事，这里也没有百位数的问题，这种情况应该怎么破？当初的那些先贤们想出来的办法很简单，就是把这两个数直接划上等号，正好顺便解决了负数的表达方式。再来仔细看看这两个数的关系：-70绝对值的补数就正好是30所以在计算机中，负数的表达方式就是它绝对值的补数.&lt;/p&gt;
&lt;p&gt;但是问题又来了，看起来这个解决方式很完美了，但别忘了，30他已经代表了正数的30了，现在又要用来代表负数的-70，谁知道它出现的时候到底是代表哪个数？为了解决这个问题，需要给这套规则划定一个范围，原来是0~99的正数，现在既然要用部分正数来代替负数了，那就要规定一个范围来使得一个数只代表一个含义，正好一人一半，0～49这个区间就代表正数，50～99的区间就用来代表各自补数的负值.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;二进制数&lt;/h2&gt;
&lt;p&gt;现在回到二进制的计算机世界8位二进制数一共可以表示2的8次方，256个数，即0～255（别忘了0也要占一位的），他们的极限就是256，即256是8位二进制数的模 ，应该不难理解吧，同上十进制的两位数0～99的模是100。还是用二进制来说明清楚，8位二进制能表示的数的极限是1 1 1 1 1 1 1 1， 就是255，在这基础上加0 0 0 0 0 0 0 1，出现了进一位 即 1 0 0 0 0 0 0 0 0这个1 0 0 0 0 0 0 0 0就是8位二进制数的模，256同样按照第二步讲的逻辑，一半的数0～127，代表其正数本身，另一半的数128～255，代表其补数的负值，即“－1～-128”的区间。 而 “X－Y”的减法 就用 “X＋Y的补数” 的加法来表示，完美！ 唯一需要注意的事情是任何计算的输入值和输出结果值都需要严格遵守-128～127的范围，一旦溢出就会报错.这样一说是不是可以理解-128的补码是怎么来的了吧？ 他就是256-｜-128｜＝128二进制的128是不是就是1 0 0 0 0 0 0 0 ？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;傻帽的狂欢&lt;/h2&gt;
&lt;p&gt;空穴来风，未必无因那是因为计算机就是这样求负数的补码的，我们在键盘上敲一个负数的时候，计算机要把它用补码的形式存储下来，还记得上面我们讲的补码是怎么来的吗？模－绝对值，这是不是个减法公式？但计算机没有减法逻辑，我们费了那么大的劲搞了一套补码的规则就是为了用加法来替代减法，但为了实现这么套规则，却跨不过一个坎，就是把负数计算成补码仍然是需要减法逻辑的。怎么办呢，那些伟大的先贤们 （膜拜）就想出了这么个办法：首位不变，其余位取反后，再加一.&lt;/p&gt;
&lt;p&gt;下面是吐槽不知道是哪个书呆子教书，照搬了机器的逻辑，把取反加一的方法当做补码的计算逻辑就这么教下来了。搞笑的是，还保留了补码这个名字，照理说这种教法应该叫 取反加一码 更合理，你还补什么啊？ 不仅如此，还搞出了个首位符号位的说法，弄出了个正0负0，还用负0来充当-128，真是不把人弄疯不罢休啊！！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;参考资料：&lt;/h2&gt;
&lt;p&gt;链接：&lt;a class="reference external" href="https://www.zhihu.com/question/20458542/answer/40759880"&gt;https://www.zhihu.com/question/20458542/answer/40759880&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h2&gt;Publish&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_0c8ea68481954038b0bf206c4a3e042f-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; pandoc --wrap&lt;span class="o"&gt;=&lt;/span&gt;none  补数.org -o  ~/Public/nikola_post/posts/补数.rst
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>complement</category><guid>https://alinbxsorcerer.github.io/posts/grokking-complement/</guid><pubDate>Tue, 15 Jan 2019 12:53:29 GMT</pubDate></item><item><title>Regex Summary</title><link>https://alinbxsorcerer.github.io/posts/regex-summary/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="section" id="wildcards"&gt;
&lt;h2&gt;Wildcards&lt;/h2&gt;
&lt;p&gt;总结基本符号
&lt;code class="docutils literal"&gt;shopt &lt;span class="pre"&gt;-s&lt;/span&gt; gotglob.&lt;/code&gt;
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;*?[^]{}&lt;/span&gt;&lt;/code&gt; 记住这5种基本符号便可.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm"&gt;http://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Standard Wildcards (globbing patterns)&lt;/p&gt;
&lt;p&gt;? (question mark)&lt;/p&gt;
&lt;p&gt;this can represent any single character. If you specified something at the command line like "hd?" GNU/Linux would look for hda, hdb, hdc and every other letter/number between a-z, 0-9.&lt;/p&gt;
&lt;p&gt;[ ] (square brackets)&lt;/p&gt;
&lt;p&gt;specifies a range. If you did m[a,o,u]m it can become: mam, mum, mom if you did: m[a-d]m it can become anything that starts and ends with m and has any character a to d inbetween. For example, these would work: mam, mbm, mcm, mdm. This kind of wildcard specifies an “or” relationship (you only need one to match).&lt;/p&gt;
&lt;p&gt;{ } (curly brackets)&lt;/p&gt;
&lt;p&gt;terms are separated by commas and each term must be the name of something or a wildcard. This wildcard will copy anything that matches either wildcard(s), or exact name(s) (an “or” relationship, one or the other).&lt;/p&gt;
&lt;p&gt;For example, this would be valid:&lt;/p&gt;
&lt;p&gt;cp {&lt;strong&gt;.doc,&lt;/strong&gt;.pdf} ~&lt;/p&gt;
&lt;p&gt;This will copy anything ending with .doc or .pdf to the users home directory. Note that spaces are not allowed after the commas (or anywhere else).
[^] or [!]&lt;/p&gt;
&lt;p&gt;This construct is similar to the [ ] construct, except rather than matching any characters inside the brackets, it'll match any character, as long as it is not listed between the [ and ]. This is a logical NOT. For example rm myfile[!9] will remove all myfiles* (ie. myfiles1, myfiles2 etc) but won't remove a file with the number 9 anywhere within it's name.&lt;/p&gt;
&lt;p&gt;\ (backslash)&lt;/p&gt;
&lt;p&gt;is used as an "escape" character, i.e. to protect a subsequent special character. Thus, "\” searches for a backslash. Note you may need to use quotation marks and backslash(es).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="regex-new-map"&gt;
&lt;h2&gt;Regex New Map&lt;/h2&gt;
&lt;p&gt;#+caption Metacharacters&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 20%"&gt;
&lt;col style="width: 20%"&gt;
&lt;col style="width: 20%"&gt;
&lt;col style="width: 20%"&gt;
&lt;col style="width: 20%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Categories&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Counter&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;dot and
classes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;^.[^]$ or&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;capture and
repetation&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;()&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;* {}, +, ?&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;or + ? only
in ERE&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;back-refere
nce&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;dl class="field-list simple"&gt;
&lt;dt&gt;raw-latex&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 53)&lt;/p&gt;
&lt;p&gt;Field list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;cite&gt;n&lt;/cite&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Sum:&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这个Meta-class最成功的一点是将 back-reference放在里面.&lt;/p&gt;
&lt;p&gt;#+Intermediate topics&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;capturing&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;a(bc), a(?:bc),
a(?&amp;lt;foo&amp;gt;bc)
(?P&amp;lt;name&amp;gt;) (?P=name)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;python的格式&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;bracket&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;[a-z]&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;greedy and lazy&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&amp;lt;.+?&amp;gt;, &amp;lt;[^&amp;lt;&amp;gt;]+&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;#+Advanced topics&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;back-reference                    | \1, \?&amp;lt;foo&amp;gt;&amp;lt;foo&amp;gt; k for keyword  |&lt;/div&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 74)&lt;/p&gt;
&lt;p&gt;Line block ends without a blank line.&lt;/p&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 50%"&gt;
&lt;col style="width: 50%"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;look-ahead&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;d(?=r) look r's ahead,
从r前面找d, followed&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;look-behind&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;(?&amp;lt;=r)d 从r的后面找d,
d小于r的意思, 在其后, proceeded,
按照习惯大于等于写在前面&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Negotive operator&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;d(?!r) (?&amp;lt;!r)d (大括号代表方向.)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(?=r)注意这里的指向与format的指向是相反的.&lt;/p&gt;
&lt;p&gt;注意这里的三个flags&lt;/p&gt;
&lt;p&gt;#+name old map&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 17%"&gt;
&lt;col style="width: 17%"&gt;
&lt;col style="width: 17%"&gt;
&lt;col style="width: 17%"&gt;
&lt;col style="width: 17%"&gt;
&lt;col style="width: 17%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Scope&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Individua
l&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Group&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Repetitio
n&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Flags&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Basic
Regex&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;wide-card
dot: .&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;^$&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;* + ?&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;re.A
ASCII
only&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;character
-class:[]&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;:raw-late
x:&lt;cite&gt;b&lt;/cite&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;re.M
Multiple-
line&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Negating:
^&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;re.S dot
matches
all&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Range:
rang&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;re.X
verbose&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Extensive&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;`, ()   |
不需要escape |&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;? +&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(?P&amp;lt;name&amp;gt;…)&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Context of reference
to group “quote”&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Ways to reference it&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;——————————————————-&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—————————————–&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;in the same pattern
itself&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`(?P=quote)` as
shown&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`1`&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;when processing match
object &lt;strong&gt;m&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`m.group('quote')`&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`m.end('quote') `
(etc.)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;in a string passed to
the &lt;strong&gt;repl&lt;/strong&gt; argument
of `re.sub()`&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`g&amp;lt;quote&amp;gt;`&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;`g&amp;lt;1&amp;gt;`&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;\1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 需要注意的一点是, findall只返回匹配的group&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s1"&gt;'methods'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="s1"&gt;'search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'match'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'findall'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'finditer'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-3"&gt;&lt;/a&gt;                  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'split'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sub'&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="c1"&gt;#modify and replcae&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-4"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'match_object'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'group'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'groups'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'groupdict'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'end'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'span'&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-5"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Performing matches&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;findinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# module level functions&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#complilation Flags&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;DOTALL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;single&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;IGNORECASE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;MULTIPLELINE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#Modify strings&lt;/span&gt;
&lt;a name="rest_code_ab932327291f44429882db6305ffdfe0-13"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="regex-in-python"&gt;
&lt;h2&gt;Regex in Python&lt;/h2&gt;
&lt;p&gt;CLOSED: [2019-06-01 Sat 14:10]&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;:LOGBOOK:&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://stackoverflow.com/a/48207102/7301792"&gt;python's regex summary in stackoverflow&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://stackoverflow.com/a/10060065/7301792"&gt;what does P mean in (?&amp;lt;name&amp;gt;)&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/22937618/reference-what-does-this-regex-mean/22944075#22944075"&gt;regex collections&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://docs.python.org/3/howto/regex.html#regex-howto"&gt;python regex how to&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;Besides&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;performance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;Using&lt;/span&gt; &lt;span class="sb"&gt;`compile`&lt;/span&gt; &lt;span class="n"&gt;helps&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;distinguish&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;concepts&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-4"&gt;&lt;/a&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-5"&gt;&lt;/a&gt;&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-6"&gt;&lt;/a&gt;&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;   &lt;span class="c1"&gt;#重要的是我总结的三个概念. 三个层级.&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;python的特殊之处是在named&lt;/span&gt; &lt;span class="n"&gt;group上的纠结&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="n"&gt;learning&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#regex object&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;regex_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'[a-zA-Z]+'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#match object&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;match_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regex_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1.Hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#matching content&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;match_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'[a-zA-Z]+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'1.Hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-22"&gt;&lt;/a&gt;&lt;span class="n"&gt;As&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;complement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;made&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exhaustive&lt;/span&gt; &lt;span class="n"&gt;cheatsheet&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="sb"&gt;`re`&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-23"&gt;&lt;/a&gt;    &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-24"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'brackets'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s1"&gt;'single_character'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'[]'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'negate'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="err"&gt;试图从少到多去解析&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-25"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'capturing_group'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'()'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'(?:)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'(?!)'&lt;/span&gt; &lt;span class="s1"&gt;'|'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'backreferences and named group'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-26"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'repetition'&lt;/span&gt;      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'{}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'+?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'??'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'greedy v.s. lazy ?'&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-27"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'lookaround'&lt;/span&gt; &lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s1"&gt;'lookahead'&lt;/span&gt;  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'(?=...)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'(?!...)'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-28"&gt;&lt;/a&gt;               &lt;span class="s1"&gt;'lookbehind'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'(?&amp;lt;=...)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'(?&amp;lt;!...)'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-29"&gt;&lt;/a&gt;               &lt;span class="s1"&gt;'caputuring'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'(?P&amp;lt;name&amp;gt;...)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'(?P=name)'&lt;/span&gt;&lt;span class="err"&gt;这是应用&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'(?:)'&lt;/span&gt;&lt;span class="p"&gt;],},&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-30"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'escapes'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s1"&gt;'anchor'&lt;/span&gt;         &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-31"&gt;&lt;/a&gt;              &lt;span class="s1"&gt;'non_printable'&lt;/span&gt;   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\v&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-32"&gt;&lt;/a&gt;              &lt;span class="s1"&gt;'shorthand'&lt;/span&gt;       &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'\d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'\w'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'\s'&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-33"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'methods'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="s1"&gt;'search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'match'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'findall'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'finditer'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-34"&gt;&lt;/a&gt;                  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'split'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sub'&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="c1"&gt;#modify and replcae&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-35"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'match_object'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'group'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'groups'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'groupdict'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'end'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'span'&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-36"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-37"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Performing matches&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-38"&gt;&lt;/a&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;findinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-39"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# module level functions&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-40"&gt;&lt;/a&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-41"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#complilation Flags&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-42"&gt;&lt;/a&gt;&lt;span class="n"&gt;DOTALL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;single&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;IGNORECASE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;MULTIPLELINE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-43"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#Modify strings&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-44"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-45"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#Search and Replace&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-46"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'section{ (?P&amp;lt;name&amp;gt; [^}]* ) }'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-47"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'subsection{\1}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-48"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'subsection{First}'&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-49"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'subsection{\g&amp;lt;1&amp;gt;}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-50"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'subsection{First}'&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-51"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'subsection{\g&amp;lt;name&amp;gt;}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c8f7e5392ca346c98bf3f494e750e2c4-52"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'subsection{First}'&lt;/span&gt; &lt;span class="c1"&gt;#三种不同的形式.&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'section{ (?P&amp;lt;name&amp;gt; [^}]* ) }'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;res2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;res3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finditer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'section{First}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"He was carefully disguised but captured quickly by police."&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finditer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\w+ly"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%02d&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%02d&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_87f81b667fa342ee8358fd1b4ab513f2-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 这里关键的一点, 在sub中用的是Search&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="grep-examples"&gt;
&lt;h2&gt;Grep examples&lt;/h2&gt;
&lt;div class="section" id="remove-the-blank-lines"&gt;
&lt;h3&gt;Remove the blank lines&lt;/h3&gt;
&lt;pre class="code zsh"&gt;&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-1"&gt;&lt;/a&gt;Remove the blank lines.
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-2"&gt;&lt;/a&gt;$ grep . 2daygeek.txt
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-3"&gt;&lt;/a&gt;or
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-4"&gt;&lt;/a&gt;$ grep -Ev &lt;span class="s2"&gt;"^&lt;/span&gt;$&lt;span class="s2"&gt;"&lt;/span&gt; 2daygeek.txt
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-5"&gt;&lt;/a&gt;or
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-6"&gt;&lt;/a&gt;$ grep -v -e &lt;span class="s1"&gt;'^$'&lt;/span&gt; 2daygeek.txt
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-7"&gt;&lt;/a&gt;2daygeek.com is a best Linux blog to learn Linux.
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-8"&gt;&lt;/a&gt;It&lt;span class="s1"&gt;'s FIVE years old blog.&lt;/span&gt;
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-9"&gt;&lt;/a&gt;&lt;span class="s1"&gt;This website is maintained by Magesh M, it'&lt;/span&gt;s licensed under CC BY-NC &lt;span class="m"&gt;4&lt;/span&gt;.0.
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-10"&gt;&lt;/a&gt;He got two GIRL babes.
&lt;a name="rest_code_b06676fa3c5b4250bc2a4ac3c41cf4d4-11"&gt;&lt;/a&gt;Her names are Tanisha &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; Renusha.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="remove-lines-containing-logging"&gt;
&lt;h3&gt;Remove lines containing logging&lt;/h3&gt;
&lt;p&gt;[bash - Remove lines which contain 'logging' - Ask Ubuntu](&lt;a class="reference external" href="https://askubuntu.com/questions/1127589/remove-lines-which-contain-logging?noredirect=1#comment1866586_1127589"&gt;https://askubuntu.com/questions/1127589/remove-lines-which-contain-logging?noredirect=1#comment1866586_1127589&lt;/a&gt;)&lt;/p&gt;
&lt;pre class="literal-block"&gt;grep -v logging twoSum.py &amp;gt; logging-new
sed "/^\t$name/d" in-file
sed -i '/adf\.ly/d' inputfile&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sed"&gt;
&lt;h2&gt;Sed&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="remove-the-blank-lines-1"&gt;&lt;/span&gt;&lt;h3&gt;Remove the blank lines&lt;/h3&gt;
&lt;p&gt;$ sed '/^$/d' 2daygeek.txt&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="emacs-regular-expression-syntax"&gt;
&lt;h2&gt;Emacs Regular Expression Syntax&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Here is the syntax used by Emacs for regular expressions. Any character matches itself, except for the list below.&lt;/div&gt;
&lt;div class="line"&gt;The following characters are special : . * + ? ^ $ \ [&lt;/div&gt;
&lt;div class="line"&gt;Between brackets [], the following are special : ] - ^&lt;/div&gt;
&lt;div class="line"&gt;Many characters are special when they follow a backslash – see below.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;.&lt;/span&gt;        &lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;but&lt;/span&gt; &lt;span class="nv"&gt;newline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-2"&gt;&lt;/a&gt;&lt;span class="nf"&gt;*&lt;/span&gt;        &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;more&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-3"&gt;&lt;/a&gt;&lt;span class="nf"&gt;+&lt;/span&gt;        &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;more&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-4"&gt;&lt;/a&gt;&lt;span class="sc"&gt;? &lt;/span&gt;       &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;^&lt;/span&gt;        &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-6"&gt;&lt;/a&gt;&lt;span class="nv"&gt;$&lt;/span&gt;        &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;between&lt;/span&gt; &lt;span class="nv"&gt;brackets&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;^..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;brackets&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;a-z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;between&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;z&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-10"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\ &lt;/span&gt;       &lt;span class="nv"&gt;prevents&lt;/span&gt; &lt;span class="nv"&gt;interpretation&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;following&lt;/span&gt; &lt;span class="nv"&gt;special&lt;/span&gt; &lt;span class="nv"&gt;char&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-11"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\|&lt;/span&gt;       &lt;span class="k"&gt;or&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-12"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\w&lt;/span&gt;       &lt;span class="nv"&gt;word&lt;/span&gt; &lt;span class="nv"&gt;constituent&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-13"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\b&lt;/span&gt;       &lt;span class="nv"&gt;word&lt;/span&gt; &lt;span class="nv"&gt;boundary&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-14"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\sc&lt;/span&gt;      &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="nv"&gt;syntax&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;e.g.&lt;/span&gt; &lt;span class="nv"&gt;\s-&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;whitespace&lt;/span&gt; &lt;span class="nv"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-15"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\(&lt;/span&gt; &lt;span class="nv"&gt;\)&lt;/span&gt;    &lt;span class="nv"&gt;start/end&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;group&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-16"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\&amp;amp;lt&lt;/span&gt;&lt;span class="c1"&gt;; \&amp;amp;gt;    start/end of word (faulty rendering: backslash + less-than and backslash + greater-than)&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-17"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\_&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;\_&amp;gt;&lt;/span&gt;  &lt;span class="nv"&gt;start/end&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;symbol&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-18"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\`&lt;/span&gt; &lt;span class="nv"&gt;\'&lt;/span&gt;    &lt;span class="nv"&gt;start/end&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;buffer/string&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-19"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\1&lt;/span&gt;       &lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;matched&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="nv"&gt;group&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-20"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\n&lt;/span&gt;       &lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;matched&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nf"&gt;nth&lt;/span&gt; &lt;span class="nv"&gt;group&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-21"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\{3\}&lt;/span&gt;    &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;times&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-22"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\{3,\}&lt;/span&gt;   &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;more&lt;/span&gt; &lt;span class="nv"&gt;times&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-23"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\{3,6\}&lt;/span&gt;  &lt;span class="nv"&gt;previous&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;group,&lt;/span&gt; &lt;span class="nv"&gt;repeated&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="nv"&gt;times&lt;/span&gt;
&lt;a name="rest_code_62e967528eca45168c1a687de9982d99-24"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\=&lt;/span&gt;       &lt;span class="nv"&gt;match&lt;/span&gt; &lt;span class="nv"&gt;succeeds&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;located&lt;/span&gt; &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nf"&gt;point&lt;/span&gt;
&lt;/pre&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;*?, +?, and ?? are non-greedy versions of *, +, and ? – see NonGreedyRegexp. Also, W, &lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id2"&gt;&lt;span class="problematic" id="id3"&gt;:raw-latex:`\B`&lt;/span&gt;&lt;/a&gt;, and ⪼ match any character that does not match &lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id4"&gt;&lt;span class="problematic" id="id5"&gt;:raw-latex:`\w`&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id6"&gt;&lt;span class="problematic" id="id7"&gt;:raw-latex:`\b`&lt;/span&gt;&lt;/a&gt;, and ≻.&lt;/div&gt;
&lt;div class="line"&gt;Characters are organized by category. Use C-u C-x = to display the category of the character under the cursor.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 315); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role "raw-latex".&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id4"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 315); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role "raw-latex".&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id6"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 315); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/regex-summary/#id7"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role "raw-latex".&lt;/p&gt;
&lt;/div&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_a836327345eb4b4aaecf1054a927d29f-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\ca&lt;/span&gt;      &lt;span class="nv"&gt;ascii&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_a836327345eb4b4aaecf1054a927d29f-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\Ca&lt;/span&gt;      &lt;span class="nv"&gt;non-ascii&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;newline&lt;/span&gt; &lt;span class="nv"&gt;included&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a836327345eb4b4aaecf1054a927d29f-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\cl&lt;/span&gt;      &lt;span class="nv"&gt;latin&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_a836327345eb4b4aaecf1054a927d29f-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\cg&lt;/span&gt;      &lt;span class="nv"&gt;greek&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Here are some syntax classes, also known as character classes, that can be used between brackets, e.g. [[:upper:]|[:digit:].].&lt;/p&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:digit:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;digit,&lt;/span&gt; &lt;span class="nv"&gt;same&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;0-9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:alpha:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;letter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;alphabetic&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:alnum:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;letter&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;digit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;alphanumeric&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:upper:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;letter&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;uppercase&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:lower:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;letter&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;lowercase&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:graph:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;visible&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:print:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;visible&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;plus&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;space&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:space:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;whitespace&lt;/span&gt; &lt;span class="nv"&gt;character,&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;syntax&lt;/span&gt; &lt;span class="nv"&gt;table,&lt;/span&gt; &lt;span class="nv"&gt;but&lt;/span&gt; &lt;span class="nv"&gt;typically&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;\t\r\n\v\f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;which&lt;/span&gt; &lt;span class="nv"&gt;includes&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;newline&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:blank:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;space&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;tab&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:xdigit:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;hexadecimal&lt;/span&gt; &lt;span class="nv"&gt;digit&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:cntrl:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_5cc658d7cde64b6a9243b315a3cbe67f-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;:ascii:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;ascii&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Syntax classes:&lt;/p&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s-&lt;/span&gt;   &lt;span class="nv"&gt;whitespace&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;        &lt;span class="nv"&gt;\s/&lt;/span&gt;   &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="k"&gt;quote&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\sw&lt;/span&gt;   &lt;span class="nv"&gt;word&lt;/span&gt; &lt;span class="nv"&gt;constituent&lt;/span&gt;            &lt;span class="nv"&gt;\s$&lt;/span&gt;   &lt;span class="nv"&gt;paired&lt;/span&gt; &lt;span class="nv"&gt;delimiter&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s_&lt;/span&gt;   &lt;span class="nv"&gt;symbol&lt;/span&gt; &lt;span class="nv"&gt;constituent&lt;/span&gt;          &lt;span class="nv"&gt;\s&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;   &lt;span class="nv"&gt;expression&lt;/span&gt; &lt;span class="nv"&gt;prefix&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s.&lt;/span&gt;   &lt;span class="nv"&gt;punctuation&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;       &lt;span class="nv"&gt;\s&amp;lt;&lt;/span&gt;   &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="nv"&gt;starter&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;   &lt;span class="nv"&gt;open&lt;/span&gt; &lt;span class="nv"&gt;delimiter&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;    &lt;span class="nv"&gt;\s&amp;gt;&lt;/span&gt;   &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="nv"&gt;ender&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-6"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="nv"&gt;close&lt;/span&gt; &lt;span class="nv"&gt;delimiter&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt;   &lt;span class="nv"&gt;\s!&lt;/span&gt;   &lt;span class="nv"&gt;generic&lt;/span&gt; &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="nv"&gt;delimiter&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-7"&gt;&lt;/a&gt;&lt;span class="nv"&gt;\s&lt;/span&gt;&lt;span class="s"&gt;"   string quote character      \s|   generic string delimiter&lt;/span&gt;
&lt;a name="rest_code_2ecc9e1549dd4335b180fc25ded4c9df-8"&gt;&lt;/a&gt;&lt;span class="s"&gt;\s\   escape character&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h2&gt;Publish&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_7ea969aae62d43d996ddb89b78e7dbc2-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; ls ~/Public/nikola_post/posts
&lt;a name="rest_code_7ea969aae62d43d996ddb89b78e7dbc2-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; pwd
&lt;a name="rest_code_7ea969aae62d43d996ddb89b78e7dbc2-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; pandoc --wrap&lt;span class="o"&gt;=&lt;/span&gt;preserve regex-offprint.org  -o ~/Public/nikola_post/posts/Regex-Summary.rst
&lt;/pre&gt;&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 364)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "commonlisp"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: commonlisp

   (print (replace-regexp "war" "negotiation" "trade war")))
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;nil&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>emacs</category><category>python</category><category>regex</category><guid>https://alinbxsorcerer.github.io/posts/regex-summary/</guid><pubDate>Tue, 28 Nov 2017 12:53:29 GMT</pubDate></item><item><title>IPython Summary</title><link>https://alinbxsorcerer.github.io/posts/ipython-summary/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="section" id="ipython-basics"&gt;
&lt;h2&gt;IPython Basics&lt;/h2&gt;
&lt;p&gt;In this section, we'll get you up and running with the IPython shell and Jupyter notebook, and introduce you to some of the essential concepts.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_60f9513195544319902bb28cf8bf6597-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;a name="rest_code_60f9513195544319902bb28cf8bf6597-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt;ls ~/Public/nikola_post/posts/
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;确定学习ipython的时间.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="running-the-ipython-shell"&gt;
&lt;h3&gt;Running the IPython Shell&lt;/h3&gt;
&lt;p&gt;You can launch the IPython shell on the command line just like launching the regular Python interpreter except with the &lt;code class="docutils literal"&gt;ipython&lt;/code&gt; command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ ipython
Python 3.6.0 | packaged by conda-forge | (default, Jan 13 2017, 23:17:12)
Type "copyright", "credits" or "license" for more information.

IPython 5.1.0 -- An enhanced Interactive Python.
?         -&amp;gt; Introduction and overview of IPython's features.
%quickref -&amp;gt; Quick reference.
help      -&amp;gt; Python's own help system.
object?   -&amp;gt; Details about 'object', use 'object??' for extra details.

In [1]: a = 5

In [2]: a
Out[2]: 5&lt;/pre&gt;
&lt;p&gt;You can execute arbitrary Python statements by typing them in and pressing Return (or Enter). When you type just a variable into IPython, it renders a string representation of the object:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [5]: import numpy as np

In [6]: data = {i : np.random.randn() for i in range(7)}

In [7]: data
Out[7]:
{0: -0.20470765948471295,
 1: 0.47894333805754824,
 2: -0.5194387150567381,
 3: -0.55573030434749,
 4: 1.9657805725027142,
 5: 1.3934058329729904,
 6: 0.09290787674371767}&lt;/pre&gt;
&lt;p&gt;The first two lines are Python code statements; the second statement creates a variable named &lt;code class="docutils literal"&gt;data&lt;/code&gt; that refers to a newly created Python dictionary. The last line prints the value of &lt;code class="docutils literal"&gt;data&lt;/code&gt; in the console.&lt;/p&gt;
&lt;p&gt;Many kinds of Python objects are formatted to be more readable, or &lt;em&gt;pretty-printed&lt;/em&gt;, which is distinct from normal printing with &lt;code class="docutils literal"&gt;print&lt;/code&gt;. If you printed the above &lt;code class="docutils literal"&gt;data&lt;/code&gt; variable in the standard Python interpreter, it would be much less readable:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; from numpy.random import randn
&amp;gt;&amp;gt;&amp;gt; data = {i : randn() for i in range(7)}
&amp;gt;&amp;gt;&amp;gt; print(data)
{0: -1.5948255432744511, 1: 0.10569006472787983, 2: 1.972367135977295,
3: 0.15455217573074576, 4: -0.24058577449429575, 5: -1.2904897053651216,
6: 0.3308507317325902}&lt;/pre&gt;
&lt;p&gt;IPython also provides facilities to execute arbitrary blocks of code (via a somewhat glorified copy-and-paste approach) and whole Python scripts. You can also use the Jupyter notebook to work with larger blocks of code, as we'll soon see.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-the-jupyter-notebook"&gt;
&lt;h3&gt;Running the Jupyter Notebook&lt;/h3&gt;
&lt;p&gt;One of the major components of the Jupyter project is the &lt;em&gt;notebook&lt;/em&gt;, a type of interactive document for code, text (with or without markup), data visualizations, and other output. The Jupyter notebook interacts with &lt;em&gt;kernels&lt;/em&gt;, which are implementations of the Jupyter interactive computing protocol in any number of programming languages. Python's Jupyter kernel uses the IPython system for its underlying behavior.&lt;/p&gt;
&lt;p&gt;To start up Jupyter, run the command &lt;code class="docutils literal"&gt;jupyter notebook&lt;/code&gt; in a terminal:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ jupyter notebook
[I 15:20:52.739 NotebookApp] Serving notebooks from local directory:
/home/wesm/code/pydata-book
[I 15:20:52.739 NotebookApp] 0 active kernels
[I 15:20:52.739 NotebookApp] The Jupyter Notebook is running at:
http://localhost:8888/
[I 15:20:52.740 NotebookApp] Use Control-C to stop this server and shut down
all kernels (twice to skip confirmation).
Created new window in existing browser session.&lt;/pre&gt;
&lt;p&gt;On many platforms, Jupyter will automatically open up in your default web browser (unless you start it with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--no-browser&lt;/span&gt;&lt;/code&gt;). Otherwise, you can navigate to the HTTP address printed when you started the notebook, here &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8888/&lt;/span&gt;&lt;/code&gt;. See &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0004_split_004.html#figure_jupyter_landing"&gt;Figure 2-1&lt;/a&gt; for what this looks like in Google Chrome.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="note"&gt;
&lt;h4&gt;Note&lt;/h4&gt;
&lt;p&gt;Many people use Jupyter as a local computing environment, but it can also be deployed on servers and accessed remotely. I won't cover those details here, but encourage you to explore this topic on the internet if it's relevant to your needs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image0" src="https://alinbxsorcerer.github.io/images/python-data-analysis-images/00001.jpeg"&gt;&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_28ac5b9aa3ea4240b1e0930c7f0eeccd-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; ls &lt;span class="p"&gt;|&lt;/span&gt; grep image
&lt;/pre&gt;&lt;p&gt;[default]” option. You should see something like &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0004_split_004.html#figure_jupyter_new_nb"&gt;Figure 2-2&lt;/a&gt;. If this is your first time, try clicking on the empty code “cell” and entering a line of Python code. Then press Shift-Enter to execute it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image1" src="https://alinbxsorcerer.github.io/images/python-data-analysis-images/00002.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;When you save the notebook (see “Save and Checkpoint” under the notebook File menu), it creates a file with the extension &lt;em&gt;.ipynb&lt;/em&gt;. This is a self-contained file format that contains all of the content (including any evaluated code output) currently in the notebook. These can be loaded and edited by other Jupyter users. To load an existing notebook, put the file in the same directory where you started the notebook process (or in a subfolder within it), then double-click the name from the landing page. You can try it out with the notebooks from my &lt;em&gt;wesm/pydata-book&lt;/em&gt; repository on GitHub. See &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0004_split_004.html#figure_jupyter_existing_nb"&gt;Figure 2-3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While the Jupyter notebook can feel like a distinct experience from the IPython shell, nearly all of the commands and tools in this chapter can be used in either environment.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image2" src="https://alinbxsorcerer.github.io/images/python-data-analysis-images/00003.jpeg"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tab-completion"&gt;
&lt;h3&gt;Tab Completion&lt;/h3&gt;
&lt;p&gt;On the surface, the IPython shell looks like a cosmetically different version of the standard terminal Python interpreter (invoked with &lt;code class="docutils literal"&gt;python&lt;/code&gt;). One of the major improvements over the standard Python shell is &lt;em&gt;tab completion&lt;/em&gt;, found in many IDEs or other interactive computing analysis environments. While entering expressions in the shell, pressing the Tab key will search the namespace for any variables (objects, functions, etc.) matching the characters you have typed so far:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [1]: an_apple = 27

In [2]: an_example = 42

In [3]: an&amp;lt;Tab&amp;gt;
an_apple    and         an_example  any&lt;/pre&gt;
&lt;p&gt;In this example, note that IPython displayed both the two variables I defined as well as the Python keyword &lt;code class="docutils literal"&gt;and&lt;/code&gt; and built-in function &lt;code class="docutils literal"&gt;any&lt;/code&gt;. Naturally, you can also complete methods and attributes on any object after typing a period:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [3]: b = [1, 2, 3]

In [4]: b.&amp;lt;Tab&amp;gt;
b.append  b.count   b.insert  b.reverse
b.clear   b.extend  b.pop     b.sort
b.copy    b.index   b.remove&lt;/pre&gt;
&lt;p&gt;The same goes for modules:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [1]: import datetime

In [2]: datetime.&amp;lt;Tab&amp;gt;
datetime.date          datetime.MAXYEAR       datetime.timedelta
datetime.datetime      datetime.MINYEAR       datetime.timezone
datetime.datetime_CAPI datetime.time          datetime.tzinfo&lt;/pre&gt;
&lt;p&gt;In the Jupyter notebook and newer versions of IPython (5.0 and higher), the autocompletions show up in a drop-down box rather than as text output.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="note-1"&gt;&lt;/span&gt;&lt;h4&gt;Note&lt;/h4&gt;
&lt;p&gt;Note that IPython by default hides methods and attributes starting with underscores, such as magic methods and internal “private” methods and attributes, in order to avoid cluttering the display (and confusing novice users!). These, too, can be tab-completed, but you must first type an underscore to see them. If you prefer to always see such methods in tab completion, you can change this setting in the IPython configuration. See the IPython documentation to find out how to do this.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Tab completion works in many contexts outside of searching the interactive namespace and completing object or module attributes. When typing anything that looks like a file path (even in a Python string), pressing the Tab key will complete anything on your computer's filesystem matching what you've typed:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [7]: datasets/movielens/&amp;lt;Tab&amp;gt;
datasets/movielens/movies.dat    datasets/movielens/README
datasets/movielens/ratings.dat   datasets/movielens/users.dat

In [7]: path = 'datasets/movielens/&amp;lt;Tab&amp;gt;
datasets/movielens/movies.dat    datasets/movielens/README
datasets/movielens/ratings.dat   datasets/movielens/users.dat&lt;/pre&gt;
&lt;p&gt;Combined with the &lt;code class="docutils literal"&gt;%run&lt;/code&gt; command (see &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0004_split_007.html#ipython_basics_magic_run"&gt;“The %run Command”&lt;/a&gt;), this functionality can save you many keystrokes.&lt;/p&gt;
&lt;p&gt;Another area where tab completion saves time is in the completion of function keyword arguments (and including the &lt;code class="docutils literal"&gt;=&lt;/code&gt; sign!). See &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0004_split_005.html#figure_jupyter_autocomplete_keywords"&gt;Figure 2-4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image3" src="https://alinbxsorcerer.github.io/images/python-data-analysis-images/00004.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;We'll have a closer look at functions in a little bit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introspection"&gt;
&lt;h3&gt;Introspection&lt;/h3&gt;
&lt;p&gt;Using a question mark (&lt;code class="docutils literal"&gt;?&lt;/code&gt;) before or after a variable will display some general information about the object:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [8]: b = [1, 2, 3]

In [9]: b?
Type:       list
String Form:[1, 2, 3]
Length:     3
Docstring:
list() -&amp;gt; new empty list
list(iterable) -&amp;gt; new list initialized from iterable's items

In [10]: print?
Docstring:
print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)

Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file:  a file-like object (stream); defaults to the current sys.stdout.
sep:   string inserted between values, default a space.
end:   string appended after the last value, default a newline.
flush: whether to forcibly flush the stream.
Type:      builtin_function_or_method&lt;/pre&gt;
&lt;p&gt;This is referred to as &lt;em&gt;object introspection&lt;/em&gt;. If the object is a function or instance method, the docstring, if defined, will also be shown. Suppose we'd written the following function (which you can reproduce in IPython or Jupyter):&lt;/p&gt;
&lt;pre class="literal-block"&gt;def add_numbers(a, b):
    """
    Add two numbers together

    Returns
    -------
    the_sum : type of arguments
    """
    return a + b&lt;/pre&gt;
&lt;p&gt;Then using &lt;code class="docutils literal"&gt;?&lt;/code&gt; shows us the docstring:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [11]: add_numbers?
Signature: add_numbers(a, b)
Docstring:
Add two numbers together

Returns
-------
the_sum : type of arguments
File:      &amp;lt;ipython-input-9-6a548a216e27&amp;gt;
Type:      function&lt;/pre&gt;
&lt;p&gt;Using &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;??&lt;/span&gt;&lt;/code&gt; will also show the function's source code if possible:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [12]: add_numbers??
Signature: add_numbers(a, b)
Source:
def add_numbers(a, b):
    """
    Add two numbers together

    Returns
    -------
    the_sum : type of arguments
    """
    return a + b
File:      &amp;lt;ipython-input-9-6a548a216e27&amp;gt;
Type:      function&lt;/pre&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;?&lt;/code&gt; has a final usage, which is for searching the IPython namespace in a manner similar to the standard Unix or Windows command line. A number of characters combined with the wildcard (&lt;code class="docutils literal"&gt;*&lt;/code&gt;) will show all names matching the wildcard expression. For example, we could get a list of all functions in the top-level NumPy namespace containing &lt;code class="docutils literal"&gt;load&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [13]: np.*load*?
np.__loader__
np.load
np.loads
np.loadtxt
np.pkgload&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="the-run-command"&gt;
&lt;h3&gt;The %run Command&lt;/h3&gt;
&lt;p&gt;You can run any file as a Python program inside the environment of your IPython session using the &lt;code class="docutils literal"&gt;%run&lt;/code&gt; command. Suppose you had the following simple script stored in &lt;em&gt;ipython\script\test.py&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;def f(x, y, z):
    return (x + y) / z

a = 5
b = 6
c = 7.5

result = f(a, b, c)&lt;/pre&gt;
&lt;p&gt;You can execute this by passing the filename to &lt;code class="docutils literal"&gt;%run&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [14]: %run ipython_script_test.py&lt;/pre&gt;
&lt;p&gt;The script is run in an &lt;em&gt;empty namespace&lt;/em&gt; (with no imports or other variables defined) so that the behavior should be identical to running the program on the command line using &lt;code class="docutils literal"&gt;python script.py&lt;/code&gt;. All of the variables (imports, functions, and globals) defined in the file (up until an exception, if any, is raised) will then be accessible in the IPython shell:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [15]: c
Out [15]: 7.5

In [16]: result
Out[16]: 1.4666666666666666&lt;/pre&gt;
&lt;p&gt;If a Python script expects command-line arguments (to be found in &lt;code class="docutils literal"&gt;sys.argv&lt;/code&gt;), these can be passed after the file path as though run on the command line.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;span id="note-2"&gt;&lt;/span&gt;&lt;h4&gt;Note&lt;/h4&gt;
&lt;p&gt;Should you wish to give a script access to variables already defined in the interactive IPython namespace, use &lt;code class="docutils literal"&gt;%run &lt;span class="pre"&gt;-i&lt;/span&gt;&lt;/code&gt; instead of plain &lt;code class="docutils literal"&gt;%run&lt;/code&gt;.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;In the Jupyter notebook, you may also use the related &lt;code class="docutils literal"&gt;%load&lt;/code&gt; magic function, which imports a script into a code cell:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; %load ipython_script_test.py

    def f(x, y, z):
        return (x + y) / z

    a = 5
    b = 6
    c = 7.5

    result = f(a, b, c)&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="interrupting-running-code"&gt;
&lt;h4&gt;Interrupting running code&lt;/h4&gt;
&lt;p&gt;Pressing Ctrl-C while any code is running, whether a script through &lt;code class="docutils literal"&gt;%run&lt;/code&gt; or a long-running command, will cause a &lt;code class="docutils literal"&gt;KeyboardInterrupt&lt;/code&gt; to be raised. This will cause nearly all Python programs to stop immediately except in certain unusual cases.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="warning"&gt;
&lt;h4&gt;Warning&lt;/h4&gt;
&lt;p&gt;When a piece of Python code has called into some compiled extension modules, pressing Ctrl-C will not always cause the program execution to stop immediately. In such cases, you will have to either wait until control is returned to the Python interpreter, or in more dire circumstances, forcibly terminate the Python process.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="executing-code-from-the-clipboard"&gt;
&lt;h3&gt;Executing Code from the Clipboard&lt;/h3&gt;
&lt;p&gt;If you are using the Jupyter notebook, you can copy and paste code into any code cell and execute it. It is also possible to run code from the clipboard in the IPython shell. Suppose you had the following code in some other application:&lt;/p&gt;
&lt;pre class="literal-block"&gt;x = 5
y = 7
if x &amp;gt; 5:
    x += 1

    y = 8&lt;/pre&gt;
&lt;p&gt;The most foolproof methods are the &lt;code class="docutils literal"&gt;%paste&lt;/code&gt; and &lt;code class="docutils literal"&gt;%cpaste&lt;/code&gt; magic functions. &lt;code class="docutils literal"&gt;%paste&lt;/code&gt; takes whatever text is in the clipboard and executes it as a single block in the shell:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [17]: %paste
x = 5
y = 7
if x &amp;gt; 5:
    x += 1

    y = 8
## -- End pasted text --&lt;/pre&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;%cpaste&lt;/code&gt; is similar, except that it gives you a special prompt for pasting code into:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [18]: %cpaste
Pasting code; enter '--' alone on the line to stop or use Ctrl-D.
:x = 5
:y = 7
:if x &amp;gt; 5:
:    x += 1
:
:    y = 8
:--&lt;/pre&gt;
&lt;p&gt;With the &lt;code class="docutils literal"&gt;%cpaste&lt;/code&gt; block, you have the freedom to paste as much code as you like before executing it. You might decide to use &lt;code class="docutils literal"&gt;%cpaste&lt;/code&gt; in order to look at the pasted code before executing it. If you accidentally paste the wrong code, you can break out of the &lt;code class="docutils literal"&gt;%cpaste&lt;/code&gt; prompt by pressing Ctrl-C.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="terminal-keyboard-shortcuts"&gt;
&lt;h3&gt;Terminal Keyboard Shortcuts&lt;/h3&gt;
&lt;p&gt;IPython has many keyboard shortcuts for navigating the prompt (which will be familiar to users of the Emacs text editor or the Unix bash shell) and interacting with the shell's command history. &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0004_split_009.html#table_kbd_shortcuts"&gt;Table 2-1&lt;/a&gt; summarizes some of the most commonly used shortcuts. See &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0004_split_009.html#figure_ipython_keyboard"&gt;Figure 2-5&lt;/a&gt; for an illustration of a few of these, such as cursor movement.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image4" src="https://alinbxsorcerer.github.io/images/python-data-analysis-images/00005.gif"&gt;&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;Table 2-1. Standard IPython keyboard shortcuts&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style="width: 34%"&gt;
&lt;col style="width: 66%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Keyboard shortcut&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-P or up-arrow&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Search backward in command history&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-N or down-arrow&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Search forward in command history f&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-R&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Readline-style reverse history search&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-Shift-V&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Paste text from clipboard&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-C&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Interrupt currently executing code&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-A&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Move cursor to beginning of line&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-E&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Move cursor to end of line&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-K&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Delete text from cursor until end of line&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-U&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Discard all text on current line&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-F&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Move cursor forward one character&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-B&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Move cursor back one character&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ctrl-L&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Clear screen&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note that Jupyter notebooks have a largely separate set of keyboard shortcuts for navigation and editing. Since these shortcuts have evolved more rapidly than IPython's, I encourage you to explore the integrated help system in the Jupyter notebook's menus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="about-magic-commands"&gt;
&lt;h3&gt;About Magic Commands&lt;/h3&gt;
&lt;p&gt;IPython's special commands (which are not built into Python itself) are known as “magic” commands. These are designed to facilitate common tasks and enable you to easily control the behavior of the IPython system. A magic command is any command prefixed by the percent symbol &lt;code class="docutils literal"&gt;%&lt;/code&gt;. For example, you can check the execution time of any Python statement, such as a matrix multiplication, using the &lt;code class="docutils literal"&gt;%timeit&lt;/code&gt; magic function (which will be discussed in more detail later):&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [20]: a = np.random.randn(100, 100)

In [20]: %timeit np.dot(a, a)
10000 loops, best of 3: 20.9 µs per loop&lt;/pre&gt;
&lt;p&gt;Magic commands can be viewed as command-line programs to be run within the IPython system. Many of them have additional “command-line” options, which can all be viewed (as you might expect) using &lt;code class="docutils literal"&gt;?&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [21]: %debug?
Docstring:
::

  %debug [--breakpoint FILE:LINE] [statement [statement ...]]

Activate the interactive debugger.

This magic command support two ways of activating debugger.
One is to activate debugger before executing code.  This way, you
can set a break point, to step through the code from the point.
You can use this mode by giving statements to execute and optionally
a breakpoint.

The other one is to activate debugger in post-mortem mode.  You can
activate this mode simply running %debug without any argument.
If an exception has just occurred, this lets you inspect its stack
frames interactively.  Note that this will always work only on the last
traceback that occurred, so you must call this quickly after an
exception that you wish to inspect has fired, because if another one
occurs, it clobbers the previous one.

If you want IPython to automatically do this on every exception, see
the %pdb magic for more details.

positional arguments:
  statement             Code to run in debugger. You can omit this in cell
                        magic mode.

optional arguments:
  --breakpoint &amp;lt;FILE:LINE&amp;gt;, -b &amp;lt;FILE:LINE&amp;gt;
                        Set break point at LINE in FILE.&lt;/pre&gt;
&lt;p&gt;Magic functions can be used by default without the percent sign, as long as no variable is defined with the same name as the magic function in question. This feature is called &lt;em&gt;automagic&lt;/em&gt; and can be enabled or disabled with &lt;code class="docutils literal"&gt;%automagic&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some magic functions behave like Python functions and their output can be assigned to a variable:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [22]: %pwd
Out[22]: '/home/wesm/code/pydata-book

In [23]: foo = %pwd

In [24]: foo
Out[24]: '/home/wesm/code/pydata-book'&lt;/pre&gt;
&lt;p&gt;Since IPython's documentation is accessible from within the system, I encourage you to explore all of the special commands available by typing &lt;code class="docutils literal"&gt;%quickref&lt;/code&gt; or &lt;code class="docutils literal"&gt;%magic&lt;/code&gt;. &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0004_split_010.html#ipython_magic_table"&gt;Table 2-2&lt;/a&gt; highlights some of the most critical ones for being productive in interactive computing and Python development in IPython.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 18%"&gt;
&lt;col style="width: 82%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Command&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%quickref&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Display the IPython Quick Reference Card&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%magic&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Display detailed documentation for all of the available magic commands&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%debug&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Enter the interactive debugger at the bottom of the last exception traceback&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%hist&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Print command input (and optionally output) history&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%pdb&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Automatically enter debugger after any exception&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%paste&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Execute preformatted Python code from clipboard&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%cpaste&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Open a special prompt for manually pasting Python code to be executed&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%reset&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Delete all variables/names defined in interactive namespace&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%page&lt;/code&gt; &lt;em&gt;``OBJECT``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Pretty-print the object and display it through a pager&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%run&lt;/code&gt; &lt;em&gt;``script.py``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Run a Python script inside IPython&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%prun&lt;/code&gt; &lt;em&gt;``statement``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Execute &lt;em&gt;``statement``&lt;/em&gt; with &lt;code class="docutils literal"&gt;cProfile&lt;/code&gt; and report the profiler output&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%time&lt;/code&gt; &lt;em&gt;``statement``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Report the execution time of a single statement&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%timeit&lt;/code&gt; &lt;em&gt;``statement``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Run a statement multiple times to compute an ensemble average execution time; useful for timing code with very short execution time&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%who, %who_ls, %whos&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Display variables defined in interactive namespace, with varying levels of information/verbosity&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%xdel&lt;/code&gt; &lt;em&gt;``variable``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Delete a variable and attempt to clear any references to the object in the IPython internals&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="matplotlib-integration"&gt;
&lt;h3&gt;Matplotlib Integration&lt;/h3&gt;
&lt;p&gt;One reason for IPython's popularity in analytical computing is that it integrates well with data visualization and other user interface libraries like matplotlib. Don't worry if you have never used matplotlib before; it will be discussed in more detail later in this book. The &lt;code class="docutils literal"&gt;%matplotlib&lt;/code&gt; magic function configures its integration with the IPython shell or Jupyter notebook. This is important, as otherwise plots you create will either not appear (notebook) or take control of the session until closed (shell).&lt;/p&gt;
&lt;p&gt;In the IPython shell, running &lt;code class="docutils literal"&gt;%matplotlib&lt;/code&gt; sets up the integration so you can create multiple plot windows without interfering with the console session:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [26]: %matplotlib
Using matplotlib backend: Qt4Agg&lt;/pre&gt;
&lt;p&gt;In Jupyter, the command is a little different (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0004_split_011.html#figure_jupyter_matplotlib_inline"&gt;Figure 2-6&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [26]: %matplotlib inline&lt;/pre&gt;
&lt;p&gt;&lt;img alt="image5" src="https://alinbxsorcerer.github.io/images/python-data-analysis-images/00006.jpeg"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-ipython-system"&gt;
&lt;h2&gt;Advanced IPython System&lt;/h2&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0004_split_000.html#3Q283-74490f30505748fab61c1c3ee3dc2f27"&gt;Chapter 2&lt;/a&gt; we looked at the basics of using the IPython shell and Jupyter notebook. In this chapter, we explore some deeper functionality in the IPython system that can either be used from the console or within Jupyter.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;%bookmark&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;%prun cProfile,&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-command-history"&gt;
&lt;h2&gt;1 Using the Command History&lt;/h2&gt;
&lt;p&gt;IPython maintains a small on-disk database containing the text of each command that you execute. This serves various purposes:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Searching, completing, and executing previously executed commands with minimal typing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Persisting the command history between sessions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logging the input/output history to a file&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These features are more useful in the shell than in the notebook, since the notebook by design keeps a log of the input and output in each code cell.&lt;/p&gt;
&lt;div class="section" id="searching-and-reusing-the-command-history"&gt;
&lt;h3&gt;Searching and Reusing the Command History&lt;/h3&gt;
&lt;p&gt;The IPython shell lets you search and execute previous code or other commands. This is useful, as you may often find yourself repeating the same commands, such as a &lt;code class="docutils literal"&gt;%run&lt;/code&gt; command or some other code snippet. Suppose you had run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%run first/second/third/data_script.py&lt;/pre&gt;
&lt;p&gt;and then explored the results of the script (assuming it ran successfully) only to find that you made an incorrect calculation. After figuring out the problem and modifying &lt;em&gt;datascript.py&lt;/em&gt;, you can start typing a few letters of the &lt;code class="docutils literal"&gt;%run&lt;/code&gt; command and then press either the Ctrl-P key combination or the up arrow key. This will search the command history for the first prior command matching the letters you typed. Pressing either Ctrl-P or the up arrow key multiple times will continue to search through the history. If you pass over the command you wish to execute, fear not. You can move &lt;em&gt;forward&lt;/em&gt; through the command history by pressing either Ctrl-N or the down arrow key. After doing this a few times, you may start pressing these keys without thinking! x# 棒呀, 完全是emacs&lt;/p&gt;
&lt;p&gt;Using Ctrl-R gives you the same partial incremental searching capability provided by the &lt;code class="docutils literal"&gt;readline&lt;/code&gt; used in Unix-style shells, such as the bash shell. On Windows, &lt;code class="docutils literal"&gt;readline&lt;/code&gt; functionality is emulated by IPython. To use this, press Ctrl-R and then type a few characters contained in the input line you want to search for:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [1]: a_command = foo(x, y, z)

(reverse-i-search)`com': a_command = foo(x, y, z)&lt;/pre&gt;
&lt;p&gt;Pressing Ctrl-R will cycle through the history for each line matching the characters you've typed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="input-and-output-variables"&gt;
&lt;h3&gt;Input and Output Variables&lt;/h3&gt;
&lt;p&gt;Forgetting to assign the result of a function call to a variable can be very annoying. An IPython session stores references to &lt;em&gt;both&lt;/em&gt; the input commands and output Python objects in special variables. The previous two outputs are stored in the &lt;code class="docutils literal"&gt;_&lt;/code&gt; (one underscore) and &lt;code class="docutils literal"&gt;__&lt;/code&gt; (two underscores) variables, respectively:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [24]: 2 ** 27
Out[24]: 134217728

In [25]: _
Out[25]: 134217728&lt;/pre&gt;
&lt;p&gt;Input variables are stored in variables named like &lt;code class="docutils literal"&gt;_iX&lt;/code&gt;, where &lt;code class="docutils literal"&gt;X&lt;/code&gt; is the input line number. For each input variable there is a corresponding output variable &lt;code class="docutils literal"&gt;_X&lt;/code&gt;. So after input line 27, say, there will be two new variables &lt;code class="docutils literal"&gt;_27&lt;/code&gt; (for the output) and &lt;code class="docutils literal"&gt;_i27&lt;/code&gt; for the input:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [26]: foo = 'bar'

In [27]: foo
Out[27]: 'bar'

In [28]: _i27
Out[28]: u'foo'

In [29]: _27
Out[29]: 'bar'&lt;/pre&gt;
&lt;p&gt;Since the input variables are strings they can be executed again with the Python &lt;code class="docutils literal"&gt;exec&lt;/code&gt; keyword:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [30]: exec(_i27)&lt;/pre&gt;
&lt;p&gt;Here &lt;code class="docutils literal"&gt;_i27&lt;/code&gt; refers to the code input in &lt;code class="docutils literal"&gt;In [27]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Several magic functions allow you to work with the input and output history. &lt;code class="docutils literal"&gt;%hist&lt;/code&gt; is capable of printing all or part of the input history, with or without line numbers. &lt;code class="docutils literal"&gt;%reset&lt;/code&gt; is for clearing the interactive namespace and optionally the input and output caches. The &lt;code class="docutils literal"&gt;%xdel&lt;/code&gt; magic function is intended for removing all references to a &lt;em&gt;particular&lt;/em&gt; object from the IPython machinery. See the documentation for both of these magics for more details.&lt;/p&gt;
&lt;p&gt;Warning&lt;/p&gt;
&lt;p&gt;When working with very large datasets, keep in mind that IPython's input and output history causes any object referenced there to not be garbage-collected (freeing up the memory), even if you delete the variables from the interactive namespace using the &lt;code class="docutils literal"&gt;del&lt;/code&gt; keyword. In such cases, careful usage of &lt;code class="docutils literal"&gt;%xdel&lt;/code&gt; and &lt;code class="docutils literal"&gt;%reset&lt;/code&gt; can help you avoid running into memory problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="interacting-with-the-operating-system"&gt;
&lt;h2&gt;2 Interacting with the Operating System&lt;/h2&gt;
&lt;p&gt;Another feature of IPython is that it allows you to seamlessly access the filesystem and operating system shell. This means, among other things, that you can perform most standard command-line actions as you would in the Windows or Unix (Linux, macOS) shell without having to exit IPython. This includes shell commands, changing directories, and storing the results of a command in a Python object (list or string). There are also simple command aliasing and directory bookmarking features.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0018_split_004.html#table_system_commands"&gt;Table B-1&lt;/a&gt; for a summary of magic functions and syntax for calling shell commands. I'll briefly visit these features in the next few sections.&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;Table B-1. IPython system-related commands&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style="width: 30%"&gt;
&lt;col style="width: 70%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Command&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;!cmd&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Execute &lt;code class="docutils literal"&gt;cmd&lt;/code&gt; in the system shell&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;output = !cmd args&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;cmd&lt;/code&gt; and store the stdout in &lt;code class="docutils literal"&gt;output&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%alias alias_name cmd&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Define an alias for a system (shell) command&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%bookmark&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Utilize IPython's directory bookmarking system&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%cd&lt;/code&gt; &lt;em&gt;``directory``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Change system working directory to passed directory&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%pwd&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Return the current system working directory&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%pushd&lt;/code&gt; &lt;em&gt;``directory``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Place current directory on stack and change to target directory&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%popd&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Change to directory popped off the top of the stack&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%dirs&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Return a list containing the current directory stack&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%dhist&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Print the history of visited directories&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%env&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Return the system environment variables as a dict&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;%matplotlib&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Configure matplotlib integration options&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="shell-commands-and-aliases"&gt;
&lt;h3&gt;Shell Commands and Aliases&lt;/h3&gt;
&lt;p&gt;Starting a line in IPython with an exclamation point &lt;code class="docutils literal"&gt;!&lt;/code&gt;, or bang, tells IPython to execute everything after the bang in the system shell. This means that you can delete files (using &lt;code class="docutils literal"&gt;rm&lt;/code&gt; or &lt;code class="docutils literal"&gt;del&lt;/code&gt;, depending on your OS), change directories, or execute any other process.&lt;/p&gt;
&lt;p&gt;You can store the console output of a shell command in a variable by assigning the expression escaped with &lt;code class="docutils literal"&gt;!&lt;/code&gt; to a variable. For example, on my Linux-based machine connected to the internet via ethernet, I can get my IP address as a Python variable:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_c2a6c71462f5458ea70d0267bc3b3807-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ip_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;ifconfig  &lt;span class="p"&gt;|&lt;/span&gt;grep &lt;span class="s2"&gt;"inet"&lt;/span&gt;
&lt;a name="rest_code_c2a6c71462f5458ea70d0267bc3b3807-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The returned Python object &lt;code class="docutils literal"&gt;ip_info&lt;/code&gt; is actually a custom list type containing various versions of the console output.&lt;/p&gt;
&lt;p&gt;IPython can also substitute in Python values defined in the current environment when using &lt;code class="docutils literal"&gt;!&lt;/code&gt;. To do this, preface the variable name by the dollar sign &lt;code class="docutils literal"&gt;$&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_47f24e50a77e471d87ca1edd9ee80eec-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'*python*'&lt;/span&gt;
&lt;a name="rest_code_47f24e50a77e471d87ca1edd9ee80eec-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt;ls &lt;span class="nv"&gt;$foo&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The &lt;code class="docutils literal"&gt;%alias&lt;/code&gt; magic function can define custom shortcuts for shell commands. As a simple example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [1]: %alias ll ls -l
In [2]: ll /usr
total 332
drwxr-xr-x   2 root root  69632 2012-01-29 20:36 bin/
drwxr-xr-x   2 root root   4096 2010-08-23 12:05 games/
drwxr-xr-x 123 root root  20480 2011-12-26 18:08 include/
drwxr-xr-x 265 root root 126976 2012-01-29 20:36 lib/
drwxr-xr-x  44 root root  69632 2011-12-26 18:08 lib32/
lrwxrwxrwx   1 root root      3 2010-08-23 16:02 lib64 -&amp;gt; lib/
drwxr-xr-x  15 root root   4096 2011-10-13 19:03 local/
drwxr-xr-x   2 root root  12288 2012-01-12 09:32 sbin/
drwxr-xr-x 387 root root  12288 2011-11-04 22:53 share/
drwxrwsr-x  24 root src    4096 2011-07-17 18:38 src/&lt;/pre&gt;
&lt;p&gt;You can execute multiple commands just as on the command line by separating them with semicolons:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [558]: %alias test_alias (cd examples; ls; cd ..)
In [559]: test_alias
macrodata.csv  spx.csv    tips.csv&lt;/pre&gt;
&lt;p&gt;You'll notice that IPython “forgets” any aliases you define interactively as soon as the session is closed. To create permanent aliases, you will need to use the configuration system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="directory-bookmark-system"&gt;
&lt;h3&gt;Directory Bookmark System&lt;/h3&gt;
&lt;p&gt;IPython has a simple directory bookmarking system to enable you to save aliases for common directories so that you can jump around very easily. For example, suppose you wanted to create a bookmark that points to the supplementary materials for this book:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%bookmark py4da /home/wesm/code/pydata-book&lt;/pre&gt;
&lt;p&gt;Once you've done this, when we use the &lt;code class="docutils literal"&gt;%cd&lt;/code&gt; magic, we can use any bookmarks we've defined:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [7]: cd py4da
(bookmark:py4da) -&amp;gt; /home/wesm/code/pydata-book
/home/wesm/code/pydata-book&lt;/pre&gt;
&lt;p&gt;If a bookmark name conflicts with a directory name in your current working directory, you can use the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-b&lt;/span&gt;&lt;/code&gt; flag to override and use the bookmark location. Using the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-l&lt;/span&gt;&lt;/code&gt; option with &lt;code class="docutils literal"&gt;%bookmark&lt;/code&gt; lists all of your bookmarks:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [8]: %bookmark -l
Current bookmarks:
py4da -&amp;gt; /home/wesm/code/pydata-book-source&lt;/pre&gt;
&lt;p&gt;Bookmarks, unlike aliases, are automatically persisted between IPython sessions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="software-development-tools"&gt;
&lt;h2&gt;3 Software Development Tools&lt;/h2&gt;
&lt;p&gt;In addition to being a comfortable environment for interactive computing and data exploration, IPython can also be a useful companion for general Python software development. In data analysis applications, it's important first to have &lt;em&gt;correct&lt;/em&gt; code. Fortunately, IPython has closely integrated and enhanced the built-in Python &lt;code class="docutils literal"&gt;pdb&lt;/code&gt; debugger. Secondly you want your code to be &lt;em&gt;fast&lt;/em&gt;. For this IPython has easy-to-use code timing and profiling tools. I will give an overview of these tools in detail here.&lt;/p&gt;
&lt;div class="section" id="interactive-debugger"&gt;
&lt;h3&gt;Interactive Debugger&lt;/h3&gt;
&lt;p&gt;IPython's debugger enhances &lt;code class="docutils literal"&gt;pdb&lt;/code&gt; with tab completion, syntax highlighting, and context for each line in exception tracebacks. One of the best times to debug code is right after an error has occurred. The &lt;code class="docutils literal"&gt;%debug&lt;/code&gt; command, when entered immediately after an exception, invokes the “post-mortem” debugger and drops you into the stack frame where the exception was raised:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [2]: run examples/ipython_bug.py
---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
/home/wesm/code/pydata-book/examples/ipython_bug.py in &amp;lt;module&amp;gt;()
     13     throws_an_exception()
     14
---&amp;gt; 15 calling_things()

/home/wesm/code/pydata-book/examples/ipython_bug.py in calling_things()
     11 def calling_things():
     12     works_fine()
---&amp;gt; 13     throws_an_exception()
     14
     15 calling_things()

/home/wesm/code/pydata-book/examples/ipython_bug.py in throws_an_exception()
      7     a = 5
      8     b = 6
----&amp;gt; 9     assert(a + b == 10)
     10
     11 def calling_things():

AssertionError:

In [3]: %debug
&amp;gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(9)throws_an_exception()
      8     b = 6
----&amp;gt; 9     assert(a + b == 10)
     10

ipdb&amp;gt;&lt;/pre&gt;
&lt;p&gt;Once inside the debugger, you can execute arbitrary Python code and explore all of the objects and data (which have been “kept alive” by the interpreter) inside each stack frame. By default you start in the lowest level, where the error occurred. By pressing &lt;code class="docutils literal"&gt;u&lt;/code&gt; (up) and &lt;code class="docutils literal"&gt;d&lt;/code&gt; (down), you can switch between the levels of the stack trace:&lt;/p&gt;
&lt;pre class="literal-block"&gt;ipdb&amp;gt; u
&amp;gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(13)calling_things()
     12     works_fine()
---&amp;gt; 13     throws_an_exception()
     14&lt;/pre&gt;
&lt;p&gt;Executing the &lt;code class="docutils literal"&gt;%pdb&lt;/code&gt; command makes it so that IPython automatically invokes the debugger after any exception, a mode that many users will find especially useful.&lt;/p&gt;
&lt;p&gt;It's also easy to use the debugger to help develop code, especially when you wish to set breakpoints or step through the execution of a function or script to examine the state at each stage. There are several ways to accomplish this. The first is by using &lt;code class="docutils literal"&gt;%run&lt;/code&gt; with the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-d&lt;/span&gt;&lt;/code&gt; flag, which invokes the debugger before executing any code in the passed script. You must immediately press &lt;code class="docutils literal"&gt;s&lt;/code&gt; (step) to enter the script:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [5]: run -d examples/ipython_bug.py
Breakpoint 1 at /home/wesm/code/pydata-book/examples/ipython_bug.py:1
NOTE: Enter 'c' at the ipdb&amp;gt;  prompt to start your script.
&amp;gt; &amp;lt;string&amp;gt;(1)&amp;lt;module&amp;gt;()

ipdb&amp;gt; s
--Call--
&amp;gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(1)&amp;lt;module&amp;gt;()
1---&amp;gt; 1 def works_fine():
      2     a = 5
      3     b = 6&lt;/pre&gt;
&lt;p&gt;After this point, it's up to you how you want to work your way through the file. For example, in the preceding exception, we could set a breakpoint right before calling the &lt;code class="docutils literal"&gt;works_fine&lt;/code&gt; method and run the script until we reach the breakpoint by pressing &lt;code class="docutils literal"&gt;c&lt;/code&gt; (continue):&lt;/p&gt;
&lt;pre class="literal-block"&gt;ipdb&amp;gt; b 12
ipdb&amp;gt; c
&amp;gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(12)calling_things()
     11 def calling_things():
2--&amp;gt; 12     works_fine()
     13     throws_an_exception()&lt;/pre&gt;
&lt;p&gt;At this point, you can &lt;code class="docutils literal"&gt;step&lt;/code&gt; into &lt;code class="docutils literal"&gt;works_fine()&lt;/code&gt; or execute &lt;code class="docutils literal"&gt;works_fine()&lt;/code&gt; by pressing &lt;code class="docutils literal"&gt;n&lt;/code&gt; (next) to advance to the next line:&lt;/p&gt;
&lt;pre class="literal-block"&gt;ipdb&amp;gt; n
&amp;gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(13)calling_things()
2    12     works_fine()
---&amp;gt; 13     throws_an_exception()
     14&lt;/pre&gt;
&lt;p&gt;Then, we could step into &lt;code class="docutils literal"&gt;throws_an_exception&lt;/code&gt; and advance to the line where the error occurs and look at the variables in the scope. Note that debugger commands take precedence over variable names; in such cases, preface the variables with &lt;code class="docutils literal"&gt;!&lt;/code&gt; to examine their contents:&lt;/p&gt;
&lt;pre class="literal-block"&gt;ipdb&amp;gt; s
--Call--
&amp;gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(6)throws_an_exception()
      5
----&amp;gt; 6 def throws_an_exception():
      7     a = 5

ipdb&amp;gt; n
&amp;gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(7)throws_an_exception()
      6 def throws_an_exception():
----&amp;gt; 7     a = 5
      8     b = 6

ipdb&amp;gt; n
&amp;gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(8)throws_an_exception()
      7     a = 5
----&amp;gt; 8     b = 6
      9     assert(a + b == 10)

ipdb&amp;gt; n
&amp;gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(9)throws_an_exception()
      8     b = 6
----&amp;gt; 9     assert(a + b == 10)
     10

ipdb&amp;gt; !a
5
ipdb&amp;gt; !b
6&lt;/pre&gt;
&lt;p&gt;Developing proficiency with the interactive debugger is largely a matter of practice and experience. See &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/ipython-summary/part0018_split_008.html#pdb_command_table"&gt;Table B-2&lt;/a&gt; for a full catalog of the debugger commands. If you are accustomed to using an IDE, you might find the terminal-driven debugger to be a bit unforgiving at first, but that will improve in time. Some of the Python IDEs have excellent GUI debuggers, so most users can find something that works for them.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 36%"&gt;
&lt;col style="width: 64%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Command&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Action&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;h(elp)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Display command list&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;help&lt;/code&gt; &lt;em&gt;``command``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Show documentation for &lt;em&gt;``command``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;c(ontinue)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Resume program execution&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;q(uit)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Exit debugger without executing any more code&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;b(reak)&lt;/code&gt; &lt;em&gt;``number``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Set breakpoint at &lt;em&gt;``number``&lt;/em&gt; in current file&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;b&lt;/code&gt; &lt;em&gt;``path/to/file.py:number``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Set breakpoint at line &lt;em&gt;``number``&lt;/em&gt; in specified file&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;s(tep)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Step &lt;em&gt;into&lt;/em&gt; function call&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;n(ext)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Execute current line and advance to next line at current level&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;u(p)=/=d(own)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Move up/down in function call stack&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;a(rgs)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Show arguments for current function&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;debug&lt;/code&gt; &lt;em&gt;``statement``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Invoke statement &lt;em&gt;``statement``&lt;/em&gt; in new (recursive) debugger&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;l(ist)&lt;/code&gt; &lt;em&gt;``statement``&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Show current position and context at current level of stack&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;w(here)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Print full stack trace with context at current position&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="other-ways-to-make-use-of-the-debugger"&gt;
&lt;h4&gt;Other ways to make use of the debugger&lt;/h4&gt;
&lt;p&gt;There are a couple of other useful ways to invoke the debugger. The first is by using a special &lt;code class="docutils literal"&gt;set_trace&lt;/code&gt; function (named after &lt;code class="docutils literal"&gt;pdb.set_trace&lt;/code&gt;), which is basically a “poor man's breakpoint.” Here are two small recipes you might want to put somewhere for your general use (potentially adding them to your IPython profile as I do):&lt;/p&gt;
&lt;pre class="literal-block"&gt;from IPython.core.debugger import Pdb

def set_trace():
    Pdb(color_scheme='Linux').set_trace(sys._getframe().f_back)

def debug(f, *args, **kwargs):
    pdb = Pdb(color_scheme='Linux')
    return pdb.runcall(f, *args, **kwargs)&lt;/pre&gt;
&lt;p&gt;The first function, &lt;code class="docutils literal"&gt;set_trace&lt;/code&gt;, is very simple. You can use a &lt;code class="docutils literal"&gt;set_trace&lt;/code&gt; in any part of your code that you want to temporarily stop in order to more closely examine it (e.g., right before an exception occurs):&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [7]: run examples/ipython_bug.py
&amp;gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(16)calling_things()
     15     set_trace()
---&amp;gt; 16     throws_an_exception()
     17&lt;/pre&gt;
&lt;p&gt;Pressing &lt;code class="docutils literal"&gt;c&lt;/code&gt; (continue) will cause the code to resume normally with no harm done.&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;debug&lt;/code&gt; function we just looked at enables you to invoke the interactive debugger easily on an arbitrary function call. Suppose we had written a function like the following and we wished to step through its logic:&lt;/p&gt;
&lt;pre class="literal-block"&gt;def f(x, y, z=1):
    tmp = x + y
    return tmp / z&lt;/pre&gt;
&lt;p&gt;Ordinarily using &lt;code class="docutils literal"&gt;f&lt;/code&gt; would look like &lt;code class="docutils literal"&gt;f(1, 2, z=3)&lt;/code&gt;. To instead step into &lt;code class="docutils literal"&gt;f&lt;/code&gt;, pass &lt;code class="docutils literal"&gt;f&lt;/code&gt; as the first argument to &lt;code class="docutils literal"&gt;debug&lt;/code&gt; followed by the positional and keyword arguments to be passed to &lt;code class="docutils literal"&gt;f&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [6]: debug(f, 1, 2, z=3)
&amp;gt; &amp;lt;ipython-input&amp;gt;(2)f()
      1 def f(x, y, z):
----&amp;gt; 2     tmp = x + y
      3     return tmp / z

ipdb&amp;gt;&lt;/pre&gt;
&lt;p&gt;I find that these two simple recipes save me a lot of time on a day-to-day basis.&lt;/p&gt;
&lt;p&gt;Lastly, the debugger can be used in conjunction with &lt;code class="docutils literal"&gt;%run&lt;/code&gt;. By running a script with &lt;code class="docutils literal"&gt;%run &lt;span class="pre"&gt;-d&lt;/span&gt;&lt;/code&gt;, you will be dropped directly into the debugger, ready to set any breakpoints and start the script:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [1]: %run -d examples/ipython_bug.py
Breakpoint 1 at /home/wesm/code/pydata-book/examples/ipython_bug.py:1
NOTE: Enter 'c' at the ipdb&amp;gt;  prompt to start your script.
&amp;gt; &amp;lt;string&amp;gt;(1)&amp;lt;module&amp;gt;()

ipdb&amp;gt;&lt;/pre&gt;
&lt;p&gt;Adding &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-b&lt;/span&gt;&lt;/code&gt; with a line number starts the debugger with a breakpoint set already:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [2]: %run -d -b2 examples/ipython_bug.py
Breakpoint 1 at /home/wesm/code/pydata-book/examples/ipython_bug.py:2
NOTE: Enter 'c' at the ipdb&amp;gt;  prompt to start your script.
&amp;gt; &amp;lt;string&amp;gt;(1)&amp;lt;module&amp;gt;()

ipdb&amp;gt; c
&amp;gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(2)works_fine()
      1 def works_fine():
1---&amp;gt; 2     a = 5
      3     b = 6

ipdb&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="timing-code-time-and-timeit"&gt;
&lt;h3&gt;Timing Code: %time and %timeit&lt;/h3&gt;
&lt;p&gt;For larger-scale or longer-running data analysis applications, you may wish to measure the execution time of various components or of individual statements or function calls. You may want a report of which functions are taking up the most time in a complex process. Fortunately, IPython enables you to get this information very easily while you are developing and testing your code.&lt;/p&gt;
&lt;p&gt;Timing code by hand using the built-in &lt;code class="docutils literal"&gt;time&lt;/code&gt; module and its functions &lt;code class="docutils literal"&gt;time.clock&lt;/code&gt; and &lt;code class="docutils literal"&gt;time.time&lt;/code&gt; is often tedious and repetitive, as you must write the same uninteresting boilerplate code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;import time
start = time.time()
for i in range(iterations):
    # some code to run here
elapsed_per = (time.time() - start) / iterations&lt;/pre&gt;
&lt;p&gt;Since this is such a common operation, IPython has two magic functions, &lt;code class="docutils literal"&gt;%time&lt;/code&gt; and &lt;code class="docutils literal"&gt;%timeit&lt;/code&gt;, to automate this process for you.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;%time&lt;/code&gt; runs a statement once, reporting the total execution time. Suppose we had a large list of strings and we wanted to compare different methods of selecting all strings starting with a particular prefix. Here is a simple list of 600,000 strings and two identical methods of selecting only the ones that start with &lt;code class="docutils literal"&gt;'foo'&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;# a very large list of strings
strings = ['foo', 'foobar', 'baz', 'qux',
           'python', 'Guido Van Rossum'] * 100000

method1 = [x for x in strings if x.startswith('foo')]

method2 = [x for x in strings if x[:3] == 'foo']&lt;/pre&gt;
&lt;p&gt;It looks like they should be about the same performance-wise, right? We can check for sure using &lt;code class="docutils literal"&gt;%time&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [561]: %time method1 = [x for x in strings if x.startswith('foo')]
CPU times: user 0.19 s, sys: 0.00 s, total: 0.19 s
Wall time: 0.19 s

In [562]: %time method2 = [x for x in strings if x[:3] == 'foo']
CPU times: user 0.09 s, sys: 0.00 s, total: 0.09 s
Wall time: 0.09 s&lt;/pre&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;Wall time&lt;/code&gt; (short for “wall-clock time”) is the main number of interest. So, it looks like the first method takes more than twice as long, but it's not a very precise measurement. If you try &lt;code class="docutils literal"&gt;%time&lt;/code&gt;-ing those statements multiple times yourself, you'll find that the results are somewhat variable. To get a more precise measurement, use the &lt;code class="docutils literal"&gt;%timeit&lt;/code&gt; magic function. Given an arbitrary statement, it has a heuristic to run a statement multiple times to produce a more accurate average runtime:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [563]: %timeit [x for x in strings if x.startswith('foo')]
10 loops, best of 3: 159 ms per loop

In [564]: %timeit [x for x in strings if x[:3] == 'foo']
10 loops, best of 3: 59.3 ms per loop&lt;/pre&gt;
&lt;p&gt;This seemingly innocuous example illustrates that it is worth understanding the performance characteristics of the Python standard library, NumPy, pandas, and other libraries used in this book. In larger-scale data analysis applications, those milliseconds will start to add up!&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;%timeit&lt;/code&gt; is especially useful for analyzing statements and functions with very short execution times, even at the level of microseconds (millionths of a second) or nanoseconds (billionths of a second). These may seem like insignificant amounts of time, but of course a 20 microsecond function invoked 1 million times takes 15 seconds longer than a 5 microsecond function. In the preceding example, we could very directly compare the two string operations to understand their performance characteristics:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [565]: x = 'foobar'

In [566]: y = 'foo'

In [567]: %timeit x.startswith(y)
1000000 loops, best of 3: 267 ns per loop

In [568]: %timeit x[:3] == y
10000000 loops, best of 3: 147 ns per loop&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-profiling-prun-and-run-p"&gt;
&lt;h3&gt;Basic Profiling: %prun and %run -p&lt;/h3&gt;
&lt;p&gt;Profiling code is closely related to timing code, except it is concerned with determining &lt;em&gt;where&lt;/em&gt; time is spent. The main Python profiling tool is the &lt;code class="docutils literal"&gt;cProfile&lt;/code&gt; module, which is not specific to IPython at all. &lt;code class="docutils literal"&gt;cProfile&lt;/code&gt; executes a program or any arbitrary block of code while keeping track of how much time is spent in each function.&lt;/p&gt;
&lt;p&gt;A common way to use &lt;code class="docutils literal"&gt;cProfile&lt;/code&gt; is on the command line, running an entire program and outputting the aggregated time per function. Suppose we had a simple script that does some linear algebra in a loop (computing the maximum absolute eigenvalues of a series of 100 × 100 matrices):&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy.linalg&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;eigvals&lt;/span&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_experiment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;max_eigenvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eigvals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_eigenvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;some_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run_experiment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_e62bc2a9d6c54814abf76b4e8f1a367d-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Largest one we saw: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_results&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;Largest one we saw: 12.066641847130507&lt;/pre&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_a1433e91adbd4589a3bc32bca3a2d368-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# python -m cProfile $fp&lt;/span&gt;
&lt;a name="rest_code_a1433e91adbd4589a3bc32bca3a2d368-2"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$fp&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You can run this script through &lt;code class="docutils literal"&gt;cProfile&lt;/code&gt; using the following in the command line:&lt;/p&gt;
&lt;pre class="literal-block"&gt;python -m cProfile cprof_example.py&lt;/pre&gt;
&lt;p&gt;If you try that, you'll find that the output is sorted by function name. This makes it a bit hard to get an idea of where the most time is spent, so it's very common to specify a &lt;em&gt;sort order&lt;/em&gt; using the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ python -m cProfile -s cumulative cprof_example.py
Largest one we saw: 11.923204422
    15116 function calls (14927 primitive calls) in 0.720 seconds

Ordered by: cumulative time

ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     1    0.001    0.001    0.721    0.721 cprof_example.py:1(&amp;lt;module&amp;gt;)
   100    0.003    0.000    0.586    0.006 linalg.py:702(eigvals)
   200    0.572    0.003    0.572    0.003 {numpy.linalg.lapack_lite.dgeev}
     1    0.002    0.002    0.075    0.075 __init__.py:106(&amp;lt;module&amp;gt;)
   100    0.059    0.001    0.059    0.001 {method 'randn')
     1    0.000    0.000    0.044    0.044 add_newdocs.py:9(&amp;lt;module&amp;gt;)
     2    0.001    0.001    0.037    0.019 __init__.py:1(&amp;lt;module&amp;gt;)
     2    0.003    0.002    0.030    0.015 __init__.py:2(&amp;lt;module&amp;gt;)
     1    0.000    0.000    0.030    0.030 type_check.py:3(&amp;lt;module&amp;gt;)
     1    0.001    0.001    0.021    0.021 __init__.py:15(&amp;lt;module&amp;gt;)
     1    0.013    0.013    0.013    0.013 numeric.py:1(&amp;lt;module&amp;gt;)
     1    0.000    0.000    0.009    0.009 __init__.py:6(&amp;lt;module&amp;gt;)
     1    0.001    0.001    0.008    0.008 __init__.py:45(&amp;lt;module&amp;gt;)
   262    0.005    0.000    0.007    0.000 function_base.py:3178(add_newdoc)
   100    0.003    0.000    0.005    0.000 linalg.py:162(_assertFinite)
   ...&lt;/pre&gt;
&lt;p&gt;Only the first 15 rows of the output are shown. It's easiest to read by scanning down the &lt;code class="docutils literal"&gt;cumtime&lt;/code&gt; column to see how much total time was spent &lt;em&gt;inside&lt;/em&gt; each function. Note that if a function calls some other function, &lt;em&gt;the clock does not stop running&lt;/em&gt;. &lt;code class="docutils literal"&gt;cProfile&lt;/code&gt; records the start and end time of each function call and uses that to produce the timing.&lt;/p&gt;
&lt;p&gt;In addition to the command-line usage, &lt;code class="docutils literal"&gt;cProfile&lt;/code&gt; can also be used programmatically to profile arbitrary blocks of code without having to run a new process. IPython has a convenient interface to this capability using the &lt;code class="docutils literal"&gt;%prun&lt;/code&gt; command and the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/code&gt; option to &lt;code class="docutils literal"&gt;%run&lt;/code&gt;. &lt;code class="docutils literal"&gt;%prun&lt;/code&gt; takes the same “command-line options” as &lt;code class="docutils literal"&gt;cProfile&lt;/code&gt; but will profile an arbitrary Python statement instead of a whole &lt;em&gt;.py&lt;/em&gt; file:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_4049e02a1e324fcf83beae9900f29339-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;time&lt;/span&gt; run_experiment()
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_7debb0baa9cf425ab66d3ffd3bce209e-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;prun&lt;/span&gt; -l 7 -s cumulative run_experiment()
&lt;/pre&gt;&lt;pre class="literal-block"&gt;In [4]:
         4203 function calls in 0.643 seconds

Ordered by: cumulative time
List reduced from 32 to 7 due to restriction &amp;lt;7&amp;gt;

ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     1    0.000    0.000    0.643    0.643 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)
     1    0.001    0.001    0.643    0.643 cprof_example.py:4(run_experiment)
   100    0.003    0.000    0.583    0.006 linalg.py:702(eigvals)
   200    0.569    0.003    0.569    0.003 {numpy.linalg.lapack_lite.dgeev}
   100    0.058    0.001    0.058    0.001 {method 'randn'}
   100    0.003    0.000    0.005    0.000 linalg.py:162(_assertFinite)
   200    0.002    0.000    0.002    0.000 {method 'all' of 'numpy.ndarray'}&lt;/pre&gt;
&lt;p&gt;Similarly, calling &lt;code class="docutils literal"&gt;%run &lt;span class="pre"&gt;-p&lt;/span&gt; &lt;span class="pre"&gt;-s&lt;/span&gt; cumulative cprof_example.py&lt;/code&gt; has the same effect as the command-line approach, except you never have to leave IPython.&lt;/p&gt;
&lt;p&gt;In the Jupyter notebook, you can use the &lt;code class="docutils literal"&gt;%%prun&lt;/code&gt; magic (two &lt;code class="docutils literal"&gt;%&lt;/code&gt; signs) to profile an entire code block. This pops up a separate window with the profile output. This can be useful in getting possibly quick answers to questions like, “Why did that code block take so long to run?”&lt;/p&gt;
&lt;p&gt;There are other tools available that help make profiles easier to understand when you are using IPython or Jupyter. One of these is &lt;a class="reference external" href="https://github.com/jiffyclub/snakeviz/"&gt;SnakeViz&lt;/a&gt;, which produces an interactive visualization of the profile results using d3.js.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="profiling-a-function-line-by-line"&gt;
&lt;h3&gt;Profiling a Function Line by Line&lt;/h3&gt;
&lt;p&gt;In some cases the information you obtain from &lt;code class="docutils literal"&gt;%prun&lt;/code&gt; (or another &lt;code class="docutils literal"&gt;cProfile&lt;/code&gt;-based profile method) may not tell the whole story about a function's execution time, or it may be so complex that the results, aggregated by function name, are hard to interpret. For this case, there is a small library called &lt;code class="docutils literal"&gt;line_profiler&lt;/code&gt; (obtainable via PyPI or one of the package management tools). It contains an IPython extension enabling a new magic function &lt;code class="docutils literal"&gt;%lprun&lt;/code&gt; that computes a line-by-line-profiling of one or more functions. You can enable this extension by modifying your IPython configuration (see the IPython documentation or the section on configuration later in this chapter) to include the following line:&lt;/p&gt;
&lt;pre class="literal-block"&gt;# A list of dotted module names of IPython extensions to load.
c.TerminalIPythonApp.extensions = ['line_profiler']&lt;/pre&gt;
&lt;p&gt;You can also run the command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%load_ext line_profiler&lt;/pre&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;line_profiler&lt;/code&gt; can be used programmatically (see the full documentation), but it is perhaps most powerful when used interactively in IPython. Suppose you had a module &lt;code class="docutils literal"&gt;prof_mod&lt;/code&gt; with the following code doing some NumPy array operations:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;load_ext&lt;/span&gt; line_profiler
&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy.random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randn&lt;/span&gt;
&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_and_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;summed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;summed&lt;/span&gt;
&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9f21aadf423b47aabebd0fcfe27fa181-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;add_and_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If we wanted to understand the performance of the &lt;code class="docutils literal"&gt;add_and_sum&lt;/code&gt; function, &lt;code class="docutils literal"&gt;%prun&lt;/code&gt; gives us the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [569]: %run prof_mod

In [570]: x = randn(3000, 3000)

In [571]: y = randn(3000, 3000)

In [572]: %prun add_and_sum(x, y)
         4 function calls in 0.049 seconds
   Ordered by: internal time
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.036    0.036    0.046    0.046 prof_mod.py:3(add_and_sum)
        1    0.009    0.009    0.009    0.009 {method 'sum' of 'numpy.ndarray'}
        1    0.003    0.003    0.049    0.049 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/pre&gt;
&lt;p&gt;This is not especially enlightening. With the &lt;code class="docutils literal"&gt;line_profiler&lt;/code&gt; IPython extension activated, a new command &lt;code class="docutils literal"&gt;%lprun&lt;/code&gt; is available. The only difference in usage is that we must instruct &lt;code class="docutils literal"&gt;%lprun&lt;/code&gt; which function or functions we wish to profile. The general syntax is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%lprun -f func1 -f func2 statement_to_profile&lt;/pre&gt;
&lt;p&gt;In this case, we want to profile &lt;code class="docutils literal"&gt;add_and_sum&lt;/code&gt;, so we run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [573]: %lprun -f add_and_sum add_and_sum(x, y)
Timer unit: 1e-06 s
File: prof_mod.py
Function: add_and_sum at line 3
Total time: 0.045936 s
Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     3                                           def add_and_sum(x, y):
     4         1        36510  36510.0     79.5      added = x + y
     5         1         9425   9425.0     20.5      summed = added.sum(axis=1)
     6         1            1      1.0      0.0      return summed&lt;/pre&gt;
&lt;p&gt;This can be much easier to interpret. In this case we profiled the same function we used in the statement. Looking at the preceding module code, we could call &lt;code class="docutils literal"&gt;call_function&lt;/code&gt; and profile that as well as &lt;code class="docutils literal"&gt;add_and_sum&lt;/code&gt;, thus getting a full picture of the performance of the code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [574]: %lprun -f add_and_sum -f call_function call_function()
Timer unit: 1e-06 s
File: prof_mod.py
Function: add_and_sum at line 3
Total time: 0.005526 s
Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     3                                           def add_and_sum(x, y):
     4         1         4375   4375.0     79.2      added = x + y
     5         1         1149   1149.0     20.8      summed = added.sum(axis=1)
     6         1            2      2.0      0.0      return summed
File: prof_mod.py
Function: call_function at line 8
Total time: 0.121016 s
Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           def call_function():
     9         1        57169  57169.0     47.2      x = randn(1000, 1000)
    10         1        58304  58304.0     48.2      y = randn(1000, 1000)
    11         1         5543   5543.0      4.6      return add_and_sum(x, y)&lt;/pre&gt;
&lt;p&gt;As a general rule of thumb, I tend to prefer &lt;code class="docutils literal"&gt;%prun&lt;/code&gt; (&lt;code class="docutils literal"&gt;cProfile&lt;/code&gt;) for “macro” profiling and &lt;code class="docutils literal"&gt;%lprun&lt;/code&gt; (&lt;code class="docutils literal"&gt;line_profiler&lt;/code&gt;) for “micro” profiling. It's worthwhile to have a good understanding of both tools.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;The reason that you must explicitly specify the names of the functions you want to profile with &lt;code class="docutils literal"&gt;%lprun&lt;/code&gt; is that the overhead of “tracing” the execution time of each line is substantial. Tracing functions that are not of interest has the potential to significantly alter the profile results.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tips-for-productive-code-development-using-ipython"&gt;
&lt;h2&gt;4 Tips for Productive Code Development Using IPython&lt;/h2&gt;
&lt;p&gt;Writing code in a way that makes it easy to develop, debug, and ultimately &lt;em&gt;use&lt;/em&gt; interactively may be a paradigm shift for many users. There are procedural details like code reloading that may require some adjustment as well as coding style concerns.&lt;/p&gt;
&lt;p&gt;Therefore, implementing most of the strategies described in this section is more of an art than a science and will require some experimentation on your part to determine a way to write your Python code that is effective for you. Ultimately you want to structure your code in a way that makes it easy to use iteratively and to be able to explore the results of running a program or function as effortlessly as possible. I have found software designed with IPython in mind to be easier to work with than code intended only to be run as as standalone command-line application. This becomes especially important when something goes wrong and you have to diagnose an error in code that you or someone else might have written months or years beforehand.&lt;/p&gt;
&lt;div class="section" id="reloading-module-dependencies"&gt;
&lt;h3&gt;Reloading Module Dependencies&lt;/h3&gt;
&lt;p&gt;In Python, when you type &lt;code class="docutils literal"&gt;import some_lib&lt;/code&gt;, the code in &lt;code class="docutils literal"&gt;some_lib&lt;/code&gt; is executed and all the variables, functions, and imports defined within are stored in the newly created &lt;code class="docutils literal"&gt;some_lib&lt;/code&gt; module namespace. The next time you type &lt;code class="docutils literal"&gt;import some_lib&lt;/code&gt;, you will get a reference to the existing module namespace. The potential difficulty in interactive IPython code development comes when you, say, &lt;code class="docutils literal"&gt;%run&lt;/code&gt; a script that depends on some other module where you may have made changes. Suppose I had the following code in &lt;em&gt;testscript.py&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;import some_lib

x = 5
y = [1, 2, 3, 4]
result = some_lib.get_answer(x, y)&lt;/pre&gt;
&lt;p&gt;If you were to execute &lt;code class="docutils literal"&gt;%run test_script.py&lt;/code&gt; then modify &lt;em&gt;somelib.py&lt;/em&gt;, the next time you execute &lt;code class="docutils literal"&gt;%run test_script.py&lt;/code&gt; you will still get the &lt;em&gt;old version&lt;/em&gt; of &lt;em&gt;somelib.py&lt;/em&gt; because of Python's “load-once” module system. This behavior differs from some other data analysis environments, like MATLAB, which automatically propagate code changes.To cope with this, you have a couple of options. The first way is to use the &lt;code class="docutils literal"&gt;reload&lt;/code&gt; function in the &lt;code class="docutils literal"&gt;importlib&lt;/code&gt; module in the standard library:&lt;/p&gt;
&lt;pre class="literal-block"&gt;import some_lib
import importlib

importlib.reload(some_lib)&lt;/pre&gt;
&lt;p&gt;This guarantees that you will get a fresh copy of &lt;em&gt;somelib.py&lt;/em&gt; every time you run &lt;em&gt;testscript.py&lt;/em&gt;. Obviously, if the dependencies go deeper, it might be a bit tricky to be inserting usages of &lt;code class="docutils literal"&gt;reload&lt;/code&gt; all over the place. For this problem, IPython has a special &lt;code class="docutils literal"&gt;dreload&lt;/code&gt; function (&lt;em&gt;not&lt;/em&gt; a magic function) for “deep” (recursive) reloading of modules. If I were to run &lt;em&gt;somelib.py&lt;/em&gt; then type &lt;code class="docutils literal"&gt;dreload(some_lib)&lt;/code&gt;, it will attempt to reload &lt;code class="docutils literal"&gt;some_lib&lt;/code&gt; as well as all of its dependencies. This will not work in all cases, unfortunately, but when it does it beats having to restart IPython.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code-design-tips"&gt;
&lt;h3&gt;Code Design Tips&lt;/h3&gt;
&lt;p&gt;There's no simple recipe for this, but here are some high-level principles I have found effective in my own work.&lt;/p&gt;
&lt;div class="section" id="keep-relevant-objects-and-data-alive"&gt;
&lt;h4&gt;Keep relevant objects and data alive&lt;/h4&gt;
&lt;p&gt;It's not unusual to see a program written for the command line with a structure somewhat like the following trivial example:&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#    from my_functions import g&lt;/span&gt;
&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;7.5&lt;/span&gt;
&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f0634b4ad9eb4d1095ea4a604fc89222-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 1306)&lt;/p&gt;
&lt;p&gt;Literal block expected; none found.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Do you see what might go wrong if we were to run this program in IPython? After it's done, none of the results or objects defined in the &lt;code class="docutils literal"&gt;main&lt;/code&gt; function will be accessible in the IPython shell. A better way is to have whatever code is in &lt;code class="docutils literal"&gt;main&lt;/code&gt; execute directly in the module's global namespace (or in the &lt;code class="docutils literal"&gt;if  __name__ =&lt;/code&gt; 'main':= block, if you want the module to also be importable). That way, when you &lt;code class="docutils literal"&gt;%run&lt;/code&gt; the code, you'll be able to look at all of the variables defined in &lt;code class="docutils literal"&gt;main&lt;/code&gt;. This is equivalent to defining top-level variables in cells in the Jupyter notebook.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flat-is-better-than-nested"&gt;
&lt;h4&gt;Flat is better than nested&lt;/h4&gt;
&lt;p&gt;Deeply nested code makes me think about the many layers of an onion. When testing or debugging a function, how many layers of the onion must you peel back in order to reach the code of interest? The idea that “flat is better than nested” is a part of the Zen of Python, and it applies generally to developing code for interactive use as well. Making functions and classes as decoupled and modular as possible makes them easier to test (if you are writing unit tests), debug, and use interactively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="overcome-a-fear-of-longer-files"&gt;
&lt;h4&gt;Overcome a fear of longer files&lt;/h4&gt;
&lt;p&gt;If you come from a Java (or another such language) background, you may have been told to keep files short. In many languages, this is sound advice; long length is usually a bad “code smell,” indicating refactoring or reorganization may be necessary. However, while developing code using IPython, working with 10 small but interconnected files (under, say, 100 lines each) is likely to cause you more headaches in general than two or three longer files. Fewer files means fewer modules to reload and less jumping between files while editing, too. I have found maintaining larger modules, each with high &lt;em&gt;internal&lt;/em&gt; cohesion, to be much more useful and Pythonic. After iterating toward a solution, it sometimes will make sense to refactor larger files into smaller ones.&lt;/p&gt;
&lt;p&gt;Obviously, I don't support taking this argument to the extreme, which would to be to put all of your code in a single monstrous file. Finding a sensible and intuitive module and package structure for a large codebase often takes a bit of work, but it is especially important to get right in teams. Each module should be internally cohesive, and it should be as obvious as possible where to find functions and classes responsible for each area of functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-ipython-features"&gt;
&lt;h2&gt;5 Advanced IPython Features&lt;/h2&gt;
&lt;p&gt;Making full use of the IPython system may lead you to write your code in a slightly different way, or to dig into the configuration.&lt;/p&gt;
&lt;div class="section" id="making-your-own-classes-ipython-friendly"&gt;
&lt;h3&gt;Making Your Own Classes IPython-Friendly&lt;/h3&gt;
&lt;p&gt;IPython makes every effort to display a console-friendly string representation of any object that you inspect. For many objects, like dicts, lists, and tuples, the built-in &lt;code class="docutils literal"&gt;pprint&lt;/code&gt; module is used to do the nice formatting. In user-defined classes, however, you have to generate the desired string output yourself. Suppose we had the following simple class:&lt;/p&gt;
&lt;pre class="literal-block"&gt;class Message:
    def __init__(self, msg):
        self.msg = msg&lt;/pre&gt;
&lt;p&gt;If you wrote this, you would be disappointed to discover that the default output for your class isn't very nice:&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [576]: x = Message('I have a secret')

In [577]: x
Out[577]: &amp;lt;__main__.Message instance at 0x60ebbd8&amp;gt;&lt;/pre&gt;
&lt;p&gt;IPython takes the string returned by the &lt;code class="docutils literal"&gt;__repr__&lt;/code&gt; magic method (by doing &lt;code class="docutils literal"&gt;output = repr(obj)&lt;/code&gt;) and prints that to the console. Thus, we can add a simple &lt;code class="docutils literal"&gt;__repr__&lt;/code&gt; method to the preceding class to get a more helpful output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;class Message:
    def __init__(self, msg):
        self.msg = msg

    def __repr__(self):
        return 'Message: %s' % self.msg&lt;/pre&gt;
&lt;pre class="literal-block"&gt;In [579]: x = Message('I have a secret')
In [580]: x
Out[580]: Message: I have a secret&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="profiles-and-configuration"&gt;
&lt;h3&gt;Profiles and Configuration&lt;/h3&gt;
&lt;p&gt;Most aspects of the appearance (colors, prompt, spacing between lines, etc.) and behavior of the IPython and Jupyter environments are configurable through an extensive configuration system. Here are some things you can do via configuration:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Change the color scheme&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change how the input and output prompts look, or remove the blank line after &lt;code class="docutils literal"&gt;Out&lt;/code&gt; and before the next &lt;code class="docutils literal"&gt;In&lt;/code&gt; prompt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute an arbitrary list of Python statements (e.g., imports that you use all the time or anything else you want to happen each time you launch IPython)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable always-on IPython extensions, like the &lt;code class="docutils literal"&gt;%lprun&lt;/code&gt; magic in &lt;code class="docutils literal"&gt;line_profiler&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enabling Jupyter extensions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define your own magics or system aliases&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Configurations for the IPython shell are specified in special &lt;em&gt;ipythonconfig.py&lt;/em&gt; files, which are usually found in the &lt;em&gt;.ipython/&lt;/em&gt; directory in your user home directory. Configuration is performed based on a particular &lt;em&gt;profile&lt;/em&gt;. When you start IPython normally, you load up, by default, the &lt;em&gt;default profile&lt;/em&gt;, stored in the &lt;em&gt;profiledefault&lt;/em&gt; directory. Thus, on my Linux OS the full path to my default IPython configuration file is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;/home/wesm/.ipython/profile_default/ipython_config.py&lt;/pre&gt;
&lt;p&gt;To initialize this file on your system, run in the terminal:&lt;/p&gt;
&lt;pre class="literal-block"&gt;ipython profile create&lt;/pre&gt;
&lt;p&gt;I'll spare you the gory details of what's in this file. Fortunately it has comments describing what each configuration option is for, so I will leave it to the reader to tinker and customize. One additional useful feature is that it's possible to have &lt;em&gt;multiple profiles&lt;/em&gt;. Suppose you wanted to have an alternative IPython configuration tailored for a particular application or project. Creating a new profile is as simple as typing something like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;ipython profile create secret_project&lt;/pre&gt;
&lt;p&gt;Once you've done this, edit the config files in the newly created &lt;em&gt;profilesecretproject&lt;/em&gt; directory and then launch IPython like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ ipython --profile=secret_project
Python 3.5.1 | packaged by conda-forge | (default, May 20 2016, 05:22:56)
Type "copyright", "credits" or "license" for more information.

IPython 5.1.0 -- An enhanced Interactive Python.
?         -&amp;gt; Introduction and overview of IPython's features.
%quickref -&amp;gt; Quick reference.
help      -&amp;gt; Python's own help system.
object?   -&amp;gt; Details about 'object', use 'object??' for extra details.

IPython profile: secret_project&lt;/pre&gt;
&lt;p&gt;As always, the online IPython documentation is an excellent resource for more on profiles and configuration.&lt;/p&gt;
&lt;p&gt;Configuration for Jupyter works a little differently because you can use its notebooks with languages other than Python. To create an analogous Jupyter config file, run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;jupyter notebook --generate-config&lt;/pre&gt;
&lt;p&gt;This writes a default config file to the &lt;em&gt;.jupyter/jupyternotebookconfig.py&lt;/em&gt; directory in your home directory. After editing this to suit your needs, you may rename it to a different file, like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ mv ~/.jupyter/jupyter_notebook_config.py ~/.jupyter/my_custom_config.py&lt;/pre&gt;
&lt;p&gt;When launching Jupyter, you can then add the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--config&lt;/span&gt;&lt;/code&gt; argument:&lt;/p&gt;
&lt;pre class="literal-block"&gt;jupyter notebook --config=~/.jupyter/my_custom_config.py&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;6 Conclusion&lt;/h2&gt;
&lt;p&gt;As you work through the code examples in this book and grow your skills as a Python programmer, I encourage you to keep learning about the IPython and Jupyter ecosystems. Since these projects have been designed to assist user productivity, you may discover tools that enable you to do your work more easily than using the Python language and its computational libraries by themselves.&lt;/p&gt;
&lt;p&gt;You can also find a wealth of interesting Jupyter notebooks on the &lt;a class="reference external" href="https://nbviewer.jupyter.org/"&gt;nbviewer website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since a module or package may be imported in many different places in a particular program, Python caches a module's code the first time it is imported rather than executing the code in the module every time. Otherwise, modularity and good code organization could potentially cause inefficiency in an application.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_47f567629e8d4ee4b3fea0495a725f19-1"&gt;&lt;/a&gt;ls *.html &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; line&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;a name="rest_code_47f567629e8d4ee4b3fea0495a725f19-2"&gt;&lt;/a&gt;pandoc --wrap&lt;span class="o"&gt;=&lt;/span&gt;none &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; -o &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="p"&gt;%html&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;org
&lt;a name="rest_code_47f567629e8d4ee4b3fea0495a725f19-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code shell"&gt;&lt;a name="rest_code_36ba8dc00e824574bcb1d9de656f6e21-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt; ls [1-9]*.org | sort -n &lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h2&gt;Publish&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_df4c79177b47460fa7890ae4de249028-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;a name="rest_code_df4c79177b47460fa7890ae4de249028-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;a name="rest_code_df4c79177b47460fa7890ae4de249028-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_df4c79177b47460fa7890ae4de249028-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# nprint(os.getcwd())&lt;/span&gt;
&lt;a name="rest_code_df4c79177b47460fa7890ae4de249028-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#print(__file__)&lt;/span&gt;
&lt;a name="rest_code_df4c79177b47460fa7890ae4de249028-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# print(sys.argv)&lt;/span&gt;
&lt;a name="rest_code_df4c79177b47460fa7890ae4de249028-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_df4c79177b47460fa7890ae4de249028-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"pandoc --wrap=none py-Ipython-offprint.org -o ~/Public/nikola_post/posts/Ipython-Summary.rst"&lt;/span&gt;
&lt;a name="rest_code_df4c79177b47460fa7890ae4de249028-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>ipython</category><guid>https://alinbxsorcerer.github.io/posts/ipython-summary/</guid><pubDate>Tue, 20 Sep 2016 12:53:29 GMT</pubDate></item></channel></rss>