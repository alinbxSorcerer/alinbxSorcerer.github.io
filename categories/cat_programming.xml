<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>A Magic Land Declared by David (Posts about programming)</title><link>https://alinbxsorcerer.github.io/</link><description></description><atom:link href="https://alinbxsorcerer.github.io/categories/cat_programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:davad.fhl.wang@foxmail.com"&gt;David&lt;/a&gt; </copyright><lastBuildDate>Tue, 03 Dec 2019 07:42:54 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>淘宝双十一的销售额造假了吗? 用本福特定律检验</title><link>https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id1" id="id4"&gt;0.引言&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id2" id="id5"&gt;1.构建本福特柱状图&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id3" id="id6"&gt;2.构建历年销售额的柱状图&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#qualitive-analysis-take-a-view-by-setting-them-side-by-side" id="id7"&gt;3.Qualitive Analysis: Take a view by setting them side by side&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#quantitative-analysis" id="id8"&gt;4.Quantitative Analysis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#publish" id="id9"&gt;5.Publish&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id4"&gt;0.引言&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;看过李永乐老师的视频 &lt;a class="reference external" href="https://www.youtube.com/watch?v=CCo4k9Ax7cM&amp;amp;t=7s"&gt;淘宝“双11”2684亿销售额造假了吗？用本福特定律检验一下&lt;/a&gt;, 用本福特定律检验下:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id5"&gt;1.构建本福特柱状图&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-13"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.18&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-16"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_79a5ffaebe274e6ca28eeceb55137c52-17"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="/images/PogAvJ.png" src="https://alinbxsorcerer.github.io/images/PogAvJ.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id6"&gt;2.构建历年销售额的柱状图&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# data, unit: ten million RMB&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;sales_by_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"2009"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-3"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2010"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"93.6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-4"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2011"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"520"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-5"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2012"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"1910"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-6"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2013"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"3500"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-7"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2014"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"5710"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-8"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2015"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"9120"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-9"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2016"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"12070"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-10"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2018"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"21350"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-11"&gt;&lt;/a&gt;         &lt;span class="s2"&gt;"2019"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"26840"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-14"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sales_by_year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-21"&gt;&lt;/a&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-23"&gt;&lt;/a&gt;&lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-25"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-26"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-28"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.18&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-29"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_11768ea24b0743669e0a72164a4209c6-30"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="/images/QtppzN.png" src="https://alinbxsorcerer.github.io/images/QtppzN.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="qualitive-analysis-take-a-view-by-setting-them-side-by-side"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id7"&gt;3.Qualitive Analysis: Take a view by setting them side by side&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.18&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;benford&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# create benford bar graph&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-16"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-18"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-19"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_47f7d9b559a345e0946f709026b0b735-20"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="/images/p1Nqxa.png" src="https://alinbxsorcerer.github.io/images/p1Nqxa.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="quantitative-analysis"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id8"&gt;4.Quantitative Analysis&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;从图表上直观看, 匹配度不高, 那么匹配的具体数值是多少呢?&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;benford_seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_4c8c9468f9f64f6895dc3161fb2529a9-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chisquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;benford_seq&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Power_divergenceResult(statistic=14.508778904402215, pvalue=0.06943079701067742)&lt;/p&gt;
&lt;p&gt;匹配度为6.94%.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/#id9"&gt;5.Publish&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_962eda3f0c1f4e2e9a30fba68e16b5ac-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;a name="rest_code_962eda3f0c1f4e2e9a30fba68e16b5ac-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pandoc --wrap=none benford_law.org -o ~/Public/nikola_post/posts/淘宝销售额造假了吗.rst"&lt;/span&gt;
&lt;a name="rest_code_962eda3f0c1f4e2e9a30fba68e16b5ac-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_0e6f0b5b1b4246cbaeeef5e2e3a88db3-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;  ~/Documents/OrgMode/ORG/images
&lt;a name="rest_code_0e6f0b5b1b4246cbaeeef5e2e3a88db3-2"&gt;&lt;/a&gt;ls -t  &lt;span class="p"&gt;|&lt;/span&gt; head -n &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; line&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; cp &lt;span class="nv"&gt;$line&lt;/span&gt;     ~/Public/nikola_post/images/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>benford</category><category>matplotlib</category><category>numpy</category><category>python</category><guid>https://alinbxsorcerer.github.io/posts/taobao-shuangshiyi-zaojiale-ma/</guid><pubDate>Wed, 20 Nov 2019 12:53:29 GMT</pubDate></item><item><title>Emacs中的datetime与clock</title><link>https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id1" id="id3"&gt;前文概要:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#emacs" id="id4"&gt;Emacs中的时间格式与任务的时间属性&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#datetime" id="id5"&gt;Datetime时间戳与任务的时间属性&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#clock" id="id6"&gt;Clock计时与中断处理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id2" id="id7"&gt;总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id3"&gt;前文概要:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;时间管理的三件工具 (clock, datetime, calendar)
时间变量的顺序与时间表示的格式 (%a %b-d %H:%M %Y)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="emacs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id4"&gt;Emacs中的时间格式与任务的时间属性&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;时间管理的三件工具: 钟表, 日历, 以及二者结合的便利工具datetime.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://orgmode.org/manual/Dates-and-Times.html#Dates-and-Times"&gt;The Org Manual: Dates and
Times&lt;/a&gt;主要应用datetime和clock两个工具管理时间.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;时间戳的格式 （Datetime)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;datetime格式 &amp;lt;2019-05-18 sat 09:52&amp;gt; C-u C-c . 6个时间变量 %Y-%m-%d
%a %H:%M&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;date格式 &amp;lt;2019-05-18 sat&amp;gt; C-c . 4个时间变量&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="datetime"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id5"&gt;Datetime时间戳与任务的时间属性&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;时间(戳)到底什么? 时间戳从概念上辨析为两个类别 1) appointment 2)
schedule. 可以将主动安排的时间理解为schedule,
被动参与的时间为appointment&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事件(任务)的四个时间属性&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Repeater 三种repeater,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;standard 时间戳后面 +1w day, week, month, year&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;过期后只需要补上一次, ++1w(比如每周给父母打电话)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以档次完成时间为下一个interval的开始点,比如3个周理一次发. 理发
.+3w; 任何时间点上理完发,自动从该时间点上启动下一轮repeat.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time Span 会议的时间 &amp;lt;2019-05-18 sat 10:04&amp;gt;–&amp;lt;2019-05-18 sat 10:05&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scheduled 任务的开始时间, SCHEDULED: &amp;lt;2019-05-18 sat&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deadline 任务的截止时间 DEADLINE: &amp;lt;2019-05-18 sat&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任务的监控与跟踪 Check&lt;/p&gt;
&lt;p&gt;整合管理deadline与schedule.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-check-deadlines&lt;/span&gt;&lt;/code&gt;, C-7 C-c / d
#7天内将要截止的任务.变量org-deadline-warning-days&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-check-before-date&lt;/span&gt;&lt;/code&gt;, given-date前的schedule and appointments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-check-after-date&lt;/span&gt;&lt;/code&gt;, given-date后的schedule and appointments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(这些功能并不好用)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clock"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id6"&gt;Clock计时与中断处理&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;基本计时功能, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-clock-in&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-clock-out&lt;/span&gt;&lt;/code&gt; 可以手动修改计时,
然后调用=org-evaluate-time-range=或者=update-maybe=&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任务的第五个属性, efforts 总结任务的5个属性, 1)schedule 2)deadline
3)repeater 4)time span 5)预测的time span(efforts).
efforts是核心参数,逐步提高对时间和任务的掌控.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Resolve idle time and continuous clocking
中断计时的问题,=调出来org-resolve-clocks=重新设置.k(keep),
s(substract),只用keep便可.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/#id7"&gt;总结&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;计时与计算&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任务的5个时间属性&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;idle中断计时的处理.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>time</category><guid>https://alinbxsorcerer.github.io/posts/emacszhong-de-datetimeyu-clock/</guid><pubDate>Sat, 18 May 2019 12:35:15 GMT</pubDate></item><item><title>评注Eamcs: 31.The Calendar and the Diary</title><link>https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id1" id="id8"&gt;总结:&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#movement-in-the-calendar" id="id9"&gt;31.1 Movement in the Calendar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#motion-by-standard-lengths-of-time" id="id10"&gt;31.1.1 Motion by Standard Lengths of Time&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#beginning-or-end-of-week-month-or-year" id="id11"&gt;31.1.2 Beginning or End of Week, Month or Year&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#specified-dates" id="id12"&gt;31.1.3 Specified Dates&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#scrolling-in-the-calendar" id="id13"&gt;31.2 Scrolling in the Calendar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#counting-days" id="id14"&gt;31.3 Counting Days&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#miscellaneous-calendar-commands" id="id15"&gt;31.4 Miscellaneous Calendar Commands&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#writing-calendar-files" id="id16"&gt;31.5 Writing Calendar Files&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#holidays" id="id17"&gt;31.6 Holidays&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#times-of-sunrise-and-sunset" id="id18"&gt;31.7 Times of Sunrise and Sunset&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#phases-of-the-moon" id="id19"&gt;31.8 Phases of the Moon&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#conversion-to-and-from-other-calendars" id="id20"&gt;31.9 Conversion To and From Other Calendars&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#supported-calendar-systems" id="id21"&gt;31.9.1 Supported Calendar Systems&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#converting-to-other-calendars" id="id22"&gt;31.9.2 Converting To Other Calendars&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#converting-from-other-calendars" id="id23"&gt;31.9.3 Converting From Other Calendars&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#the-diary" id="id24"&gt;31.10 The Diary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#the-diary-file" id="id25"&gt;31.10.1 The Diary File&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#displaying-the-diary" id="id26"&gt;31.10.2 Displaying the Diary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#date-formats" id="id27"&gt;31.10.3 Date Formats&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#commands-to-add-to-the-diary" id="id28"&gt;31.10.4 Commands to Add to the Diary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#special-diary-entries" id="id29"&gt;31.10.5 Special Diary Entries&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#appointments" id="id30"&gt;31.10.6 Appointments&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#importing-and-exporting-diary-entries" id="id31"&gt;31.10.7 Importing and Exporting Diary Entries&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#daylight-saving-time" id="id32"&gt;31.11 Daylight Saving Time&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#summing-time-intervals" id="id33"&gt;31.12 Summing Time Intervals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#more-advanced-features-of-the-calendar-and-diary" id="id34"&gt;31.13 More advanced features of the Calendar and Diary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#customizing-the-calendar" id="id35"&gt;31.13.1 Customizing the Calendar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#customizing-the-holidays" id="id36"&gt;31.13.2 Customizing the Holidays&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#converting-from-the-mayan-calendar" id="id37"&gt;31.13.3 Converting from the Mayan Calendar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#date-display-format" id="id38"&gt;31.13.4 Date Display Format&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#time-display-format" id="id39"&gt;31.13.5 Time Display Format&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#customizing-the-diary" id="id40"&gt;31.13.6 Customizing the Diary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#diary-entries-using-non-gregorian-calendars" id="id41"&gt;31.13.7 Diary Entries Using non-Gregorian Calendars&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#diary-display" id="id42"&gt;31.13.8 Diary Display&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#fancy-diary-display" id="id43"&gt;31.13.9 Fancy Diary Display&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#sexp-entries-and-the-fancy-diary-display" id="id44"&gt;31.13.10 Sexp Entries and the Fancy Diary Display&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id8"&gt;总结:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;三个部分:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;基本的操作&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;与社会的互动, holidays and calendars&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;与天地四时的互动, sunrise-sunset 因此需要再加上两个时间点, sunrise and sunset&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="/images/emacs-calendars-structure.jpeg" src="https://alinbxsorcerer.github.io/images/emacs-calendars-structure.jpeg" style="width: 700px;"&gt;
&lt;p&gt;Emacs provides the functions of a desk calendar, with a diary of planned
or past events. It also has facilities for managing your appointments,
and keeping track of how much time you spend working on certain
projects.&lt;/p&gt;
&lt;p&gt;To enter the calendar, type M-x calendar. This displays a three-month
calendar centered on the current month, with point on the current date.
With a numeric argument, as in C-u M-x calendar, it prompts you for the
month and year to be the center of the three-month calendar. The
calendar uses its own buffer, whose major mode is Calendar mode.&lt;/p&gt;
&lt;p&gt;mouse-3 in the calendar brings up a menu of operations on a particular
date; mouse-2 brings up a menu of commonly used calendar features that
are independent of any particular date. To exit the calendar, type q.&lt;/p&gt;
&lt;p&gt;我想要一个类似在桌面操作系统中, 可以操作任务的日历.&lt;/p&gt;
&lt;div class="section" id="movement-in-the-calendar"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id9"&gt;31.1 Movement in the Calendar&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Calendar mode provides commands to move through the calendar
&lt;code class="docutils literal"&gt;in logical units&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;of time such as days, weeks, months, and years. If you move outside the
three months originally displayed, the calendar display scrolls
automatically through time to make the selected date visible. Moving to
a date lets you view its holidays or diary entries, or convert it to
other calendars; moving by long time periods is also useful simply to
scroll the calendar.&lt;/p&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_07092f5b9649463c99a4145dd8899245-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;;修改calendar-week-start-day&lt;/span&gt;
&lt;a name="rest_code_07092f5b9649463c99a4145dd8899245-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;calendar-week-start-day&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;对movement的总结, span, 按照四个logical unit, day, week, month, year&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;backwords and forwards with specified lenghts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;selector, begin and end&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;specified dates&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="motion-by-standard-lengths-of-time"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id10"&gt;31.1.1 Motion by Standard Lengths of Time&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The commands for movement in the calendar buffer parallel the commands
for movement in text. You can move forward and backward by days, weeks,
months, and years.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C-f&lt;/p&gt;
&lt;p&gt;Move point one day forward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-forward-day&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-b&lt;/p&gt;
&lt;p&gt;Move point one day backward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-backward-day&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-n&lt;/p&gt;
&lt;p&gt;Move point one week forward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-forward-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-p&lt;/p&gt;
&lt;p&gt;Move point one week backward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-backward-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-}
Move point one month forward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-forward-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-{&lt;/p&gt;
&lt;p&gt;Move point one month backward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-backward-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in logical unit- C-x ]&lt;/p&gt;
&lt;p&gt;Move point one year forward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-forward-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C-x [&lt;/p&gt;
&lt;p&gt;Move point one year backward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-backward-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The day and week commands are natural analogues of the usual Emacs
commands for moving by characters and by lines. Just as C-n usually
moves to the same column in the following line, in Calendar mode it
moves to the same day in the following week. And C-p moves to the same
day in the previous week.&lt;/p&gt;
&lt;p&gt;The arrow keys are equivalent to C-f, C-b, C-n and C-p, just as they
normally are in other modes.&lt;/p&gt;
&lt;p&gt;The commands for motion by months and years work like those for weeks,
but move a larger distance. The month commands M-} and M-{ move forward
or backward by an entire month. The year commands C-x ] and C-x [ move
forward or backward a whole year.&lt;/p&gt;
&lt;p&gt;The easiest way to remember these commands is to consider months and
years analogous to paragraphs and pages of text, respectively. But the
calendar movement commands themselves do not quite parallel those for
movement through text: the ordinary Emacs paragraph commands move to the
beginning or end of a paragraph, whereas these month and year commands
move by an entire month or an entire year, keeping the same date within
the month or year.&lt;/p&gt;
&lt;p&gt;All these commands accept a numeric argument as a repeat count. For
convenience, the digit keys and the minus sign specify numeric arguments
in Calendar mode even without the Meta modifier. For example, 100 C-f
moves point 100 days forward from its present location.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="beginning-or-end-of-week-month-or-year"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id11"&gt;31.1.2 Beginning or End of Week, Month or Year&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A week (or month, or year) is not just a quantity of days; we think of
weeks (months, years) as starting on particular dates. So Calendar mode
provides commands to move to the start or end of a week, month or year:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C-a&lt;/p&gt;
&lt;p&gt;Move point to start of week (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-beginning-of-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-e&lt;/p&gt;
&lt;p&gt;Move point to end of week (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-end-of-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-a&lt;/p&gt;
&lt;p&gt;Move point to start of month (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-beginning-of-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-e&lt;/p&gt;
&lt;p&gt;Move point to end of month (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-end-of-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-&amp;lt;&lt;/p&gt;
&lt;p&gt;Move point to start of year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-beginning-of-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-&amp;gt;&lt;/p&gt;
&lt;p&gt;Move point to end of year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-end-of-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These commands also take numeric arguments as repeat counts, with the
repeat count indicating how many weeks, months, or years to move
backward or forward.&lt;/p&gt;
&lt;p&gt;By default, weeks begin on Sunday. To make them begin on Monday instead,
set the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-week-start-day&lt;/span&gt;&lt;/code&gt; to 1. To change which day
headers are highlighted as weekend days, set the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-weekend-days&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="specified-dates"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id12"&gt;31.1.3 Specified Dates&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Calendar mode provides commands for moving to a particular date
specified in various ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;g d&lt;/p&gt;
&lt;p&gt;Move point to specified date (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g D&lt;/p&gt;
&lt;p&gt;Move point to specified day of year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-day-of-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g w&lt;/p&gt;
&lt;p&gt;Move point to specified week of year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-iso-goto-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;o&lt;/p&gt;
&lt;p&gt;Center calendar around specified month (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-other-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;Move point to today's date (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-today&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;g d (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-date&lt;/span&gt;&lt;/code&gt;) prompts for a year, a month, and a day
of the month, and then moves to that date. Because the calendar
includes all dates from the beginning of the current era, you must
type the year in its entirety; that is, type '2010', not '10'.&lt;/p&gt;
&lt;p&gt;g D (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-day-of-year&lt;/span&gt;&lt;/code&gt;) prompts for a year and day
number, and moves to that date. Negative day numbers count backward
from the end of the year. g w (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-iso-goto-week&lt;/span&gt;&lt;/code&gt;) prompts
for a year and week number, and moves to that week.&lt;/p&gt;
&lt;p&gt;o (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-other-month&lt;/span&gt;&lt;/code&gt;) prompts for a month and year, then
centers the three-month calendar around that month.&lt;/p&gt;
&lt;p&gt;You can return to today's date with . (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-goto-today&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="scrolling-in-the-calendar"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id13"&gt;31.2 Scrolling in the Calendar&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The calendar display scrolls automatically through time when you move
out of the visible portion. You can also scroll it manually. Imagine
that the calendar window contains a long strip of paper with the months
on it. Scrolling the calendar means moving the strip horizontally, so
that new months become visible in the window.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;Scroll calendar one month forward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-scroll-left&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;lt;&lt;/p&gt;
&lt;p&gt;Scroll calendar one month backward (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-scroll-right&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-v Scroll forward by three months
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-scroll-left-three-months&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-v Scroll backward by three months
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-scroll-right-three-months&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most basic calendar scroll commands scroll by one month at a time.
This means that there are two months of overlap between the display
before the command and the display after. &amp;gt; scrolls the calendar
contents one month forward in time. &amp;lt; scrolls the contents one month
backwards in time.&lt;/p&gt;
&lt;p&gt;The commands C-v and M-v scroll the calendar by an entire
screenful—three months—in analogy with the usual meaning of these
commands. C-v makes later dates visible and M-v makes earlier dates
visible. These commands take a numeric argument as a repeat count; in
particular, since C-u multiplies the next command by four, typing C-u
C-v scrolls the calendar forward by a year and typing C-u M-v scrolls
the calendar backward by a year.&lt;/p&gt;
&lt;p&gt;The function keys (or ) and (or ) are equivalent to C-v and M-v, just as
they are in other modes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="counting-days"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id14"&gt;31.3 Counting Days&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;M-=&lt;/p&gt;
&lt;p&gt;Display the number of days in the current region
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-count-days-region&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To determine the number of days in a range, set the mark on one date
using C-, move point to another date, and type M-=
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-count-days-region&lt;/span&gt;&lt;/code&gt;). The numbers of days shown is
&lt;em&gt;inclusive&lt;/em&gt;; that is, it includes the days specified by mark and
point.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="miscellaneous-calendar-commands"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id15"&gt;31.4 Miscellaneous Calendar Commands&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Display day-in-year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-print-day-of-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C-c C-l&lt;/p&gt;
&lt;p&gt;Regenerate the calendar window (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-redraw&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;lt;SPC&amp;gt;&lt;/p&gt;
&lt;p&gt;Scroll the next window up (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;scroll-other-window&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;lt;DEL&amp;gt;&lt;/p&gt;
&lt;p&gt;Scroll the next window down (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;scroll-other-window-down&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;q&lt;/p&gt;
&lt;p&gt;Exit from calendar (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-exit&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;p&gt;To display the number of days elapsed since the start of the year, or
the number of days remaining in the year, type the p d command
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-print-day-of-year&lt;/span&gt;&lt;/code&gt;). This displays both of those numbers in
the echo area. The count of days elapsed includes the selected date. The
count of days remaining does not include that date.&lt;/p&gt;
&lt;p&gt;If the calendar window text gets corrupted, type C-c C-l
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-redraw&lt;/span&gt;&lt;/code&gt;) to redraw it. (This can only happen if you use
non-Calendar-mode editing commands.)&lt;/p&gt;
&lt;p&gt;In Calendar mode, you can use (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;scroll-other-window&lt;/span&gt;&lt;/code&gt;) and
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;scroll-other-window-down&lt;/span&gt;&lt;/code&gt;) to scroll the other window (if there is
one) up or down, respectively. This is handy when you display a list of
holidays or diary entries in another window.&lt;/p&gt;
&lt;p&gt;To exit from the calendar, type q (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-exit&lt;/span&gt;&lt;/code&gt;). This buries all
buffers related to the calendar, selecting other buffers. (If a frame
contains a dedicated calendar window, exiting from the calendar deletes
or iconifies that frame depending on the value of
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-remove-frame-by-deleting&lt;/span&gt;&lt;/code&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-calendar-files"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id16"&gt;31.5 Writing Calendar Files&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can write calendars and diary entries to HTML and LaTeX files.&lt;/p&gt;
&lt;p&gt;The Calendar HTML commands produce files of HTML code that contain
calendar, holiday, and diary entries. Each file applies to one month,
and has a name of the format yyyy-mm.html, where yyyy and mm are the
four-digit year and two-digit month, respectively. The variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-directory&lt;/span&gt;&lt;/code&gt; specifies the default output directory for the
HTML files. To prevent holidays from being shown, customize
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-holidays&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Diary entries enclosed by &lt;code class="docutils literal"&gt;&amp;lt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&amp;gt;&lt;/code&gt; are interpreted as HTML tags
(for example: this is a diary entry with some red text). You can change
the overall appearance of the displayed HTML pages (for example, the
color of various page elements, header styles) via a stylesheet cal.css
in the directory containing the HTML files (see the value of the
variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-css-default&lt;/span&gt;&lt;/code&gt; for relevant style settings).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;H m&lt;/p&gt;
&lt;p&gt;Generate a one-month calendar (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-cursor-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;H y&lt;/p&gt;
&lt;p&gt;Generate a calendar file for each month of a year, as well as an
index page (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-cursor-year&lt;/span&gt;&lt;/code&gt;). By default, this command
writes files to a yyyy subdirectory—if this is altered some
hyperlinks between years will not work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-print-day-number-flag&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;,
then the monthly calendars show the day-of-the-year number. The variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-html-year-index-cols&lt;/span&gt;&lt;/code&gt; specifies the number of columns in the
yearly index page.&lt;/p&gt;
&lt;p&gt;The Calendar LaTeX commands produce a buffer of LaTeX code that prints
as a calendar. Depending on the command you use, the printed calendar
covers the day, week, month or year that point is in.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;t m&lt;/p&gt;
&lt;p&gt;Generate a one-month calendar (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-month&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t M&lt;/p&gt;
&lt;p&gt;Generate a sideways-printing one-month calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-month-landscape&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t d&lt;/p&gt;
&lt;p&gt;Generate a one-day calendar (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-day&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t w 1&lt;/p&gt;
&lt;p&gt;Generate a one-page calendar for one week, with hours
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t w 2&lt;/p&gt;
&lt;p&gt;Generate a two-page calendar for one week, with hours
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-week2&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t w 3&lt;/p&gt;
&lt;p&gt;Generate an ISO-style calendar for one week, without hours
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-week-iso&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t w 4&lt;/p&gt;
&lt;p&gt;Generate a calendar for one Monday-starting week, with hours
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-week-monday&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t w W&lt;/p&gt;
&lt;p&gt;Generate a two-page calendar for one week, without hours
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-week2-summary&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t f w&lt;/p&gt;
&lt;p&gt;Generate a Filofax-style two-weeks-at-a-glance calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-filofax-2week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t f W&lt;/p&gt;
&lt;p&gt;Generate a Filofax-style one-week-at-a-glance calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-filofax-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t y&lt;/p&gt;
&lt;p&gt;Generate a calendar for one year (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t Y&lt;/p&gt;
&lt;p&gt;Generate a sideways-printing calendar for one year
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-year-landscape&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t f y&lt;/p&gt;
&lt;p&gt;Generate a Filofax-style calendar for one year
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-cursor-filofax-year&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these commands print the calendar sideways (in landscape mode),
so it can be wider than it is long. Some of them use Filofax paper size
(3.75in x 6.75in). All of these commands accept a prefix argument, which
specifies how many days, weeks, months or years to print (starting
always with the selected one).&lt;/p&gt;
&lt;p&gt;If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-holidays&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt; (the default),
then the printed calendars show the holidays in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-holidays&lt;/span&gt;&lt;/code&gt;.
If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-diary&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt; (the default is
&lt;code class="docutils literal"&gt;nil&lt;/code&gt;), diary entries are included also (in monthly, Filofax, and
iso-week calendars only). If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-rules&lt;/span&gt;&lt;/code&gt; is
non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt; (the default is &lt;code class="docutils literal"&gt;nil&lt;/code&gt;), the calendar displays ruled
pages in styles that have sufficient room. Consult the documentation of
the individual cal-tex functions to see which calendars support which
features.&lt;/p&gt;
&lt;p&gt;You can use the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cal-tex-preamble-extra&lt;/span&gt;&lt;/code&gt; to insert extra
LaTeX commands in the preamble of the generated document if you need to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="holidays"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id17"&gt;31.6 Holidays&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Emacs calendar knows about many major and minor holidays, and can
display them. You can add your own holidays to the default list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mouse-3 Holidays&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;h&lt;/p&gt;
&lt;p&gt;Display holidays for the selected date
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-cursor-holidays&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;x&lt;/p&gt;
&lt;p&gt;Mark holidays in the calendar window (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mark-holidays&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;u&lt;/p&gt;
&lt;p&gt;Unmark calendar window (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-unmark&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a&lt;/p&gt;
&lt;p&gt;List all holidays for the displayed three months in another window
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-list-holidays&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x holidays&lt;/p&gt;
&lt;p&gt;List all holidays for three months around today's date in another
window.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;Define: Veterans' day 老兵 Etymology: Old Lithuanian vetušas "old,
aged;" and compare wether). 助记: Veterans day&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code elisp"&gt;&lt;a name="rest_code_544c0528e1244185b5e8dc97ec40f05b-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;;(sunrise-sunset)&lt;/span&gt;
&lt;a name="rest_code_544c0528e1244185b5e8dc97ec40f05b-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lunar-phases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;M-x list-holidays&lt;/p&gt;
&lt;p&gt;List holidays in another window for a specified range of years.&lt;/p&gt;
&lt;p&gt;To see if any holidays fall on a given date, position point on that
date in the calendar window and use the h command. Alternatively,
click on that date with mouse-3 and then choose Holidays from the
menu that appears. Either way, this displays the holidays for that
date, in the echo area if they fit there, otherwise in a separate
window.&lt;/p&gt;
&lt;p&gt;To view the distribution of holidays for all the dates shown in the
calendar, use the x command. This displays the dates that are
holidays in a different face. See
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Calendar-Customizing"&gt;calendar-holiday-marker&lt;/a&gt;.
The command applies both to the currently visible months and to other
months that subsequently become visible by scrolling. To turn marking
off and erase the current marks, type u, which also erases any diary
marks (see
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Diary"&gt;Diary&lt;/a&gt;).
If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mark-holidays-flag&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;,
creating or updating the calendar marks holidays automatically.&lt;/p&gt;
&lt;p&gt;To get even more detailed information, use the a command, which
displays a separate buffer containing a list of all holidays in the
current three-month range. You can use and in the calendar window to
scroll that list up and down, respectively.&lt;/p&gt;
&lt;p&gt;The command M-x holidays displays the list of holidays for the
current month and the preceding and succeeding months; this works
even if you don't have a calendar window. If the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-view-holidays-initially-flag&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;, creating
the calendar displays holidays in this way. If you want the list of
holidays centered around a different month, use C-u M-x holidays,
which prompts for the month and year.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The holidays known to Emacs include United States holidays and the major
Bahá'í, Chinese, Christian, Islamic, and Jewish holidays; also the
solstices and equinoxes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Define: solstices &lt;em&gt;ˈsɑːl.stɪs&lt;/em&gt; 至日, 至点 Etymology: Middle English:
from Old French, from Latin solstitium, from sol ‘sun’ + stit-
‘stopped, stationary’ (from the verb sistere). 助记:sol(sun) stice,
stand, 停止的点.&lt;/p&gt;
&lt;p&gt;Define: equinox &lt;em&gt;ˈek.wə.nɑːks&lt;/em&gt; Etymology: late Middle English: from
Old French equinoxe or Latin aequinoctium, from aequi- ‘equal’ + nox,
noct- ‘night’. 助记: equal好说,nox是night&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The command M-x holiday-list displays the list of holidays for a range
of years. This function asks you for the starting and stopping years,
and allows you to choose all the holidays or one of several categories
of holidays. You can use this command even if you don't have a calendar
window.&lt;/p&gt;
&lt;p&gt;The dates used by Emacs for holidays are based on &lt;em&gt;current practice&lt;/em&gt;,
not historical fact. For example Veteran's Day began in 1919, but is
shown in earlier years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="times-of-sunrise-and-sunset"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id18"&gt;31.7 Times of Sunrise and Sunset&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Special calendar commands can tell you, to within a minute or two, the
times of sunrise and sunset for any date.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mouse-3 Sunrise/sunset&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S&lt;/p&gt;
&lt;p&gt;Display times of sunrise and sunset for the selected date
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-sunrise-sunset&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x sunrise-sunset&lt;/p&gt;
&lt;p&gt;Display times of sunrise and sunset for today's date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C-u M-x sunrise-sunset&lt;/p&gt;
&lt;p&gt;Display times of sunrise and sunset for a specified date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x calendar-sunrise-sunset-month&lt;/p&gt;
&lt;p&gt;Display times of sunrise and sunset for the selected month.&lt;/p&gt;
&lt;p&gt;Within the calendar, to display the &lt;em&gt;local times&lt;/em&gt; of sunrise and
sunset in the echo area, move point to the date you want, and type S.
Alternatively, click mouse-3 on the date, then choose
'Sunrise/sunset' from the menu that appears. The command M-x
sunrise-sunset is available outside the calendar to display this
information for today's date or a specified date. To specify a date
other than today, use C-u M-x sunrise-sunset, which prompts for the
year, month, and day.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can display the times of sunrise and sunset for any location and any
date with C-u C-u M-x sunrise-sunset. This asks you for a longitude,
latitude, number of minutes difference from Coordinated Universal Time,
and date, and then tells you the times of sunrise and sunset for that
location on that date.&lt;/p&gt;
&lt;p&gt;Because the times of sunrise and sunset depend on the location on earth,
you need to tell Emacs your latitude, longitude, and location name
before using these commands. Here is an example of what to set:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(setq calendar-latitude 40.1)
(setq calendar-longitude -88.2)
(setq calendar-location-name "Urbana, IL")&lt;/pre&gt;
&lt;p&gt;Use one decimal place in the values of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-latitude&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-longitude&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your time zone also affects the local time of sunrise and sunset. Emacs
usually gets time zone information from the operating system, but if
these values are not what you want (or if the operating system does not
supply them), you must set them yourself. Here is an example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(setq calendar-time-zone -360)
(setq calendar-standard-time-zone-name "CST")
(setq calendar-daylight-time-zone-name "CDT")&lt;/pre&gt;
&lt;p&gt;The value of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-time-zone&lt;/span&gt;&lt;/code&gt; is the number of minutes difference
between your local standard time and Coordinated Universal Time
(Greenwich time). The values of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-standard-time-zone-name&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-time-zone-name&lt;/span&gt;&lt;/code&gt; are the abbreviations used in your
time zone. Emacs displays the times of sunrise and sunset &lt;em&gt;corrected for
daylight saving time&lt;/em&gt;. See&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Daylight-Saving"&gt;Daylight
Saving&lt;/a&gt;,
for how daylight saving time is determined.&lt;/p&gt;
&lt;p&gt;As a user, you might find it convenient to set the calendar location
variables for your usual physical location in your .emacs file. If you
are a system administrator, you may want to set these variables for all
users in a default.el file. See &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Init-File"&gt;Init
File&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="phases-of-the-moon"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id19"&gt;31.8 Phases of the Moon&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;These calendar commands display the dates and times of the phases of the
moon (new moon, first quarter, full moon, last quarter). This feature is
useful for debugging problems that depend on the phase of the moon.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;M Display the dates and times for all the quarters of the moon for
the three-month period shown (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-lunar-phases&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x lunar-phases&lt;/p&gt;
&lt;p&gt;Display dates and times of the quarters of the moon for three months
around today's date.&lt;/p&gt;
&lt;p&gt;Within the calendar, use the M command to display a separate buffer
of the phases of the moon for the current three-month range. The
dates and times listed are accurate to within a few minutes.&lt;/p&gt;
&lt;p&gt;Outside the calendar, use the command M-x lunar-phases to display the
list of the phases of the moon for the current month and the
preceding and succeeding months. For information about a different
month, use C-u M-x lunar-phases, which prompts for the month and
year.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The dates and times given for the phases of the moon are given in local
time (corrected for daylight saving, when appropriate). See the
discussion in the previous section. See
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Sunrise_002fSunset"&gt;Sunrise/Sunset&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conversion-to-and-from-other-calendars"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id20"&gt;31.9 Conversion To and From Other Calendars&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Emacs calendar displayed is &lt;em&gt;always&lt;/em&gt; the Gregorian calendar,
sometimes called the New Style calendar, which is used in most of the
world today. However, this calendar did not exist before the sixteenth
century and was not widely used before the eighteenth century; it did
not fully displace the Julian calendar and gain universal acceptance
until the early twentieth century. The Emacs calendar can display any
month since January, year 1 of the current era, but the calendar
displayed is always the Gregorian, even for a date at which the
Gregorian calendar did not exist.&lt;/p&gt;
&lt;p&gt;While Emacs cannot display other calendars, it can convert dates to and
from several other calendars.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Calendar-Systems"&gt;Calendar
Systems&lt;/a&gt;:
The calendars Emacs understands (aside from Gregorian).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#To-Other-Calendar"&gt;To Other
Calendar&lt;/a&gt;:
Converting the selected date to various calendars.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#From-Other-Calendar"&gt;From Other
Calendar&lt;/a&gt;:
Moving to a date specified in another calendar.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="supported-calendar-systems"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id21"&gt;31.9.1 Supported Calendar Systems&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The ISO commercial calendar is often used in business.&lt;/p&gt;
&lt;p&gt;The Julian calendar, named after Julius Caesar, was the one used in
Europe throughout medieval times, and in many countries up until the
nineteenth century.&lt;/p&gt;
&lt;p&gt;Astronomers use a simple counting of days elapsed since noon, Monday,
January 1, 4713 B.C. on the Julian calendar. The number of days elapsed
is called the Julian day number or the Astronomical day number.&lt;/p&gt;
&lt;p&gt;The Hebrew calendar is used by tradition in the Jewish religion. The
Emacs calendar program uses the Hebrew calendar to determine the dates
of Jewish holidays. Hebrew calendar dates begin and end at sunset.&lt;/p&gt;
&lt;p&gt;The Islamic calendar is used in many predominantly Islamic countries.
Emacs uses it to determine the dates of Islamic holidays. There is no
universal agreement in the Islamic world about the calendar; Emacs uses
a widely accepted version, but the precise dates of Islamic holidays
often depend on proclamation by religious authorities, not on
calculations. As a consequence, the actual dates of observance can vary
slightly from the dates computed by Emacs. Islamic calendar dates begin
and end at sunset.&lt;/p&gt;
&lt;p&gt;The French Revolutionary calendar was created by the Jacobins after the
1789 revolution, to represent a more secular and nature-based view of
the annual cycle, and to install a 10-day week in a rationalization
measure similar to the metric system. The French government officially
abandoned this calendar at the end of 1805.&lt;/p&gt;
&lt;p&gt;The Maya of Central America used three separate, overlapping calendar
systems, the &lt;em&gt;long count&lt;/em&gt;, the &lt;em&gt;tzolkin&lt;/em&gt;, and the &lt;em&gt;haab&lt;/em&gt;. Emacs knows
about all three of these calendars. Experts dispute the exact
correlation between the Mayan calendar and our calendar; Emacs uses the
Goodman-Martinez-Thompson correlation in its calculations.&lt;/p&gt;
&lt;p&gt;The Copts use a calendar based on the ancient Egyptian solar calendar.
Their calendar consists of twelve 30-day months followed by an extra
five-day period. Once every fourth year they add a leap day to this
extra period to make it six days. The Ethiopic calendar is identical in
structure, but has different year numbers and month names.&lt;/p&gt;
&lt;p&gt;The Persians use a solar calendar based on a design of Omar Khayyam.
Their calendar consists of twelve months of which the first six have 31
days, the next five have 30 days, and the last has 29 in ordinary years
and 30 in leap years. Leap years occur in a complicated pattern every
four or five years. The calendar implemented here is the arithmetical
Persian calendar championed by Birashk, based on a 2,820-year cycle. It
differs from the astronomical Persian calendar, which is based on
astronomical events. As of this writing the first future discrepancy is
projected to occur on March 20, 2025. It is currently not clear what the
official calendar of Iran will be at that time.&lt;/p&gt;
&lt;p&gt;The Chinese calendar is a complicated system of lunar months arranged
into solar years. The years go in cycles of sixty, each year containing
either twelve months in an ordinary year or thirteen months in a leap
year; each month has either 29 or 30 days. Years, ordinary months, and
days are named by combining one of ten celestial stems with one of
twelve terrestrial branches for a total of sixty names that are repeated
in a cycle of sixty.&lt;/p&gt;
&lt;p&gt;The Bahá'í calendar system is based on a solar cycle of 19 months with
19 days each. The four remaining intercalary days are placed between the
18th and 19th months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="converting-to-other-calendars"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id22"&gt;31.9.2 Converting To Other Calendars&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following commands describe the selected date (the date at point) in
various other calendar systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mouse-3 Other calendars&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p o&lt;/p&gt;
&lt;p&gt;Display the selected date in various other calendars.
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-print-other-dates&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p c&lt;/p&gt;
&lt;p&gt;Display ISO commercial calendar equivalent for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-iso-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p j&lt;/p&gt;
&lt;p&gt;Display Julian date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-julian-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p a&lt;/p&gt;
&lt;p&gt;Display astronomical (Julian) day number for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-astro-print-day-number&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p h&lt;/p&gt;
&lt;p&gt;Display Hebrew date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-hebrew-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p i&lt;/p&gt;
&lt;p&gt;Display Islamic date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-islamic-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p f&lt;/p&gt;
&lt;p&gt;Display French Revolutionary date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-french-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p b&lt;/p&gt;
&lt;p&gt;Display Bahá'í date for selected day (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-bahai-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p C&lt;/p&gt;
&lt;p&gt;Display Chinese date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-chinese-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p k&lt;/p&gt;
&lt;p&gt;Display Coptic date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-coptic-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p e&lt;/p&gt;
&lt;p&gt;Display Ethiopic date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-ethiopic-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p p&lt;/p&gt;
&lt;p&gt;Display Persian date for selected day
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-persian-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p m&lt;/p&gt;
&lt;p&gt;Display Mayan date for selected day (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-print-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Otherwise, move point to the date you want to convert, then type the
appropriate command starting with p from the table above. The prefix p
is a mnemonic for "print", since Emacs "prints" the equivalent date in
the echo area. p o displays the date in all forms known to Emacs. You
can also use mouse-3 and then choose Other calendars from the menu that
appears. This displays the equivalent forms of the date in all the
calendars Emacs understands, in the form of a menu. (Choosing an
alternative from this menu doesn't actually do anything—the menu is used
only for display.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="converting-from-other-calendars"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id23"&gt;31.9.3 Converting From Other Calendars&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can use the other supported calendars to specify a date to move to.
This section describes the commands for doing this using calendars other
than Mayan; for the Mayan calendar, see the following section.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;g c&lt;/p&gt;
&lt;p&gt;Move to a date specified in the ISO commercial calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-iso-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g w&lt;/p&gt;
&lt;p&gt;Move to a week specified in the ISO commercial calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-iso-goto-week&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g j&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Julian calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-julian-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g a&lt;/p&gt;
&lt;p&gt;Move to a date specified with an astronomical (Julian) day number
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-astro-goto-day-number&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g b&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Bahá'í calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-bahai-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g h&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Hebrew calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-hebrew-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g i&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Islamic calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-islamic-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g f&lt;/p&gt;
&lt;p&gt;Move to a date specified in the French Revolutionary calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-french-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g C&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Chinese calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-chinese-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g p&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Persian calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-persian-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g k&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Coptic calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-coptic-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g e&lt;/p&gt;
&lt;p&gt;Move to a date specified in the Ethiopic calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-ethiopic-goto-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These commands ask you for a date on the other calendar, move point to
the Gregorian calendar date equivalent to that date, and display the
other calendar's date in the echo area. Emacs uses strict completion
(see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Completion-Exit"&gt;Completion
Exit&lt;/a&gt;)
whenever it asks you to type a month name, so you don't have to worry
about the spelling of Hebrew, Islamic, or French names.&lt;/p&gt;
&lt;p&gt;One common issue concerning the Hebrew calendar is the computation of
the anniversary of a date of death, called a yahrzeit. The Emacs
calendar includes a facility for such calculations. If you are in the
calendar, the command M-x calendar-hebrew-list-yahrzeits asks you for a
range of years and then displays a list of the yahrzeit dates for those
years for the date given by point. If you are not in the calendar, this
command first asks you for the date of death and the range of years, and
then displays the list of yahrzeit dates.&lt;/p&gt;
&lt;div class="section" id="the-diary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id24"&gt;31.10 The Diary&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Emacs diary keeps track of appointments or other events on a daily
basis, in &lt;code class="docutils literal"&gt;conjunction&lt;/code&gt; with the calendar. To use the diary feature,
you must first create a diary file containing a list of events and their
dates. Then Emacs can automatically pick out and display the events for
today, for the immediate future, or for any specified date.&lt;/p&gt;
&lt;p&gt;Although you probably will start by creating a diary manually, Emacs
provides a number of commands to let you view, add, and change diary
entries.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-diary-file"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id25"&gt;31.10.1 The Diary File&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Your diary file is a file that records events associated with particular
dates. The name of the diary file is specified by the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-file&lt;/span&gt;&lt;/code&gt;. The default is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.emacs.d/diary&lt;/span&gt;&lt;/code&gt;, though for
compatibility with older versions Emacs will use ~/diary if it exists.&lt;/p&gt;
&lt;p&gt;Each entry in the diary file describes one event and consists of one or
more lines. An entry always begins with a date specification at the left
margin. The rest of the entry is simply text to describe the event. If
the entry has more than one line, then the lines after the first must
begin with whitespace to indicate they continue a previous entry. Lines
that do not begin with valid dates and do not continue a preceding entry
are ignored. Here's an example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;12/22/2015  Twentieth wedding anniversary!
10/22       Ruth's birthday.
* 21, *:    Payday
Tuesday--weekly meeting with grad students at 10am
         Supowit, Shen, Bitner, and Kapoor to attend.
1/13/89     Friday the thirteenth!!
thu 4pm     squash game with Lloyd.
mar 16      Dad's birthday
April 15, 2016 Income tax due.
* 15        time cards due.&lt;/pre&gt;
&lt;p&gt;This example uses extra spaces to align the event descriptions of most
of the entries. Such formatting is purely a matter of taste.&lt;/p&gt;
&lt;p&gt;You can also use a format where the first line of a diary entry consists
only of the date or day name (with no following blanks or punctuation).
For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;02/11/2012
      Bill B. visits Princeton today
      2pm Cognitive Studies Committee meeting
      2:30-5:30 Liz at Lawrenceville
      4:00pm Dentist appt
      7:30pm Dinner at George's
      8:00-10:00pm concert&lt;/pre&gt;
&lt;p&gt;This entry will have a different appearance if you use the simple diary
display (see`Diary
Display &amp;lt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Diary-Display"&gt;https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Diary-Display&lt;/a&gt;&amp;gt;`__).
The simple diary display omits the date line at the beginning; only the
continuation lines appear. This style of entry looks neater when you
display just a single day's entries, but can cause confusion if you ask
for more than one day's entries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="displaying-the-diary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id26"&gt;31.10.2 Displaying the Diary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once you have created a diary file, you can use the calendar to view it.
You can also view today's events outside of Calendar mode. In the
following, key bindings refer to the Calendar buffer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mouse-3 Diary&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;Display all diary entries for the selected date
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-view-entries&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;s&lt;/p&gt;
&lt;p&gt;Display the entire diary file (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-show-all-entries&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;m&lt;/p&gt;
&lt;p&gt;Mark all visible dates that have diary entries
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-mark-entries&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;u&lt;/p&gt;
&lt;p&gt;Unmark the calendar window (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-unmark&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x diary-print-entries&lt;/p&gt;
&lt;p&gt;Print hard copy of the diary display as it appears.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x diary&lt;/p&gt;
&lt;p&gt;Display all diary entries for today's date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M-x diary-mail-entries&lt;/p&gt;
&lt;p&gt;Mail yourself email reminders about upcoming diary entries.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Displaying the diary entries with d shows in a separate buffer the diary
entries for the selected date in the calendar. The mode line of the new
buffer shows the date of the diary entries. Holidays are shown either in
the buffer or in the mode line, depending on the display method you
choose (see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Diary-Display"&gt;Diary
Display&lt;/a&gt;).
If you specify a numeric argument with d, it shows all the diary entries
for that many successive days. Thus, 2 d displays all the entries for
the selected date and for the following day.&lt;/p&gt;
&lt;p&gt;Another way to display the diary entries for a date is to click mouse-3
on the date, and then choose Diary entries from the menu that appears.
If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-view-diary-initially-flag&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;,
creating the calendar lists the diary entries for the current date
(provided the current date is visible).&lt;/p&gt;
&lt;p&gt;To get a broader view of which days are mentioned in the diary, use the
m command. This marks the dates that have diary entries in a different
face. See
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Calendar-Customizing"&gt;diary-entry-marker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This command applies both to the months that are currently visible and
to those that subsequently become visible after scrolling. To turn
marking off and erase the current marks, type u, which also turns off
holiday marks (see
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Holidays"&gt;Holidays&lt;/a&gt;).
If the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mark-diary-entries-flag&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;,
creating or updating the calendar marks diary dates automatically.&lt;/p&gt;
&lt;p&gt;To prevent an individual diary entry from being marked in the calendar,
insert the string that &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-nonmarking-symbol&lt;/span&gt;&lt;/code&gt; specifies (the
default is '&amp;amp;') at the beginning of the entry, before the date. This has
no effect on display of the entry in the diary buffer; it only affects
marks on dates in the calendar. Nonmarking entries can be useful for
generic entries that would otherwise mark many different dates.&lt;/p&gt;
&lt;p&gt;To see the full diary file, rather than just some of the entries, use
the s command.&lt;/p&gt;
&lt;p&gt;The command M-x diary displays the diary entries for the current date,
independently of the calendar display, and optionally for the next few
days as well; the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-number-of-entries&lt;/span&gt;&lt;/code&gt; specifies how
many days to include. See
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Diary-Customizing"&gt;diary-number-of-entries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you put &lt;code class="docutils literal"&gt;(diary)&lt;/code&gt; in your .emacs file, this automatically displays
a window with the day's diary entries when you start Emacs.&lt;/p&gt;
&lt;p&gt;Some people like to receive email notifications of events in their
diary. To send such mail to yourself, use the command M-x
diary-mail-entries. A prefix argument specifies how many days (starting
with today) to check; otherwise, the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-mail-days&lt;/span&gt;&lt;/code&gt; says
how many days.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="date-formats"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id27"&gt;31.10.3 Date Formats&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are some sample diary entries, illustrating different ways of
formatting a date. The examples all show dates in American order (month,
day, year), but Calendar mode supports European order (day, month, year)
and ISO order (year, month, day) as options.&lt;/p&gt;
&lt;pre class="literal-block"&gt;4/20/12  Switch-over to new tabulation system
apr. 25  Start tabulating annual results
4/30  Results for April are due
*/25  Monthly cycle finishes
Friday  Don't leave without backing up files&lt;/pre&gt;
&lt;p&gt;The first entry appears only once, on April 20, 2012. The second and
third appear every year on the specified dates, and the fourth uses a
wildcard (asterisk) for the month, so it appears on the 25th of every
month. The final entry appears every week on Friday.&lt;/p&gt;
&lt;p&gt;You can use just numbers to express a date, as in 'month/day' or
'month/day/year'. This must be followed by a nondigit. In the date
itself, month and day are numbers of one or two digits. The optional
year is also a number, and may be abbreviated to the last two digits;
that is, you can use '11/12/2012' or '11/12/12'.&lt;/p&gt;
&lt;p&gt;Dates can also have the form 'monthname day' or 'monthname day, year',
where the month's name can be spelled in full or abbreviated (with or
without a period). The preferred abbreviations for month and day names
can be set using the variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-abbrev-length&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-month-abbrev-array&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-day-abbrev-array&lt;/span&gt;&lt;/code&gt;. The
default is to use the first three letters of a name as its abbreviation.
Case is not significant.&lt;/p&gt;
&lt;p&gt;A date may be generic,that is, partially unspecified. Then the entry
applies to all dates that match the specification. If the date does not
contain a year, it is generic and applies to any year. Alternatively,
month, day, or year can be '*'; this matches any month, day, or year,
respectively. Thus, a diary entry ‘3///&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id2"&gt;&lt;span class="problematic" id="id3"&gt;*&lt;/span&gt;&lt;/a&gt;' matches any day in March of
any year; so does ‘march /'.&lt;/p&gt;
&lt;div class="system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 1085); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline emphasis start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you prefer the European style of writing dates (in which the day
comes before the month), or the ISO style (in which the order is year,
month, day), type M-x calendar-set-date-style while in the calendar, or
customize the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-date-style&lt;/span&gt;&lt;/code&gt;. This affects how diary
dates are interpreted, date display, and the order in which some
commands expect their arguments to be given.&lt;/p&gt;
&lt;p&gt;You can use the name of a day of the week as a generic date which
applies to any date falling on that day of the week. You can abbreviate
the day of the week as described above, or spell it in full; case is not
significant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="commands-to-add-to-the-diary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id28"&gt;31.10.4 Commands to Add to the Diary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While in the calendar, there are several commands to create diary
entries. The basic commands are listed here; more sophisticated commands
are in the next section (see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Special-Diary-Entries"&gt;Special Diary
Entries&lt;/a&gt;).
Entries can also be based on non-Gregorian calendars. See &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Non_002dGregorian-Diary"&gt;Non-Gregorian
Diary&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;i d&lt;/p&gt;
&lt;p&gt;Add a diary entry for the selected date (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i w&lt;/p&gt;
&lt;p&gt;Add a diary entry for the selected day of the week
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-weekly-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i m&lt;/p&gt;
&lt;p&gt;Add a diary entry for the selected day of the month
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-monthly-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i y&lt;/p&gt;
&lt;p&gt;Add a diary entry for the selected day of the year
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-yearly-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can make a diary entry for a specific date by selecting that date in
the calendar window and typing the i d command. This command displays
the end of your diary file in another window and inserts the date; you
can then type the rest of the diary entry.&lt;/p&gt;
&lt;p&gt;If you want to make a diary entry that applies to a specific day of the
week, select that day of the week (any occurrence will do) and type i w.
This inserts the day-of-week as a generic date; you can then type the
rest of the diary entry. You can make a monthly diary entry in the same
fashion: select the day of the month, use the i m command, and type the
rest of the entry. Similarly, you can insert a yearly diary entry with
the i y command.&lt;/p&gt;
&lt;p&gt;All of the above commands make marking diary entries by default. To make
a nonmarking diary entry, give a prefix argument to the command. For
example, C-u i w makes a nonmarking weekly diary entry.&lt;/p&gt;
&lt;p&gt;When you modify the diary file, be sure to save the file before exiting
Emacs. Saving the diary file after using any of the above insertion
commands will automatically update the diary marks in the calendar
window, if appropriate. You can use the command &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-redraw&lt;/span&gt;&lt;/code&gt; to
force an update at any time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="special-diary-entries"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id29"&gt;31.10.5 Special Diary Entries&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to entries based on calendar dates, the diary file can
contain sexp entries for regular events such as anniversaries. These
entries are based on Lisp expressions (sexps) that Emacs evaluates as it
scans the diary file. Instead of a date, a sexp entry contains '%%'
followed by a Lisp expression which must begin and end with parentheses.
The Lisp expression determines which dates the entry applies to.&lt;/p&gt;
&lt;p&gt;Calendar mode provides commands to insert certain commonly used sexp
entries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;i a&lt;/p&gt;
&lt;p&gt;Add an anniversary diary entry for the selected date
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-anniversary-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i b&lt;/p&gt;
&lt;p&gt;Add a block diary entry for the current region
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-block-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i c&lt;/p&gt;
&lt;p&gt;Add a cyclic diary entry starting at the date
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-insert-cyclic-entry&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If you want to make a diary entry that applies to the anniversary of
a specific date, move point to that date and use the i a command.
This displays the end of your diary file in another window and
inserts the anniversary description; you can then type the rest of
the diary entry. The entry looks like this:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;%%(diary-anniversary 10 31 1988) Arthur's birthday&lt;/pre&gt;
&lt;p&gt;This entry applies to October 31 in any year after 1988; '10 31 1988'
specifies the date. (If you are using the European or ISO calendar
style, the input order of month, day and year is different.) The reason
this expression requires a beginning year is that advanced diary
functions can use it to calculate the number of elapsed years.&lt;/p&gt;
&lt;p&gt;A block diary entry applies to a specified range of consecutive dates.
Here is a block diary entry that applies to all dates from June 24, 2012
through July 10, 2012:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-block 6 24 2012 7 10 2012) Vacation&lt;/pre&gt;
&lt;p&gt;The '6 24 2012' indicates the starting date and the '7 10 2012'
indicates the stopping date. (Again, if you are using the European or
ISO calendar style, the input order of month, day and year is
different.)&lt;/p&gt;
&lt;p&gt;To insert a block entry, place point and the mark on the two dates that
begin and end the range, and type i b. This command displays the end of
your diary file in another window and inserts the block description; you
can then type the diary entry.&lt;/p&gt;
&lt;p&gt;Cyclic diary entries repeat after a fixed interval of days. To create
one, select the starting date and use the i c command. The command
prompts for the length of interval, then inserts the entry, which looks
like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-cyclic 50 3 1 2012) Renew medication&lt;/pre&gt;
&lt;p&gt;This entry applies to March 1, 2012 and every 50th day following; '3 1
2012' specifies the starting date. (If you are using the European or ISO
calendar style, the input order of month, day and year is different.)&lt;/p&gt;
&lt;p&gt;All three of these commands make marking diary entries. To insert a
nonmarking entry, give a prefix argument to the command. For example,
C-u i a makes a nonmarking anniversary diary entry.&lt;/p&gt;
&lt;p&gt;Marking sexp diary entries in the calendar can be time-consuming, since
every date visible in the calendar window must be individually checked.
So it's a good idea to make sexp diary entries nonmarking (with '&amp;amp;')
when possible.&lt;/p&gt;
&lt;p&gt;Another sophisticated kind of sexp entry, a floating diary entry,
specifies a regularly occurring event by offsets specified in days,
weeks, and months. It is comparable to a crontab entry interpreted by
the &lt;code class="docutils literal"&gt;cron&lt;/code&gt; utility. Here is a nonmarking, floating diary entry that
applies to the fourth Thursday in November:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;amp;%%(diary-float 11 4 4) American Thanksgiving&lt;/pre&gt;
&lt;p&gt;The 11 specifies November (the eleventh month), the 4 specifies Thursday
(the fourth day of the week, where Sunday is numbered zero), and the
second 4 specifies the fourth Thursday (1 would mean "first", 2 would
mean "second", −2 would mean "second-to-last", and so on). The month can
be a single month or a list of months. Thus you could change the 11
above to ‘'(1 2 3)' and have the entry apply to the last Thursday of
January, February, and March. If the month is &lt;code class="docutils literal"&gt;t&lt;/code&gt;, the entry applies
to all months of the year.&lt;/p&gt;
&lt;p&gt;Each of the standard sexp diary entries takes an optional parameter
specifying the name of a face or a single-character string to use when
marking the entry in the calendar. Most generally, sexp diary entries
can perform arbitrary computations to determine when they apply.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="appointments"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id30"&gt;31.10.6 Appointments&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have a diary entry for an appointment, and that diary entry
begins with a recognizable time of day, Emacs can warn you in advance
that an appointment is pending. Emacs alerts you to the appointment by
displaying a message in your chosen format, as specified by the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-display-format&lt;/span&gt;&lt;/code&gt;. If the value of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-audible&lt;/span&gt;&lt;/code&gt; is
non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;, the warning includes an audible reminder. In addition, if
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-display-mode-line&lt;/span&gt;&lt;/code&gt; is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;, Emacs displays the number
of minutes to the appointment on the mode line.&lt;/p&gt;
&lt;p&gt;If &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-display-format&lt;/span&gt;&lt;/code&gt; has the value &lt;code class="docutils literal"&gt;window&lt;/code&gt;, then the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-display-duration&lt;/span&gt;&lt;/code&gt; controls how long the reminder window is
visible for; and the variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-disp-window-function&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-delete-window-function&lt;/span&gt;&lt;/code&gt; give the names of functions used to
create and destroy the window, respectively.&lt;/p&gt;
&lt;p&gt;To enable appointment notification, type M-x appt-activate. With a
positive argument, it enables notification; with a negative argument, it
disables notification; with no argument, it toggles. Enabling
notification also sets up an appointment list for today from the diary
file, giving all diary entries found with recognizable times of day, and
reminds you just before each of them.&lt;/p&gt;
&lt;p&gt;For example, suppose the diary file contains these lines:&lt;/p&gt;
&lt;pre class="literal-block"&gt;Monday
  9:30am Coffee break
 12:00pm Lunch&lt;/pre&gt;
&lt;p&gt;Then on Mondays, you will be reminded at around 9:20am about your coffee
break and at around 11:50am about lunch. The variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-message-warning-time&lt;/span&gt;&lt;/code&gt; specifies how many minutes (default 12) in
advance to warn you. This is a default warning time. Each appointment
can specify a different warning time by adding a piece matching
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-warning-time-regexp&lt;/span&gt;&lt;/code&gt; (see that variable's documentation for
details).&lt;/p&gt;
&lt;p&gt;You can write times in am/pm style (with '12:00am' standing for midnight
and '12:00pm' standing for noon), or 24-hour European/military style.
You need not be consistent; your diary file can have a mixture of the
two styles. Times must be at the beginning of diary entries if they are
to be recognized.&lt;/p&gt;
&lt;p&gt;Emacs updates the appointments list from the diary file automatically
just after midnight. You can force an update at any time by re-enabling
appointment notification. Both these actions also display the day's
diary buffer, unless you set &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;appt-display-diary&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;nil&lt;/code&gt;. The
appointments list is also updated whenever the diary file (or a file it
includes; see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Fancy-Diary-Display"&gt;Fancy Diary
Display&lt;/a&gt;)
is saved. If you use the Org Mode and keep appointments in your Org
agenda files, you can add those appointments to the list using the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-agenda-to-appt&lt;/span&gt;&lt;/code&gt; command. See &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/org.html#Weekly_002fdaily-agenda"&gt;Appointment
reminders&lt;/a&gt;,
for more about that command.&lt;/p&gt;
&lt;p&gt;You can also use the appointment notification facility like an alarm
clock. The command M-x appt-add adds entries to the appointment list
without affecting your diary file. You delete entries from the
appointment list with M-x appt-delete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="importing-and-exporting-diary-entries"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id31"&gt;31.10.7 Importing and Exporting Diary Entries&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can transfer diary entries between Emacs diary files and a variety
of other formats.&lt;/p&gt;
&lt;p&gt;You can import diary entries from Outlook-generated appointment
messages. While viewing such a message in Rmail or Gnus, do M-x
diary-from-outlook to import the entry. You can make this command
recognize additional appointment message formats by customizing the
variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-outlook-formats&lt;/span&gt;&lt;/code&gt;. Other mail clients can set
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-from-outlook-function&lt;/span&gt;&lt;/code&gt; to an appropriate value.&lt;/p&gt;
&lt;p&gt;The icalendar package allows you to transfer data between your Emacs
diary file and iCalendar files, which are defined in RFC 2445—Internet
Calendaring and Scheduling Core Object Specification (iCalendar) (as
well as the earlier vCalendar format).&lt;/p&gt;
&lt;p&gt;The command &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;icalendar-import-buffer&lt;/span&gt;&lt;/code&gt; extracts iCalendar data from the
current buffer and adds it to your diary file. This function is also
suitable for automatic extraction of iCalendar data; for example with
the Rmail mail client one could use:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(add-hook 'rmail-show-message-hook 'icalendar-import-buffer)&lt;/pre&gt;
&lt;p&gt;The command &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;icalendar-import-file&lt;/span&gt;&lt;/code&gt; imports an iCalendar file and adds
the results to an Emacs diary file. For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(icalendar-import-file "/here/is/calendar.ics"
                       "/there/goes/ical-diary")&lt;/pre&gt;
&lt;p&gt;You can use an &lt;code class="docutils literal"&gt;#include&lt;/code&gt; directive to add the import file contents to
the main diary file, if these are different files. See &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Fancy-Diary-Display"&gt;Fancy Diary
Display&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;icalendar-export-file&lt;/span&gt;&lt;/code&gt; to interactively export an entire Emacs
diary file to iCalendar format. To export only a part of a diary file,
mark the relevant area, and call &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;icalendar-export-region&lt;/span&gt;&lt;/code&gt;. In both
cases, Emacs appends the result to the target file.&lt;/p&gt;
&lt;div class="section" id="daylight-saving-time"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id32"&gt;31.11 Daylight Saving Time&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Emacs understands the difference between standard time and daylight
saving time—the times given for sunrise, sunset, solstices, equinoxes,
and the phases of the moon take that into account. The rules for
daylight saving time vary from place to place and have also varied
historically from year to year. To do the job properly, Emacs needs to
know which rules to use.&lt;/p&gt;
&lt;p&gt;Some operating systems keep track of the rules that apply to the place
where you are; on these systems, Emacs gets the information it needs
from the system automatically. If some or all of this information is
missing, Emacs fills in the gaps with the rules currently used in
Cambridge, Massachusetts. If the resulting rules are not what you want,
you can tell Emacs the rules to use by setting certain variables:
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-starts&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-ends&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These values should be Lisp expressions that refer to the variable
&lt;code class="docutils literal"&gt;year&lt;/code&gt;, and evaluate to the Gregorian date on which daylight saving
time starts or (respectively) ends, in the form of a list &lt;code class="docutils literal"&gt;(=month day
year&lt;/code&gt;)=. The values should be &lt;code class="docutils literal"&gt;nil&lt;/code&gt; if your area does not use
daylight saving time.&lt;/p&gt;
&lt;p&gt;Emacs uses these expressions to determine the starting date of daylight
saving time for the holiday list and for correcting times of day in the
solar and lunar calculations.&lt;/p&gt;
&lt;p&gt;The values for Cambridge, Massachusetts are as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(calendar-nth-named-day 2 0 3 year)
(calendar-nth-named-day 1 0 11 year)&lt;/pre&gt;
&lt;p&gt;That is, the second 0th day (Sunday) of the third month (March) in the
year specified by &lt;code class="docutils literal"&gt;year&lt;/code&gt;, and the first Sunday of the eleventh month
(November) of that year. If daylight saving time were changed to start
on October 1, you would set &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-starts&lt;/span&gt;&lt;/code&gt; to
this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(list 10 1 year)&lt;/pre&gt;
&lt;p&gt;If there is no daylight saving time at your location, or if you want all
times in standard time, set &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-starts&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-ends&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-time-offset&lt;/span&gt;&lt;/code&gt; specifies the difference
between daylight saving time and standard time, measured in minutes. The
value for Cambridge, Massachusetts is 60.&lt;/p&gt;
&lt;p&gt;Finally, the two variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-starts-time&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-daylight-savings-ends-time&lt;/span&gt;&lt;/code&gt; specify the number of minutes
after midnight local time when the transition to and from daylight
saving time should occur. For Cambridge, Massachusetts both variables'
values are 120.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summing-time-intervals"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id33"&gt;31.12 Summing Time Intervals&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The timeclock package adds up time intervals, so you can (for instance)
keep track of how much time you spend working on particular projects. (A
more advanced alternative is to use the Org Mode's facilities for
clocking time, see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/org.html#Clocking-work-time"&gt;Clocking work
time&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Use the M-x timeclock-in command when you start working on a project,
and M-x timeclock-out command when you're done. Each time you do this,
it adds one time interval to the record of the project. You can change
to working on a different project with M-x timeclock-change.&lt;/p&gt;
&lt;p&gt;Once you've collected data from a number of time intervals, you can use
M-x timeclock-workday-remaining to see how much time is left to work
today (assuming a typical average of 8 hours a day), and M-x
timeclock-when-to-leave which will calculate when you're done.&lt;/p&gt;
&lt;p&gt;If you want Emacs to display the amount of time left of your workday in
the mode line, either customize the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;timeclock-modeline-display&lt;/span&gt;&lt;/code&gt;
variable and set its value to &lt;code class="docutils literal"&gt;t&lt;/code&gt;, or invoke the M-x
timeclock-modeline-display command.&lt;/p&gt;
&lt;p&gt;Terminating the current Emacs session might or might not mean that you
have stopped working on the project and, by default, Emacs asks you. You
can, however, customize the value of the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;timeclock-ask-before-exiting&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;nil&lt;/code&gt; to avoid the question; then,
only an explicit M-x timeclock-out or M-x timeclock-change will tell
Emacs that the current interval is over.&lt;/p&gt;
&lt;p&gt;The timeclock functions work by accumulating the data in a file called
~/.emacs.d/timelog. You can specify a different name for this file by
customizing the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;timeclock-file&lt;/span&gt;&lt;/code&gt;. If you edit the timeclock
file manually, or if you change the value of any of timeclock's
customizable variables, you should run the command M-x
timeclock-reread-log to update the data in Emacs from the file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-advanced-features-of-the-calendar-and-diary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id34"&gt;31.13 More advanced features of the Calendar and Diary&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This section describes some of the more advanced/specialized features of
the calendar and diary. It starts with some of the many ways in which
you can customize the calendar and diary to suit your personal tastes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="customizing-the-calendar"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id35"&gt;31.13.1 Customizing the Calendar&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The calendar display unfortunately cannot be changed from three months,
but you can customize the whitespace used by setting the variables:
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-left-margin&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-day-header-width&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-day-digit-width&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-column-width&lt;/span&gt;&lt;/code&gt;, and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-intermonth-spacing&lt;/span&gt;&lt;/code&gt;. To display text &lt;em&gt;between&lt;/em&gt; the months,
for example week numbers, customize the variables
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-intermonth-header&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-intermonth-text&lt;/span&gt;&lt;/code&gt; as
described in their documentation.&lt;/p&gt;
&lt;p&gt;The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-month-header&lt;/span&gt;&lt;/code&gt; controls the text that appears
above each month in the calendar. By default, it shows the month and
year. The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-day-header-array&lt;/span&gt;&lt;/code&gt; controls the text that
appears above each day's column in every month. By default, it shows the
first two letters of each day's name.&lt;/p&gt;
&lt;p&gt;The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-holiday-marker&lt;/span&gt;&lt;/code&gt; specifies how to mark a date
that is a holiday. Its value may be a single-character string to insert
next to the date, or a face name to use for displaying the date.
Likewise, the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-entry-marker&lt;/span&gt;&lt;/code&gt; specifies how to mark a
date that has diary entries. The function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mark-today&lt;/span&gt;&lt;/code&gt; uses
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-today-marker&lt;/span&gt;&lt;/code&gt; to mark today's date. By default, the calendar
uses faces named &lt;code class="docutils literal"&gt;holiday&lt;/code&gt;, &lt;code class="docutils literal"&gt;diary&lt;/code&gt;, and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-today&lt;/span&gt;&lt;/code&gt; for
these purposes.&lt;/p&gt;
&lt;p&gt;Starting the calendar runs the normal hook
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-initial-window-hook&lt;/span&gt;&lt;/code&gt;. Recomputation of the calendar display
does not run this hook. But if you leave the calendar with the q command
and reenter it, the hook runs again.&lt;/p&gt;
&lt;p&gt;The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-today-visible-hook&lt;/span&gt;&lt;/code&gt; is a normal hook run after
the calendar buffer has been prepared with the calendar, when the
current date is visible in the window. One use of this hook is to mark
today's date; to do that use either of the functions
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mark-today&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-star-date&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(add-hook 'calendar-today-visible-hook 'calendar-mark-today)&lt;/pre&gt;
&lt;p&gt;A similar normal hook, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-today-invisible-hook&lt;/span&gt;&lt;/code&gt; is run if the
current date is &lt;em&gt;not&lt;/em&gt; visible in the window.&lt;/p&gt;
&lt;p&gt;Each of the calendar cursor motion commands runs the hook
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-move-hook&lt;/span&gt;&lt;/code&gt; after it moves the cursor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customizing-the-holidays"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id36"&gt;31.13.2 Customizing the Holidays&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are several variables listing the default holidays that Emacs
knows about. These are: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-general-holidays&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-local-holidays&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-solar-holidays&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-bahai-holidays&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-christian-holidays&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-hebrew-holidays&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-islamic-holidays&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-oriental-holidays&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-other-holidays&lt;/span&gt;&lt;/code&gt;. The names
should be self-explanatory; e.g., &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-solar-holidays&lt;/span&gt;&lt;/code&gt; lists sun-
and moon-related holidays.&lt;/p&gt;
&lt;p&gt;You can customize these lists of holidays to your own needs, deleting or
adding holidays as described below. Set any of them to &lt;code class="docutils literal"&gt;nil&lt;/code&gt; to not
show the associated holidays.&lt;/p&gt;
&lt;p&gt;The general holidays are, by default, holidays common throughout the
United States. In contrast, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-local-holidays&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-other-holidays&lt;/span&gt;&lt;/code&gt; are both empty by default. These are intended
for system-wide settings and your individual use, respectively.&lt;/p&gt;
&lt;p&gt;By default, Emacs does not include all the holidays of the religions
that it knows, only those commonly found in secular calendars. For a
more extensive collection of religious holidays, you can set any (or
all) of the variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-bahai-all-holidays-flag&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-christian-all-holidays-flag&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-hebrew-all-holidays-flag&lt;/span&gt;&lt;/code&gt;, or
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-islamic-all-holidays-flag&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each of the holiday variables is a list of holiday forms, each form
describing a holiday (or sometimes a list of holidays). Here is a table
of the possible kinds of holiday form. Day numbers and month numbers
count starting from 1, but dayname numbers count Sunday as 0. The
argument string is always the description of the holiday, as a string.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-fixed=month&lt;/span&gt; day string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A fixed date on the Gregorian calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=(holiday-float=month dayname k string&lt;/p&gt;
&lt;p&gt;​ &amp;amp;optional day) The kth dayname (dayname=0 for Sunday, and so on)
after or before Gregorian date month, day. Negative k means count
back from the end of the month. Optional day defaults to 1 if k is
positive, and the last day of month otherwise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-chinese=month&lt;/span&gt; day string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A fixed date on the Chinese calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-hebrew=month&lt;/span&gt; day string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A fixed date on the Hebrew calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-islamic=month&lt;/span&gt; day string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A fixed date on the Islamic calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-julian=month&lt;/span&gt; day string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A fixed date on the Julian calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(holiday-sexp=sexp&lt;/span&gt; string&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A date calculated by the Lisp expression sexp. The expression should
use the variable &lt;code class="docutils literal"&gt;year&lt;/code&gt; to compute and return the date of a holiday
in the form of a list &lt;code class="docutils literal"&gt;(=month day year&lt;/code&gt;)=, or &lt;code class="docutils literal"&gt;nil&lt;/code&gt; if the
holiday doesn't happen this year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;(if=condition &lt;span class="pre"&gt;holiday-form&lt;/span&gt;&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A holiday that happens only if condition is true.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;(=function [args]&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;A list of dates calculated by the function function, called with
arguments args.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, suppose you want to add Bastille Day, celebrated in France
on July 14 (i.e., the fourteenth day of the seventh month). You can do
this as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(setq holiday-other-holidays '((holiday-fixed 7 14 "Bastille Day")))&lt;/pre&gt;
&lt;p&gt;Many holidays occur on a specific day of the week, at a specific time of
month. Here is a holiday form describing Hurricane Supplication Day,
celebrated in the Virgin Islands on the fourth Monday in July:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(holiday-float 7 1 4 "Hurricane Supplication Day")&lt;/pre&gt;
&lt;p&gt;Here the 7 specifies July, the 1 specifies Monday (Sunday is 0, Tuesday
is 2, and so on), and the 4 specifies the fourth occurrence in the month
(1 specifies the first occurrence, 2 the second occurrence, −1 the last
occurrence, −2 the second-to-last occurrence, and so on).&lt;/p&gt;
&lt;p&gt;You can specify holidays that occur on fixed days of the Bahá'í,
Chinese, Hebrew, Islamic, and Julian calendars too. For example,&lt;/p&gt;
&lt;pre class="literal-block"&gt;(setq holiday-other-holidays
      '((holiday-hebrew 10 2 "Last day of Hanukkah")
        (holiday-islamic 3 12 "Mohammed's Birthday")
        (holiday-julian 4 2 "Jefferson's Birthday")))&lt;/pre&gt;
&lt;p&gt;adds the last day of Hanukkah (since the Hebrew months are numbered with
1 starting from Nisan), the Islamic feast celebrating Mohammed's
birthday (since the Islamic months are numbered from 1 starting with
Muharram), and Thomas Jefferson's birthday, which is 2 April 1743 on the
Julian calendar.&lt;/p&gt;
&lt;p&gt;To include a holiday conditionally, use either Emacs Lisp's &lt;code class="docutils literal"&gt;if&lt;/code&gt; or
the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-sexp&lt;/span&gt;&lt;/code&gt; form. For example, American presidential elections
occur on the first Tuesday after the first Monday in November of years
divisible by 4:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(holiday-sexp '(if (zerop (% year 4))
                   (calendar-gregorian-from-absolute
                    (1+ (calendar-dayname-on-or-before
                          1 (+ 6 (calendar-absolute-from-gregorian
                                  (list 11 1 year)))))))
              "US Presidential Election")&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class="literal-block"&gt;(if (zerop (% displayed-year 4))
    (holiday-fixed 11
           (calendar-extract-day
             (calendar-gregorian-from-absolute
               (1+ (calendar-dayname-on-or-before
                     1 (+ 6 (calendar-absolute-from-gregorian
                              (list 11 1 displayed-year)))))))
           "US Presidential Election"))&lt;/pre&gt;
&lt;p&gt;Some holidays just don't fit into any of these forms because special
calculations are involved in their determination. In such cases you must
write a Lisp function to do the calculation. To include eclipses, for
example, add &lt;code class="docutils literal"&gt;(eclipses)&lt;/code&gt; to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;holiday-other-holidays&lt;/span&gt;&lt;/code&gt; and write an
Emacs Lisp function &lt;code class="docutils literal"&gt;eclipses&lt;/code&gt; that returns a (possibly empty) list of
the relevant Gregorian dates among the range visible in the calendar
window, with descriptive strings, like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(((6 4 2012) "Lunar Eclipse") ((11 13 2012) "Solar Eclipse") ... )&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="converting-from-the-mayan-calendar"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id37"&gt;31.13.3 Converting from the Mayan Calendar&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are the commands to select dates based on the Mayan calendar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;g m l&lt;/p&gt;
&lt;p&gt;Move to a date specified by the long count calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-goto-long-count-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m n t&lt;/p&gt;
&lt;p&gt;Move to the next occurrence of a place in the tzolkin calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-next-tzolkin-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m p t&lt;/p&gt;
&lt;p&gt;Move to the previous occurrence of a place in the tzolkin calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-previous-tzolkin-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m n h&lt;/p&gt;
&lt;p&gt;Move to the next occurrence of a place in the haab calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-next-haab-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m p h&lt;/p&gt;
&lt;p&gt;Move to the previous occurrence of a place in the haab calendar
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-previous-haab-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m n c&lt;/p&gt;
&lt;p&gt;Move to the next occurrence of a place in the calendar round
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-next-calendar-round-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g m p c&lt;/p&gt;
&lt;p&gt;Move to the previous occurrence of a place in the calendar round
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-mayan-previous-calendar-round-date&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To understand these commands, you need to understand the Mayan
calendars. The long count is a counting of days with these units:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;1 kin = 1 day   1 uinal = 20 kin   1 tun = 18 uinal
1 katun = 20 tun   1 baktun = 20 katun&lt;/pre&gt;
&lt;p&gt;Thus, the long count date 12.16.11.16.6 means 12 baktun, 16 katun, 11
tun, 16 uinal, and 6 kin. The Emacs calendar can handle Mayan long count
dates as early as 7.17.18.13.3, but no earlier. When you use the g m l
command, type the Mayan long count date with the baktun, katun, tun,
uinal, and kin separated by periods.&lt;/p&gt;
&lt;p&gt;The Mayan tzolkin calendar is a cycle of 260 days formed by a pair of
independent cycles of 13 and 20 days. Since this cycle repeats
endlessly, Emacs provides commands to move backward and forward to the
previous or next point in the cycle. Type g m p t to go to the previous
tzolkin date; Emacs asks you for a tzolkin date and moves point to the
previous occurrence of that date. Similarly, type g m n t to go to the
next occurrence of a tzolkin date.&lt;/p&gt;
&lt;p&gt;The Mayan haab calendar is a cycle of 365 days arranged as 18 months of
20 days each, followed by a 5-day monthless period. Like the tzolkin
cycle, this cycle repeats endlessly, and there are commands to move
backward and forward to the previous or next point in the cycle. Type g
m p h to go to the previous haab date; Emacs asks you for a haab date
and moves point to the previous occurrence of that date. Similarly, type
g m n h to go to the next occurrence of a haab date.&lt;/p&gt;
&lt;p&gt;The Maya also used the combination of the tzolkin date and the haab
date. This combination is a cycle of about 52 years called a &lt;em&gt;calendar
round&lt;/em&gt;. If you type g m p c, Emacs asks you for both a haab and a
tzolkin date and then moves point to the previous occurrence of that
combination. Use g m n c to move point to the next occurrence of a
combination. These commands signal an error if the haab/tzolkin date
combination you have typed is impossible.&lt;/p&gt;
&lt;p&gt;Emacs uses strict completion (see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Completion-Exit"&gt;Completion
Exit&lt;/a&gt;)
whenever it asks you to type a Mayan name, so you don't have to worry
about spelling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="date-display-format"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id38"&gt;31.13.4 Date Display Format&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can customize the way dates are displayed in the diary, mode lines,
and messages by setting &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-date-display-form&lt;/span&gt;&lt;/code&gt;. This variable
holds a list of expressions that can involve the variables &lt;code class="docutils literal"&gt;month&lt;/code&gt;,
&lt;code class="docutils literal"&gt;day&lt;/code&gt;, and &lt;code class="docutils literal"&gt;year&lt;/code&gt;, which are all numbers in string form, and
&lt;code class="docutils literal"&gt;monthname&lt;/code&gt; and &lt;code class="docutils literal"&gt;dayname&lt;/code&gt;, which are both alphabetic strings. In the
American style, the default value of this list is as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;((if dayname (concat dayname ", ")) monthname " " day ", " year)&lt;/pre&gt;
&lt;p&gt;while in the European style this value is the default:&lt;/p&gt;
&lt;pre class="literal-block"&gt;((if dayname (concat dayname ", ")) day " " monthname " " year)&lt;/pre&gt;
&lt;p&gt;The default ISO date representation is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;((format "%s-%.2d-%.2d" year (string-to-number month)
         (string-to-number day)))&lt;/pre&gt;
&lt;p&gt;Another typical American format is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(month "/" day "/" (substring year -2))&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="time-display-format"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id39"&gt;31.13.5 Time Display Format&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The calendar and diary by default display times of day in the
conventional American style with the hours from 1 through 12, minutes,
and either 'am' or 'pm'. If you prefer the European style, also known in
the US as military, in which the hours go from 00 to 23, you can alter
the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-time-display-form&lt;/span&gt;&lt;/code&gt;. This variable is a list of
expressions that can involve the variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;12-hours&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;24-hours&lt;/span&gt;&lt;/code&gt;,
and &lt;code class="docutils literal"&gt;minutes&lt;/code&gt;, which are all numbers in string form, and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;am-pm&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;time-zone&lt;/span&gt;&lt;/code&gt;, which are both alphabetic strings. The default value is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(12-hours ":" minutes am-pm
          (if time-zone " (") time-zone (if time-zone ")"))&lt;/pre&gt;
&lt;p&gt;Here is a value that provides European style times:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(24-hours ":" minutes
          (if time-zone " (") time-zone (if time-zone ")"))&lt;/pre&gt;
&lt;p&gt;Note that few calendar functions return a time of day (at present, only
solar functions).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customizing-the-diary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id40"&gt;31.13.6 Customizing the Diary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ordinarily, the diary window indicates any holidays that fall on the
date of the diary entries, either in the mode line or the buffer itself.
The process of checking for holidays can be slow, depending on the
defined holidays. In that case, setting &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-show-holidays-flag&lt;/span&gt;&lt;/code&gt; to
&lt;code class="docutils literal"&gt;nil&lt;/code&gt; will speed up the diary display.&lt;/p&gt;
&lt;p&gt;The variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-number-of-entries&lt;/span&gt;&lt;/code&gt; controls the number of days of
diary entries to be displayed at one time. It affects the initial
display when &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-view-diary-initially-flag&lt;/span&gt;&lt;/code&gt; is &lt;code class="docutils literal"&gt;t&lt;/code&gt;, as well as
the command M-x diary. For example, a value of 1 (the default) displays
only the current day's diary entries, whereas a value of 2 will also
show the next day's entries. The value can also be a vector of seven
integers: for example, if the value is &lt;code class="docutils literal"&gt;[0 2 2 2 2 4 1]&lt;/code&gt; then no diary
entries appear on Sunday, the current date's and the next day's diary
entries appear Monday through Thursday, Friday through Monday's entries
appear on Friday, while on Saturday only that day's entries appear.&lt;/p&gt;
&lt;p&gt;You can customize the form of dates in your diary file by setting the
variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-date-forms&lt;/span&gt;&lt;/code&gt;. This variable is a list of patterns for
recognizing a date. Each date pattern is a list whose elements may be
regular expressions (see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Regular-Expressions"&gt;Regular
Expressions&lt;/a&gt;)
or the symbols &lt;code class="docutils literal"&gt;month&lt;/code&gt;, &lt;code class="docutils literal"&gt;day&lt;/code&gt;, &lt;code class="docutils literal"&gt;year&lt;/code&gt;, &lt;code class="docutils literal"&gt;monthname&lt;/code&gt;, and
&lt;code class="docutils literal"&gt;dayname&lt;/code&gt;. All these elements serve as patterns that match certain
kinds of text in the diary file. In order for the date pattern as a
whole to match, all of its elements must match consecutively.&lt;/p&gt;
&lt;p&gt;A regular expression in a date pattern matches in its usual fashion,
using the standard syntax table altered so that ‘&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id4"&gt;&lt;span class="problematic" id="id5"&gt;*&lt;/span&gt;&lt;/a&gt;' is a word
constituent.&lt;/p&gt;
&lt;div class="system-message" id="id4"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 1853); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline emphasis start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The symbols &lt;code class="docutils literal"&gt;month&lt;/code&gt;, &lt;code class="docutils literal"&gt;day&lt;/code&gt;, &lt;code class="docutils literal"&gt;year&lt;/code&gt;, &lt;code class="docutils literal"&gt;monthname&lt;/code&gt;, and &lt;code class="docutils literal"&gt;dayname&lt;/code&gt;
match the month number, day number, year number, month name, and day
name of the date being considered. The symbols that match numbers allow
leading zeros; those that match names allow capitalization and
abbreviation (as specified by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-month-abbrev-array&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;calendar-day-abbrev-array&lt;/span&gt;&lt;/code&gt;). All the symbols can match '*'; since ‘&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id6"&gt;&lt;span class="problematic" id="id7"&gt;*&lt;/span&gt;&lt;/a&gt;'
in a diary entry means "any day", "any month", and so on, it should
match regardless of the date being considered.&lt;/p&gt;
&lt;div class="system-message" id="id6"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 1857); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id7"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline emphasis start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The default value of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-date-forms&lt;/span&gt;&lt;/code&gt; in the American style is
provided by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-american-date-forms&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;((month "/" day "[^/0-9]")
 (month "/" day "/" year "[^0-9]")
 (monthname " *" day "[^,0-9]")
 (monthname " *" day ", *" year "[^0-9]")
 (dayname "\\W"))&lt;/pre&gt;
&lt;p&gt;The variables &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-european-date-forms&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-iso-date-forms&lt;/span&gt;&lt;/code&gt;
provide other default styles.&lt;/p&gt;
&lt;p&gt;The date patterns in the list must be &lt;em&gt;mutually exclusive&lt;/em&gt; and must not
match any portion of the diary entry itself, just the date and one
character of whitespace. If, to be mutually exclusive, the pattern must
match a portion of the diary entry text—beyond the whitespace that ends
the date—then the first element of the date pattern &lt;em&gt;must&lt;/em&gt; be
&lt;code class="docutils literal"&gt;backup&lt;/code&gt;. This causes the date recognizer to back up to the beginning
of the current word of the diary entry, after finishing the match. Even
if you use &lt;code class="docutils literal"&gt;backup&lt;/code&gt;, the date pattern must absolutely not match more
than a portion of the first word of the diary entry. For example, the
default value of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-european-date-forms&lt;/span&gt;&lt;/code&gt; is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;((day "/" month "[^/0-9]")
 (day "/" month "/" year "[^0-9]")
 (backup day " *" monthname "\\W+\\&amp;lt;\\([^*0-9]\\|\\([0-9]+[:aApP]\\)\\)")
 (day " *" monthname " *" year "[^0-9]")
 (dayname "\\W"))&lt;/pre&gt;
&lt;p&gt;Notice the use of &lt;code class="docutils literal"&gt;backup&lt;/code&gt; in the third pattern, because it needs to
match part of a word beyond the date itself to distinguish it from the
fourth pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diary-entries-using-non-gregorian-calendars"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id41"&gt;31.13.7 Diary Entries Using non-Gregorian Calendars&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As well as entries based on the standard Gregorian calendar, your diary
can have entries based on Bahá'í, Chinese, Hebrew, or Islamic dates.
Recognition of such entries can be time-consuming, however, and since
most people don't use them, you must explicitly enable their use. If you
want the diary to recognize Hebrew-date diary entries, for example, you
must do this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(add-hook 'diary-nongregorian-listing-hook 'diary-hebrew-list-entries)
(add-hook 'diary-nongregorian-marking-hook 'diary-hebrew-mark-entries)&lt;/pre&gt;
&lt;p&gt;Similarly, for Islamic, Bahá'í and Chinese entries, add
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-list-entries&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-mark-entries&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-list-entries&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-mark-entries&lt;/span&gt;&lt;/code&gt;, or
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-list-entries&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-mark-entries&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These diary entries have the same formats as Gregorian-date diary
entries; except that &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-entry-symbol&lt;/span&gt;&lt;/code&gt; (default 'B') must
precede a Bahá'í date, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-entry-symbol&lt;/span&gt;&lt;/code&gt; (default 'C') a
Chinese date, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-hebrew-entry-symbol&lt;/span&gt;&lt;/code&gt; (default 'H') a Hebrew date,
and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-entry-symbol&lt;/span&gt;&lt;/code&gt; (default 'I') an Islamic date.
Moreover, non-Gregorian month names may not be abbreviated (because the
first three letters are often not unique). (Note also that you must use
"Adar I" if you want Adar of a common Hebrew year.) For example, a diary
entry for the Hebrew date Heshvan 25 could look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;HHeshvan 25 Happy Hebrew birthday!&lt;/pre&gt;
&lt;p&gt;and would appear in the diary for any date that corresponds to Heshvan
25 on the Hebrew calendar. And here is an Islamic-date diary entry that
matches Dhu al-Qada 25:&lt;/p&gt;
&lt;pre class="literal-block"&gt;IDhu al-Qada 25 Happy Islamic birthday!&lt;/pre&gt;
&lt;p&gt;As with Gregorian-date diary entries, non-Gregorian entries are
nonmarking if preceded by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-nonmarking-symbol&lt;/span&gt;&lt;/code&gt; (default '&amp;amp;').&lt;/p&gt;
&lt;p&gt;Here is a table of commands used in the calendar to create diary entries
that match the selected date and other dates that are similar in the
Bahá'í, Chinese, Hebrew, or Islamic calendars:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;i h d&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-hebrew-insert-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i h m&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-hebrew-insert-monthly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i h y&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-hebrew-insert-yearly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i i d&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-insert-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i i m&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-insert-monthly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i i y&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-islamic-insert-yearly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i B d&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-insert-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i B m&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-insert-monthly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i B y&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-bahai-insert-yearly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i C d&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-insert-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i C m&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-insert-monthly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i C y&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-insert-yearly-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i C a&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-chinese-insert-anniversary-entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These commands work much like the corresponding commands for ordinary
diary entries: they apply to the date that point is on in the
calendar window, and what they do is insert just the date portion of
a diary entry at the end of your diary file. You must then insert the
rest of the diary entry. The basic commands add an entry for the
specific non-Gregorian date, the 'monthly' commands for the given
non-Gregorian day-within-month in every month, and the 'yearly'
commands for the given non-Gregorian day and month in every year.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next: &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Fancy-Diary-Display"&gt;Fancy Diary
Display&lt;/a&gt;,
Previous: &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Non_002dGregorian-Diary"&gt;Non-Gregorian
Diary&lt;/a&gt;,
Up: &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Advanced-Calendar_002fDiary-Usage"&gt;Advanced Calendar/Diary
Usage&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diary-display"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id42"&gt;31.13.8 Diary Display&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Diary display works by preparing the list of diary entries and then
running the function specified by the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-display-function&lt;/span&gt;&lt;/code&gt;. The default value &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-fancy-display&lt;/span&gt;&lt;/code&gt;
displays diary entries and holidays by copying them into a special
buffer that exists only for the sake of display. Copying diary entries
to a separate buffer provides an opportunity to change the displayed
text to make it prettier—for example, to sort the entries by the dates
they apply to.&lt;/p&gt;
&lt;p&gt;Ordinarily, the fancy diary buffer does not show days for which there
are no diary entries, even if that day is a holiday. If you want such
days to be shown in the fancy diary buffer, set the variable
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-list-include-blanks&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fancy diary buffer enables View mode (see &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#View-Mode"&gt;View
Mode&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The alternative display method &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-simple-display&lt;/span&gt;&lt;/code&gt; shows the actual
diary buffer, and uses invisible text to hide entries that don't apply.
Holidays are shown in the mode line. The advantage of this method is
that you can edit the buffer and save your changes directly to the diary
file. This method is not as flexible as the fancy method, however. For
example, it cannot sort entries. Another disadvantage is that invisible
text can be confusing. For example, if you copy a region of text in
order to paste it elsewhere, invisible text may be included. Similarly,
since the diary buffer as you see it is an illusion, simply printing the
buffer may not print what you see on your screen.&lt;/p&gt;
&lt;p&gt;For this reason, there is a special command to print hard copy of the
diary buffer &lt;em&gt;as it appears&lt;/em&gt;; this command is M-x diary-print-entries.
It works with either display method, although with the fancy display you
can also print the buffer like any other. To print a hard copy of a
day-by-day diary for a week, position point on the first day of the
week, type 7 d, and then do M-x diary-print-entries. As usual, the
inclusion of the holidays slows down the display slightly; you can speed
things up by setting the variable &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-show-holidays-flag&lt;/span&gt;&lt;/code&gt; to
&lt;code class="docutils literal"&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This command prepares a temporary buffer that contains only the diary
entries currently visible in the diary buffer. Unlike with the simple
display, the other irrelevant entries are really absent, not just
hidden. After preparing the buffer, it runs the hook
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-print-entries-hook&lt;/span&gt;&lt;/code&gt;. The default value of this hook sends the
data directly to the printer with the command &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;lpr-buffer&lt;/span&gt;&lt;/code&gt; (see
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Printing"&gt;Printing&lt;/a&gt;).
If you want to use a different command to do the printing, just change
the value of this hook. Other uses might include, for example,
rearranging the lines into order by day and time.&lt;/p&gt;
&lt;p&gt;You can edit the diary entries as they appear in the simple diary
window, but it is important to remember that the buffer displayed
contains the &lt;em&gt;entire&lt;/em&gt; diary file, with portions of it concealed from
view. This means, for instance, that the C-f (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;forward-char&lt;/span&gt;&lt;/code&gt;) command
can put point at what appears to be the end of the line, but what is in
reality the middle of some concealed line.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Be careful when editing the diary entries in the simple display!&lt;/em&gt;
Inserting additional lines or adding/deleting characters in the middle
of a visible line cannot cause problems, but editing at the end of a
line may not do what you expect. Deleting a line may delete other
invisible entries that follow it. Before editing the simple diary
buffer, it is best to display the entire file with s
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-show-all-entries&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fancy-diary-display"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id43"&gt;31.13.9 Fancy Diary Display&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following features only work with the fancy diary display.&lt;/p&gt;
&lt;p&gt;You can use the normal hook &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-list-entries-hook&lt;/span&gt;&lt;/code&gt; to sort each
day's diary entries by their time of day. Here's how:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(add-hook 'diary-list-entries-hook 'diary-sort-entries t)&lt;/pre&gt;
&lt;p&gt;For each day, this sorts diary entries that begin with a recognizable
time of day according to their times. Diary entries without times come
first within each day. Note how the sort command is placed at the end of
the hook list, in case earlier members of the list change the order of
the diary entries, or add items.&lt;/p&gt;
&lt;p&gt;You can write 'comments' in diary entries, by setting the variables
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-comment-start&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-comment-end&lt;/span&gt;&lt;/code&gt; to strings that
delimit comments. The fancy display does not print comments. You might
want to put meta-data for the use of other packages (e.g., the
appointment package, see
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Appointments"&gt;Appointments&lt;/a&gt;)
inside comments.&lt;/p&gt;
&lt;p&gt;Your main diary file can include other files. This permits a group of
people to share a diary file for events that apply to all of them. Lines
in the diary file starting with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-include-string&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;#include "filename"&lt;/pre&gt;
&lt;p&gt;include the diary entries from the file filename in the fancy diary
buffer. The include mechanism is recursive, so that included files can
include other files, and so on (you must be careful not to have a cycle
of inclusions, of course). Here is how to enable the include facility:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(add-hook 'diary-list-entries-hook 'diary-include-other-diary-files)
(add-hook 'diary-mark-entries-hook 'diary-mark-included-diary-files)&lt;/pre&gt;
&lt;p&gt;The include mechanism works only with the fancy diary display, because
simple diary display shows the entries directly from your diary file.&lt;/p&gt;
&lt;p&gt;Previous: &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Fancy-Diary-Display"&gt;Fancy Diary
Display&lt;/a&gt;,
Up: &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Advanced-Calendar_002fDiary-Usage"&gt;Advanced Calendar/Diary
Usage&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sexp-entries-and-the-fancy-diary-display"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/#id44"&gt;31.13.10 Sexp Entries and the Fancy Diary Display&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sexp diary entries allow you to do more than just have complicated
conditions under which a diary entry applies. Sexp entries should be
preceded by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-sexp-entry-symbol&lt;/span&gt;&lt;/code&gt; (default '%%') in the diary
file. With the fancy diary display, sexp entries can generate the text
of the entry depending on the date itself.&lt;/p&gt;
&lt;p&gt;For example, an anniversary diary entry can insert the number of years
since the anniversary date into the text of the diary entry. Thus the
'%d' in this diary entry:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-anniversary 10 31 1948) Arthur's birthday (%d years old)&lt;/pre&gt;
&lt;p&gt;gets replaced by the age, so on October 31, 1990 the entry appears in
the fancy diary buffer like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;Arthur's birthday (42 years old)&lt;/pre&gt;
&lt;p&gt;If the diary file instead contains this entry:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-anniversary 10 31 1948) Arthur's %d%s birthday&lt;/pre&gt;
&lt;p&gt;the entry in the fancy diary buffer for October 31, 1990 appears like
this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;Arthur's 42nd birthday&lt;/pre&gt;
&lt;p&gt;Similarly, cyclic diary entries can interpolate the number of
repetitions that have occurred:&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-cyclic 50 1 1 2012) Renew medication (%d%s time)&lt;/pre&gt;
&lt;p&gt;looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;Renew medication (5th time)&lt;/pre&gt;
&lt;p&gt;in the fancy diary display on September 7, 2012.&lt;/p&gt;
&lt;p&gt;There is an early-reminder diary sexp that includes its entry in the
diary not only on the date of occurrence, but also on earlier dates. For
example, if you want a reminder a week before your anniversary, you can
use&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-remind '(diary-anniversary 12 22 1968) 7) Ed's anniversary&lt;/pre&gt;
&lt;p&gt;and the fancy diary will show 'Ed's anniversary' both on December 15 and
on December 22.&lt;/p&gt;
&lt;p&gt;The function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-date&lt;/span&gt;&lt;/code&gt; applies to dates described by a month, day,
year combination, each of which can be an integer, a list of integers,
or &lt;code class="docutils literal"&gt;t&lt;/code&gt; (meaning all values). For example,&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-date '(10 11 12) 22 t) Rake leaves&lt;/pre&gt;
&lt;p&gt;causes the fancy diary to show&lt;/p&gt;
&lt;pre class="literal-block"&gt;Rake leaves&lt;/pre&gt;
&lt;p&gt;on October 22, November 22, and December 22 of every year.&lt;/p&gt;
&lt;p&gt;The function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;diary-float&lt;/span&gt;&lt;/code&gt; allows you to describe diary entries that
apply to dates like the third Friday of November, or the last Tuesday in
April. The parameters are the month, dayname, and an index n. The entry
appears on the nth dayname after the first day of month, where dayname=0
means Sunday, 1 means Monday, and so on. If n is negative it counts
backward from the end of month. The value of month can be a list of
months, a single month, or &lt;code class="docutils literal"&gt;t&lt;/code&gt; to specify all months. You can also use
an optional parameter day to specify the nth dayname on or after/before
day of month; the value of day defaults to 1 if n is positive and to the
last day of month if n is negative. For example,&lt;/p&gt;
&lt;pre class="literal-block"&gt;%%(diary-float t 1 -1) Pay rent&lt;/pre&gt;
&lt;p&gt;causes the fancy diary to show&lt;/p&gt;
&lt;pre class="literal-block"&gt;Pay rent&lt;/pre&gt;
&lt;p&gt;on the last Monday of every month.&lt;/p&gt;
&lt;p&gt;The generality of sexp diary entries lets you specify any diary entry
that you can describe algorithmically. A sexp diary entry contains an
expression that computes whether the entry applies to any given date. If
its value is non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;, the entry applies to that date; otherwise,
it does not. The expression can use the variable &lt;code class="docutils literal"&gt;date&lt;/code&gt; to find the
date being considered; its value is a list (month day year) that refers
to the Gregorian calendar.&lt;/p&gt;
&lt;p&gt;The sexp diary entry applies to a date when the expression's value is
non-&lt;code class="docutils literal"&gt;nil&lt;/code&gt;, but some values have more specific meanings. If the value
is a string, that string is a description of the event which occurs on
that date. The value can also have the form &lt;code class="docutils literal"&gt;(=mark&lt;/code&gt;.=string=)=; then
mark specifies how to mark the date in the calendar, and string is the
description of the event. If mark is a single-character string, that
character appears next to the date in the calendar. If mark is a face
name, the date is displayed in that face. If mark is &lt;code class="docutils literal"&gt;nil&lt;/code&gt;, that
specifies no particular highlighting for the date.&lt;/p&gt;
&lt;p&gt;Suppose you get paid on the 21st of the month if it is a weekday, and on
the Friday before if the 21st is on a weekend. Here is how to write a
sexp diary entry that matches those dates:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;amp;%%(let ((dayname (calendar-day-of-week date))
         (day (cadr date)))
      (or (and (= day 21) (memq dayname '(1 2 3 4 5)))
          (and (memq day '(19 20)) (= dayname 5)))
         ) Pay check deposited&lt;/pre&gt;
&lt;p&gt;The following sexp diary entries take advantage of the ability (in the
fancy diary display) to concoct diary entries whose text varies based on
the date:&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-sunrise-sunset)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry for today's local times of sunrise and sunset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-lunar-phases)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry for the phases (quarters) of the moon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-day-of-year)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's day number in the current year and
the number of days remaining in the current year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-iso-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent ISO commercial date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-julian-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Julian calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-astro-day-number)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent astronomical (Julian) day
number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-bahai-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Bahá'í calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-chinese-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Chinese calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-coptic-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Coptic calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-ethiopic-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Ethiopic calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-french-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent date on the French
Revolutionary calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Hebrew calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-islamic-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Islamic calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-mayan-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Mayan calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-persian-date)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry with today's equivalent Persian calendar date.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, including the diary entry&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;amp;%%(diary-hebrew-date)&lt;/pre&gt;
&lt;p&gt;causes every day's diary display to contain the equivalent date on the
Hebrew calendar, if you are using the fancy diary display. (With simple
diary display, the literal line '&amp;amp;%%(diary-hebrew-date)' appears in the
diary for any date.)&lt;/p&gt;
&lt;p&gt;This function has been used to construct certain standard Hebrew sexp
diary entries:&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-rosh-hodesh)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry that tells the occurrence and ritual announcement
of each new Hebrew month.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-parasha)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a Saturday diary entry that tells the weekly synagogue scripture
reading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-sabbath-candles)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a Friday diary entry that tells the &lt;em&gt;local time&lt;/em&gt; of Sabbath
candle lighting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-omer)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make a diary entry that gives the omer count, when appropriate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-yahrzeit=month&lt;/span&gt; day year&lt;/code&gt;)=name&lt;/p&gt;
&lt;p&gt;Make a diary entry marking the anniversary of a date of death. The
date is the &lt;em&gt;Gregorian&lt;/em&gt; (civil) date of death. The diary entry
appears on the proper Hebrew calendar anniversary and on the day
before. (The order of the parameters changes according to the
calendar date style; for example in the European style to day, month,
year.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;%%(diary-hebrew-birthday=month&lt;/span&gt; day year&lt;/code&gt;)=&lt;/p&gt;
&lt;p&gt;Make a diary entry for a birthday on the Hebrew calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the functions documented above take an optional argument mark which
specifies how to mark the date in the calendar display. If one of these
functions decides that it applies to a certain date, it returns a value
that contains mark, as described above.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>time</category><category>评注笔记</category><guid>https://alinbxsorcerer.github.io/posts/emacs-manual-calendar-and-the-diary/</guid><pubDate>Thu, 16 May 2019 01:53:29 GMT</pubDate></item><item><title>时间管理的三件武器</title><link>https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id1" id="id8"&gt;前情概要&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id2" id="id9"&gt;时间管理的三件武器&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#python" id="id10"&gt;Python中的时间管理&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#calender" id="id11"&gt;1. Calender&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#time" id="id12"&gt;2. Time&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#datetime" id="id13"&gt;3. Datetime&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#shell" id="id14"&gt;Shell的时间管理工具&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#calendar" id="id15"&gt;1.Calendar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#clock-time" id="id16"&gt;2.Clock(Time)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id5" id="id17"&gt;3.Datetime&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#emacs" id="id18"&gt;Emacs中的时间管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id6" id="id19"&gt;总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id7" id="id20"&gt;参考资料&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id8"&gt;前情概要&lt;/a&gt;&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;“时间变量的顺序与时间表示的格式”
总结了时间的10个变量及其直觉解析的顺序&lt;/div&gt;
&lt;div class="line"&gt;&lt;code class="docutils literal"&gt;Weekday Hour:Minute &lt;span class="pre"&gt;Month-Day&lt;/span&gt; WeekNumber Year&lt;/code&gt;&lt;/div&gt;
&lt;div class="line"&gt;“时间的感知与分析”阐述对时间的认知方法论以奠定高效利用和有效掌控时间的基础。&lt;/div&gt;
&lt;div class="line"&gt;“工欲善其事必先利其器”，接下来的问题便是时间管理的工具。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id9"&gt;时间管理的三件武器&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;无论是手机的android系统还是Linux系统，都提供两项基本的时间管理工具日历(calendar)
and 时钟(clock). Calendar是date地图，提供全景式的鸟瞰图；
clock是指南针，指导具体的每一步应该迈向何处。
二者的结合形成第三个工具datetime。&lt;/p&gt;
&lt;p&gt;工具虽然简单，但如果不能抽象到认知的层面，则不能为己所用。试问，谁手机里没个日历，每个钟表呢。认知层面的结论是需要且仅需要这三件工具O(∩_∩)O。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;日历提供全景式鸟瞰&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-1"&gt;&lt;/a&gt;$ ncal -B &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;#ncal中的n竟然是new这个单词&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-2"&gt;&lt;/a&gt;    February &lt;span class="m"&gt;2019&lt;/span&gt;     March &lt;span class="m"&gt;2019&lt;/span&gt;        April &lt;span class="m"&gt;2019&lt;/span&gt;        May &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-3"&gt;&lt;/a&gt;Su      &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt;     &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;        &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-4"&gt;&lt;/a&gt;Mo     &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;      &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-5"&gt;&lt;/a&gt;Tu      &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;        &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;        &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-6"&gt;&lt;/a&gt;We     &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;      &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-7"&gt;&lt;/a&gt;Th      &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;        &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;      &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-8"&gt;&lt;/a&gt;Fr       &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;15&lt;/span&gt;   &lt;span class="m"&gt;22&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;       &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt;
&lt;a name="rest_code_e08499dd26b74a9ca39eee66df7a2833-9"&gt;&lt;/a&gt;Sa  &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;       &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时钟实施具体的测量&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_9ffe068b2b0847b5a3503e58fc89d81e-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; sleep 10real    0m10.011suser    0m0.002ssys     0m0.001s
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime整合二者，提供更加实用的功能&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b22cd1426a8644e486e48c600b5d6901-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#贸易战倒计时&lt;/span&gt;
&lt;a name="rest_code_b22cd1426a8644e486e48c600b5d6901-2"&gt;&lt;/a&gt;$ &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"America/New_York"&lt;/span&gt; date &lt;span class="c1"&gt;#美东夏季时间， 第十个变量时区。&lt;/span&gt;
&lt;a name="rest_code_b22cd1426a8644e486e48c600b5d6901-3"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:04:30 EDT &lt;span class="m"&gt;2019&lt;/span&gt;  &lt;span class="c1"&gt;#Eatern Daylight Timer&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id10"&gt;Python中的时间管理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以calendar,
clock(time),datetime与十个时间变量为基础，审视python的&lt;code class="docutils literal"&gt;calendar&lt;/code&gt;,
&lt;code class="docutils literal"&gt;time&lt;/code&gt;, and &lt;code class="docutils literal"&gt;datetime&lt;/code&gt;&lt;/p&gt;
&lt;div class="section" id="calender"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id11"&gt;1. Calender&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/calendar.html"&gt;calendar — General calendar-related
functions&lt;/a&gt; &lt;a class="reference external" href="https://pymotw.com/3/calendar/index.html"&gt;calendar
— Work with Dates — PyMOTW
3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python中的calendar十个无关紧要的工具，没有人会费力不讨好的到这里查看日期和规划日程。&lt;/p&gt;
&lt;pre class="literal-block"&gt;class TextCalendar(Calendar)
 |  TextCalendar(firstweekday=0)
In [326]: cal = calendar.TextCalendar(calendar.MONDAY)       #周一作为一周的起始点
In [327]: cal.prmonth(2019, 5)
      May 2019
Mo Tu We Th Fr Sa Su
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31
In [328]: cal.pryear(2019)
                                  2019
      January                                   February                                    March
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
    1  2  3  4  5  6                   1  2  3                                           1  2  3
 7  8  9 10 11 12 13           4  5  6  7  8  9 10                            4  5  6  7  8  9 10
14 15 16 17 18 19 20      11 12 13 14 15 16 17              11 12 13 14 15 16 17
21 22 23 24 25 26 27      18 19 20 21 22 23 24             18 19 20 21 22 23 24
28 29 30 31                       25 26 27 28                                  25 26 27 28 29 30 31
# 只了解下TextCalendar, pryear, prmonth&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="time"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id12"&gt;2. Time&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/time.html#module-time"&gt;time — Time access and
conversions&lt;/a&gt;
&lt;a class="reference external" href="https://pymotw.com/3/calendar/index.html"&gt;calendar — Work with Dates — PyMOTW
3&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;与epoch time的相互转换&lt;/p&gt;
&lt;p&gt;Use the following functions to convert between time representations:
人以minutes计时， 机器以second计时。&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;col style="width: 33%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;From&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;To&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Use&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in UTC&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`gmtime()&lt;/code&gt; &amp;lt;https:
//docs.python.org/3/l
ibrary/time.html#time
.gmtime&amp;gt;`__&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in local time&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`localtime()&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.localtime&amp;gt;`__&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in UTC&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id3"&gt;&lt;span class="problematic" id="id4"&gt;``&lt;/span&gt;&lt;/a&gt;&lt;cite&gt;calendar.timegm()&lt;/cite&gt;
` &amp;lt;&lt;a class="reference external" href="https://docs.pytho"&gt;https://docs.pytho&lt;/a&gt;
n.org/3/library/calen
dar.html#calendar.tim
egm&amp;gt;`__&lt;/p&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 120); &lt;em&gt;&lt;a href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline literal start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`struct_time&lt;/code&gt; &amp;lt;htt
ps://docs.python.org/
3/library/time.html#t
ime.struct_time&amp;gt;`__
in local time&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;seconds since the
epoch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;`mktime()&lt;/code&gt; &amp;lt;https:
//docs.python.org/3/l
ibrary/time.html#time
.mktime&amp;gt;`__&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class="literal-block"&gt;#seconds to  timetuple
In [8]: time.localtime() #local time
Out[8]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=15, tm_hour=20, tm_min=4, tm_sec=17, tm_wday=2, tm_yday=135, tm_isdst=0)

In [9]: time.gmtime() #UTC time
Out[9]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=15, tm_hour=12, tm_min=4, tm_sec=31, tm_wday=2, tm_yday=135, tm_isdst=0)

In [11]: time.gmtime(100)  #
Out[11]: time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=1, tm_sec=40, tm_wday=3, tm_yday=1, tm_isdst=0)
#timetuple to seconds
In [17]: calendar.timegm(time.gmtime()) #UTC time
Out[17]: 1557922318
In [18]: time.mktime(time.localtime()) #Local time
Out[18]: 1557922368.0&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第十一个-时间变量 &lt;code class="docutils literal"&gt;tm_isdst&lt;/code&gt; daylight saving time夏季时间&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_094a698ef79c436f9b86651afbf22bc2-1"&gt;&lt;/a&gt;gmtime&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt; -&amp;gt;time.struct_time,  &lt;span class="o"&gt;(&lt;/span&gt;strptime, localtime&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_094a698ef79c436f9b86651afbf22bc2-2"&gt;&lt;/a&gt;    gmtime&lt;span class="o"&gt;([&lt;/span&gt;seconds&lt;span class="o"&gt;])&lt;/span&gt; -&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;tm_year, tm_mon, tm_mday, tm_hour, tm_min,
&lt;a name="rest_code_094a698ef79c436f9b86651afbf22bc2-3"&gt;&lt;/a&gt;                           tm_sec, tm_wday, tm_yday, tm_isdst&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Processor Time and Timer&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-1"&gt;&lt;/a&gt;time.process_time&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#cpu time  of kernel and user-space&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-2"&gt;&lt;/a&gt;time.process_time_ns&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;int &lt;span class="c1"&gt;#not inclue sleep time&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-3"&gt;&lt;/a&gt;time.perf_counter&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;float
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-4"&gt;&lt;/a&gt;time.perf_counter_ns&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt; int
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-5"&gt;&lt;/a&gt;time.thread_time&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;float
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-6"&gt;&lt;/a&gt;time.thread_time_ns&lt;span class="o"&gt;()&lt;/span&gt; -&amp;gt;int
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-7"&gt;&lt;/a&gt;time.time&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-8"&gt;&lt;/a&gt;time.time_ns&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-9"&gt;&lt;/a&gt;time.sleep
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-10"&gt;&lt;/a&gt;time.monotonic&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0180342efd044f7bbab7ccdc734afc57-11"&gt;&lt;/a&gt;time.monotonic_ns&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Timezone Constants&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-1"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.daylight
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-2"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-3"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.tzname
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-4"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CST'&lt;/span&gt;, &lt;span class="s1"&gt;'CST'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-5"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.altzone
&lt;a name="rest_code_850e78c1e4574a9db79e2a58830ba72e-6"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: -28800
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两个重要的methods&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_232b38deadda42eb9e8aa330e957a7f4-1"&gt;&lt;/a&gt;time.strptime&lt;span class="o"&gt;(&lt;/span&gt;string, format&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_232b38deadda42eb9e8aa330e957a7f4-2"&gt;&lt;/a&gt;time.strftime&lt;span class="o"&gt;(&lt;/span&gt;format&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctime&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-1"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.asctime&lt;span class="o"&gt;(&lt;/span&gt;time.localtime&lt;span class="o"&gt;())&lt;/span&gt;
&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-2"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="s1"&gt;'Wed May 15 21:05:27 2019'&lt;/span&gt;
&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-3"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.ctime&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_2f994524d98c4ae0b179bc2c8b65eae8-4"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="s1"&gt;'Wed May 15 21:05:32 2019'&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="datetime"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id13"&gt;3. Datetime&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;复习calendar(date), clock(time)的逻辑，先看两个没用的函数。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pymotw.com/3/datetime/index.html"&gt;datetime — Date and Time Value Manipulation — PyMOTW
3&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;datetime.date()&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="err"&gt;就是符号&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;x返回的内容&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-2"&gt;&lt;/a&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;135&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;135&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;136&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;136&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;a name="rest_code_112f46689fe64ed9ac43ee3b830a6d04-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime.time()&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;符号&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;X返回的内容&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-2"&gt;&lt;/a&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;microsecond&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="p"&gt;]]]]])&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;#5个参数,由大到小排列&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;  &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzutc&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s2"&gt;:%S:%M:%H %Z"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'999999:30:15:06 UTC'&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolution&lt;/span&gt;
&lt;a name="rest_code_abd81a72bb934b6f9df7f9402495b267-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;microseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#精确度&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime.datetime&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#前面两个datetime.time and datetime.date没啥用.&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#这里的关键是第十个时间变量tzinfo&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-4"&gt;&lt;/a&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;microsecond&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="p"&gt;]]]]])&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;Help&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;week&lt;/span&gt; &lt;span class="n"&gt;represented&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Monday&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;Sunday&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gettz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Asia/Shanghai"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;421561&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tzfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/usr/share/zoneinfo/Asia/Shanghai'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-13"&gt;&lt;/a&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;208&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timetuple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5bd1aa50d43043b3a3d707fb99ae3500-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;208&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;struct_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tm_year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_sec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_wday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_yday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;129&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_isdst&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;datetime.timedelta and Arithmetic Opertions&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;microseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weeks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;219&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;219&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;910880&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="s2"&gt;"1 days ago"&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;Wed&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="n"&gt;CST&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-6"&gt;&lt;/a&gt; &lt;span class="c1"&gt;#转换为seconds的另外一种写法&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'0:01:40'&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%H:%M:%S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gmtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ae9c8e5bdd694310921c0278d97c8f8c-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'00:50:00'&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="shell"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id14"&gt;Shell的时间管理工具&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="calendar"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id15"&gt;1.Calendar&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;$ ncal -1
$ ncal -M #Monday as the first day
$ ncal -w #weeknumber
$ncal -y -m;
$ncal -d yyyy-mm
$ncal yyyy-mm-dd#highlight the current date
$ ncal -A3 -B4
#就只有这么多操作&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="clock-time"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id16"&gt;2.Clock(Time)&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hwclock&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-1"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: !sudo hwclock
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-2"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;-05-15 &lt;span class="m"&gt;21&lt;/span&gt;:25:29.514803+08:00
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-3"&gt;&lt;/a&gt;---------------------------------------------------
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-4"&gt;&lt;/a&gt;NAME
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-5"&gt;&lt;/a&gt;       hwclock - &lt;span class="nb"&gt;time&lt;/span&gt; clocks utility
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-6"&gt;&lt;/a&gt;FILES
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-7"&gt;&lt;/a&gt;       /etc/adjtime
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-8"&gt;&lt;/a&gt;              The configuration and state file &lt;span class="k"&gt;for&lt;/span&gt; hwclock.
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-9"&gt;&lt;/a&gt;       /etc/localtime
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-10"&gt;&lt;/a&gt;              The system timezone file
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-11"&gt;&lt;/a&gt;       /usr/share/zoneinfo/
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-12"&gt;&lt;/a&gt;              The system timezone database directory.
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-13"&gt;&lt;/a&gt;       Device files hwclock may try &lt;span class="k"&gt;for&lt;/span&gt; Hardware Clock access:
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-14"&gt;&lt;/a&gt;       /dev/rtc0
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-15"&gt;&lt;/a&gt;       /dev/rtc
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-16"&gt;&lt;/a&gt;       /dev/misc/rtc
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-17"&gt;&lt;/a&gt;       /dev/efirtc
&lt;a name="rest_code_695446ee768f4526a5b78b8765ee176a-18"&gt;&lt;/a&gt;       /dev/misc/efirtc
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;time (processing profile)&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-1"&gt;&lt;/a&gt;    $ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;tree  /usr/share/zoneinfo &lt;span class="p"&gt;|&lt;/span&gt; grep -i &lt;span class="s2"&gt;"prc"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-2"&gt;&lt;/a&gt;    │   ├── Chongqing -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-3"&gt;&lt;/a&gt;    │   ├── Chungking -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-4"&gt;&lt;/a&gt;    │   ├── Harbin -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-5"&gt;&lt;/a&gt;    │   ├── Shanghai -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-6"&gt;&lt;/a&gt;    │   │   ├── Chongqing -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-7"&gt;&lt;/a&gt;    │   │   ├── Chungking -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-8"&gt;&lt;/a&gt;    │   │   ├── Harbin -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-9"&gt;&lt;/a&gt;    │   │   ├── Shanghai -&amp;gt; ../../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-10"&gt;&lt;/a&gt;    │   ├── PRC -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-11"&gt;&lt;/a&gt;    ├── PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-12"&gt;&lt;/a&gt;    │   │   ├── Chongqing -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-13"&gt;&lt;/a&gt;    │   │   ├── Chungking -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-14"&gt;&lt;/a&gt;    │   │   ├── Harbin -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-15"&gt;&lt;/a&gt;    │   │   ├── Shanghai -&amp;gt; ../PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-16"&gt;&lt;/a&gt;    │   ├── PRC
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-18"&gt;&lt;/a&gt;    real    0m0.017s
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-19"&gt;&lt;/a&gt;    user    0m0.015s
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-20"&gt;&lt;/a&gt;    sys     0m0.004s
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_8d0bbe5e6e9d4bd3845d1ebb6a5151b6-22"&gt;&lt;/a&gt;&lt;span class="m"&gt;3&lt;/span&gt;.Datetime
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;span id="datetime-1"&gt;&lt;/span&gt;&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id17"&gt;3.Datetime&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;timedatectl&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#systemd的service&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-2"&gt;&lt;/a&gt;$ timedatectl
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-3"&gt;&lt;/a&gt;               Local time: Thu &lt;span class="m"&gt;2019&lt;/span&gt;-05-09 &lt;span class="m"&gt;21&lt;/span&gt;:30:27 CST
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-4"&gt;&lt;/a&gt;           Universal time: Thu &lt;span class="m"&gt;2019&lt;/span&gt;-05-09 &lt;span class="m"&gt;13&lt;/span&gt;:30:27 UTC
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-5"&gt;&lt;/a&gt;                 RTC time: Thu &lt;span class="m"&gt;2019&lt;/span&gt;-05-09 &lt;span class="m"&gt;13&lt;/span&gt;:30:27
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-6"&gt;&lt;/a&gt;                Time zone: Asia/Shanghai &lt;span class="o"&gt;(&lt;/span&gt;CST, +0800&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-7"&gt;&lt;/a&gt;System clock synchronized: yes
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-8"&gt;&lt;/a&gt;              NTP service: active
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-10"&gt;&lt;/a&gt; - Check the current system clock time:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-11"&gt;&lt;/a&gt;   timedatectl
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-12"&gt;&lt;/a&gt; - Set the &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; of the system clock directly:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-13"&gt;&lt;/a&gt;   timedatectl set-time &lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="s2"&gt;"yyyy-MM-dd hh:mm:ss"&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-15"&gt;&lt;/a&gt; - List available timezones:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-16"&gt;&lt;/a&gt;   timedatectl list-timezones
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-18"&gt;&lt;/a&gt; - Set the system timezone:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-19"&gt;&lt;/a&gt;   timedatectl set-timezone &lt;span class="o"&gt;{{&lt;/span&gt;timezone&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-21"&gt;&lt;/a&gt; - Enable Network Time Protocol &lt;span class="o"&gt;(&lt;/span&gt;NTP&lt;span class="o"&gt;)&lt;/span&gt; synchronization:
&lt;a name="rest_code_0f4b6c8cb0484a54b340f69631303213-22"&gt;&lt;/a&gt;   timedatectl set-ntp on
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;date (最趁手的一个工具)&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 日常应用date作为思考工具.&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-2"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: time.time&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-3"&gt;&lt;/a&gt;Out&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;1557406444&lt;/span&gt;.1336956
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-4"&gt;&lt;/a&gt;In &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: !date +%s
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-5"&gt;&lt;/a&gt;&lt;span class="m"&gt;1557406449&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-6"&gt;&lt;/a&gt;$ date -d @&lt;span class="k"&gt;$(&lt;/span&gt;date +%s&lt;span class="k"&gt;)&lt;/span&gt;　&lt;span class="c1"&gt;#date -d @1557406449&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-7"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:11:15 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#基本的操作&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-10"&gt;&lt;/a&gt;$ date -u +&lt;span class="s2"&gt;"%Y-%m-%dT%H:%M:%SZ"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-11"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;-05-09T12:55:31Z
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#Future date and time&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-14"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;" two weeks"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-15"&gt;&lt;/a&gt;date: invalid date ‘ two weeks’
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-16"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"2 weeks"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-17"&gt;&lt;/a&gt;Thu May &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:20:17 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-18"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"next fri"&lt;/span&gt; &lt;span class="c1"&gt;#只有两个变量能够以文字表述 Month and Weekday&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-19"&gt;&lt;/a&gt;Fri May &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:00:00 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#the elpased date and time&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-22"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"last thursday"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-23"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:00:00 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-24"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"2 days ago"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-25"&gt;&lt;/a&gt;Tue May  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:22:28 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-26"&gt;&lt;/a&gt;$ date -d &lt;span class="s2"&gt;"last month"&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-27"&gt;&lt;/a&gt;Tue Apr  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:22:39 CST &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-29"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#贸易战倒计时&lt;/span&gt;
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-30"&gt;&lt;/a&gt;$ &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"America/New_York"&lt;/span&gt; date
&lt;a name="rest_code_ed75accb4cca465da4151352d7bf52b9-31"&gt;&lt;/a&gt;Thu May  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:04:30 EDT &lt;span class="m"&gt;2019&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="emacs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id18"&gt;Emacs中的时间管理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;….&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id19"&gt;总结&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;时间管理的三个工具, time, datetime, calendar(从微观到宏观处理5, 8,
10个时间变量)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our units of temporal measurement, from seconds on up to months, are
so complicated, asymmetrical and disjunctive so as to make coherent
mental reckoning in time all but impossible. Indeed, had some
tyrannical god contrived to enslave our minds to time, to make it all
but impossible for us to escape subjection to sodden routines and
unpleasant surprises, he could hardly have done better than handing
down our present system. It is like a set of trapezoidal building
blocks, with no vertical or horizontal surfaces, like a language in
which the simplest thought demands constructions, useless particles
and lengthy circumlocutions. Unlike the more successful patterns of
language and science, which enable us to face experience boldly or at
least level-headedly, our system of temporal calculation silently and
persistently encourages our terror of time.&lt;/p&gt;
&lt;p&gt;… It is as though architects had to measure length in feet, width in
meters and height in ells; as though basic instruction manuals
demanded a knowledge of five different languages. It is no wonder
then that we often look into our own immediate past or future, last
Tuesday or a week from Sunday, with feelings of helpless confusion. …&lt;/p&gt;
&lt;p class="attribution"&gt;—Robert Grudin, Time and the Art of Living.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈哈～，神吐槽。因此需要将so complicated, asymmetrical and disjunctive
抽象为calender, time, datetime。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/#id20"&gt;参考资料&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;GNU Coreutils: Date input
formats &amp;lt;https://www.gnu.org/software/coreutils/manual/html_node/Date-input-formats.html#Date-input-formats&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>emacs</category><category>python</category><category>time</category><category>时间管理</category><guid>https://alinbxsorcerer.github.io/posts/shi-jian-guan-li-de-san-jian-wu-qi/</guid><pubDate>Wed, 15 May 2019 12:53:29 GMT</pubDate></item><item><title>时间变量的顺序与格式</title><link>https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id1" id="id4"&gt;时间的感知&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#cron" id="id5"&gt;Cron中时间变量的顺序&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id2" id="id6"&gt;时间的格式&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id3" id="id7"&gt;总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id4"&gt;时间的感知&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;直觉对时间的感知, 是按照怎么的顺序解析的呢?
从早晨起床这个场景中,分析大脑解析时间的顺序.&lt;/p&gt;
&lt;p&gt;似乎理所当然的一点,Hour(时)排在最前面,Hour:Minute的组合是醒来后第一时间想要获得的信息,以判断上班是否迟到,是否有时间吃早餐?但是再想一层,上班是否迟到?
在处理Hour:Minute之前,潜意识已经先获取并处理完了一个信息:今天是周几?(Weekday).如果是周末的话,几点几分起床并不特别重要.
因此,最先处理的三个变量是Weekday Hour:Minutes&lt;/p&gt;
&lt;p&gt;再看日期,Month-Day,哪个变量在前呢?
如果day在前,则是冗余信息,因为已经weekday在先.
解析日期,首先获取Month,以判断一年的进度,获得当前时间在一年中所处的位置,比如May的含义是一年已经将半.
日期的顺序是Month-Day&lt;/p&gt;
&lt;p&gt;还有变量week number,是对一年进度的另外一种表示.&lt;/p&gt;
&lt;p&gt;最后是Year&lt;/p&gt;
&lt;p&gt;综上, 直觉解析时间的顺序为:
&lt;code class="docutils literal"&gt;Weekday Hour:Minute &lt;span class="pre"&gt;Month-Day&lt;/span&gt; WeekNumber Year&lt;/code&gt;,
要事第一,最重要的信息是Weekday. 合计8个变量, 命名为intuitive time(or
intelligent time)简写为itime&lt;/p&gt;
&lt;p&gt;这也是CTIME时间格式的理念.&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [2]: time.ctime()
Out[2]: 'Wed May 15 08:29:38
[3]:!date
Wed May 15 08:31:45 CST 2019&lt;/pre&gt;
&lt;p&gt;ctime将weekday安排在最前面,然后遵循这个先处理日期的逻辑,May:15跟在后面提高日期的精确颗粒度.但是对大脑的瞬间思考而言,则是冗余信息.因此以itime作为基石,推导拓展到其他时间顺序.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cron"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id5"&gt;Cron中时间变量的顺序&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The sequence matters. 时间变量顺序的第一个应用场景是cron.&lt;/p&gt;
&lt;p&gt;Cron的顺序是Minute:Hour Day:Month Weekday&lt;/p&gt;
&lt;pre class="literal-block"&gt;# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
# │ │ │ │ │                                   7 is also Sunday on some systems)
# │ │ │ │ │
# │ │ │ │ │
# * * * * * command to execute&lt;/pre&gt;
&lt;p&gt;大脑长于处理模糊宏观的信息,而机器专于精确的信息,将最小的时间单位排在前面,是倒排的ctime.应用的时候也只需要将思考倒叙.&lt;/p&gt;
&lt;p&gt;cron将minute作为最小单位和第一顺序是因为crond按分钟扫描,可见从性能经济性的角度考虑,对大脑和对机器,
秒都是可以忽略的,不然会浪费大量的资源．&lt;/p&gt;
&lt;p&gt;接下来讨论一个问题: 在感知上, minutes:hours 与hours:minutes有何差异呢？&lt;/p&gt;
&lt;p&gt;minutes:hours的顺序，是将精力关注到一个小时之内，比如六点十五=15:06=表达出来是，在从6点到７点这一个小时的时间段内，已经过去了15分钟，知道现在已经消费了一个小时的四分之一(1/4)，接下来就会自然的发问，按照这个进度，等一个小时结束能完成多少工作．
而hours:minutes的顺序，是关注在一天之内，比如=06:15=表达的是，现在是早上时间(6/24)，一天之计在于晨，后面的分钟15只是作为辅助．
总结：hour:minutes(6:15)关注的是一天之内，而minute:hour关注的是一个小时之内，以一个小时为单位做计划和考核产出．&lt;/p&gt;
&lt;p&gt;在直觉上采用哪一个作为基础,等更多的应用总结后,再行确定.暂时采用Hour:Minute的格式,因为minute:hour消耗更多大脑内存和计算资源.&lt;/p&gt;
&lt;p&gt;总结, cron是写给机器读的,对象是机器,因此将ctime倒叙.&lt;/p&gt;
&lt;p&gt;需要记住时间顺序的另外一个应用场景是=journalctl=&lt;/p&gt;
&lt;pre class="literal-block"&gt;journalctl --since  “YYYY-MM-DD HH:MM:SS” --until “YYYY-MM-DD HH:MM:SS”&lt;/pre&gt;
&lt;p&gt;从宏观到微观,从模糊到精确,这是写给人用的时间格式,也是ISO的标准时间格式.&lt;/p&gt;
&lt;p&gt;引用一段话:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your computer is not a lifeless piece of machinery. It is a dynamic
tool that interacts with your very thought processes. Whenever you
use a computer it becomes, for better or for worse, an extension of
your mind.&lt;/p&gt;
&lt;p&gt;This means that, whenever you use a Unix or Linux system, you are
forging a mental relationship with some of the smartest, most
accomplished (and satisfied) programmers and computer scientists who
ever lived. Such a partnership can't help but have a positive effect
on you.&lt;/p&gt;
&lt;p&gt;As you do, your mind will change for the better, your thought
processes will improve, and your way of looking at the world and at
yourself will change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id6"&gt;时间的格式&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以Cron的5个时间变量顺序为基础分析时间表示的格式, 前面加上second+(minute,
hour day, month weekday)后面补充year and weeknumber.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;时间的格式以C, python采用的unix strftime格式为准.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="literal-block"&gt;|-------------+----------+----------+---------------------+-----------------+-------------------+---------------------+---------------+---------|
| 时间变量    | 1.second | 2.minute | 3.hour              | 4.day           | 5.month           | 6.weekday           | 7.week number | 8.year  |
|-------------+----------+----------+---------------------+-----------------+-------------------+---------------------+---------------+---------|
| 常规符号    | %S 01    | %M 01    | %H 23               | %d 01           | %m 01             | %w (0-6)            | %W            | %y 19   |
| 简单扩展    |          |          | %I (12-hour), %p AM |                 |                   |                     |               | %Y 2019 |
| 文字描述    |          |          |                     |                 | %b Oct, %BOctober | %a Thu, %A Thursday |               |         |
| Obscure扩展 | %f 微秒  |          |                     | % e 1~31 %j 366 |                   | %u(1~7)             | %V %U         | %G 2019 |
|-------------+----------+----------+---------------------+-----------------+-------------------+---------------------+---------------+---------|&lt;/pre&gt;
&lt;p&gt;分析:&lt;/p&gt;
&lt;p&gt;第一行, 钟表时间全部为大写, 日期时间全部为小写,
WeekNumber大写%W与weekday %w相区分; 第二行, 简单扩展, %H是24小时制,
H后面的字母是I,因此用%I表示12小时制,同时%p(postnoon)标注上下午;
大写的%Y表示四位数字的年2019; 第三行, 文字描述,只有两个变量能以文字描述,
weekday和month, 分别用A, B表示.weekday %A还是第一重要的.&lt;/p&gt;
&lt;p&gt;前三行是常规的表示.&lt;/p&gt;
&lt;p&gt;第四行, obscure扩展, 微秒的表示应该是从剩余可选字母中随机确定的,
%f(fly飞逝),和数日子day 366 %j , %e空格padding. weekday与weekNumber在u,
v, w这三个字母上打转, 小写是weekday大写是weekNumber.&lt;/p&gt;
&lt;p&gt;总结: 按照表格前三行可以在一秒钟内永久性记忆, 日常的书写也采用该格式.
日如ctime &lt;code class="docutils literal"&gt;%a %b %d &lt;span class="pre"&gt;%H:%M:%S&lt;/span&gt; %Y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Timezone的表示&lt;/p&gt;
&lt;pre class="literal-block"&gt;In [7]: !date +"%z"   #UTC offset
+0800
In [8]: !date +"%Z"
CST #China Standard Time&lt;/pre&gt;
&lt;p&gt;快捷方式的format&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In [10]: datetime.now().strftime("%c")      #Locale’s appropriate date and time representation.
Out[10]: 'Thu May  9 11:48:33 2019 #这个格式将weekday放在了前面, 也就是 %a %b的形式.
In [11]: datetime.now().strftime("%x")      #Locale’s appropriate date representation
Out[11]: '05/09/19'
In [12]: datetime.now().strftime("%X")
Out[12]: '11:49:06'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/#id7"&gt;总结&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;10个时间变量,将时区放置在最后.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;%f:%S:%M:%H %d-%m %w %W %Y %Z 日常的书写,使用符号替代minute, hour等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时间格式的的标准：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;ISO 8601 - Wikipedia &amp;lt;https://en.wikipedia.org/wiki/ISO_8601&amp;gt;&lt;/cite&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;W3C DTF &amp;lt;https://www.w3.org/TR/NOTE-datetime&amp;gt;&lt;/cite&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RFC 822(as updated by RFC 1123)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;RFC 2822 - Internet Message Format &amp;lt;https://tools.ietf.org/html/rfc2822.html&amp;gt;&lt;/cite&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>python</category><category>time</category><guid>https://alinbxsorcerer.github.io/posts/shi-jian-bian-liang-de-shun-xu-yu-ge-shi/</guid><pubDate>Mon, 13 May 2019 09:38:19 GMT</pubDate></item><item><title>Re.sub参数顺序的问题</title><link>https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id1" id="id4"&gt;提出问题&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id2" id="id5"&gt;分析问题&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id3" id="id6"&gt;总结:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id4"&gt;提出问题&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在写 &lt;code class="docutils literal"&gt;re.sub&lt;/code&gt; 或者 &lt;code class="docutils literal"&gt;re.subn&lt;/code&gt; 的时候, 常常会不太确定引用参数的顺序,
需要中断的时间查看提示或者help文档. 比如  &lt;code class="docutils literal"&gt;trade war&lt;/code&gt;
修改为 &lt;code class="docutils literal"&gt;trade negotiation&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"war"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"negotiation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"trade war"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'trade negotiation'&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_86f91ef56ab54f6daeef1cf2b0dddff6-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#首先处理regex-pattern&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id5"&gt;分析问题&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与 &lt;code class="docutils literal"&gt;string.methods&lt;/code&gt; 比较. &lt;code class="docutils literal"&gt;pattern&lt;/code&gt;
是与source(input&lt;sub&gt;string&lt;/sub&gt;)的匹配的内容,
repl是修改后的内容(destination), 这里顺序与=str.replace=是一致.&lt;/p&gt;
&lt;pre class="literal-block"&gt;replace(self, old, new, count=-1, /)&lt;/pre&gt;
&lt;p&gt;old 来自source, new是输出到destination结果中.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d8b4edb0986e4cb1b43d6f9d5b71acf5-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s2"&gt;"trade war"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"war"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"negotiation"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d8b4edb0986e4cb1b43d6f9d5b71acf5-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'trade negotiation'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;sed&lt;/code&gt; 也遵循同样的模式.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-1"&gt;&lt;/a&gt;s/regexp/replacement/
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-2"&gt;&lt;/a&gt;       Attempt  to  match  regexp  against  the  pattern  space.   If successful, replace that portion matched with
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-3"&gt;&lt;/a&gt;       replacement.  The replacement may contain the special character &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; to refer to that portion  of  the  pattern
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-4"&gt;&lt;/a&gt;       space  which  matched,  and  the  special  escapes &lt;span class="se"&gt;\1&lt;/span&gt; through &lt;span class="se"&gt;\9&lt;/span&gt; to refer to the corresponding matching sub-
&lt;a name="rest_code_ea4469acc8c64987952c0fff21172384-5"&gt;&lt;/a&gt;       expressions in the regexp.
&lt;/pre&gt;&lt;p&gt;regex-pattern匹配 source 数据中的内容,
replacement则是替换后输出到destination结果中.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_5b9b3e0d70ba433f81740d71a242d342-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'trade war'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;"s/war/negotiation/g"&lt;/span&gt;
&lt;a name="rest_code_5b9b3e0d70ba433f81740d71a242d342-2"&gt;&lt;/a&gt;trade negotiation
&lt;/pre&gt;&lt;p&gt;其他的Text Processing&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"trade-war"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s2"&gt;"-"&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-2"&gt;&lt;/a&gt;trade
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-3"&gt;&lt;/a&gt;war
&lt;a name="rest_code_c8c8f933a7e44e78919f6a5d512713e5-4"&gt;&lt;/a&gt;   tr &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... SET1 &lt;span class="o"&gt;[&lt;/span&gt;SET2&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;SET1 is from the source, SET2 is the result of the destination after
been processed.&lt;/p&gt;
&lt;p&gt;总结这种模式和思维惯例:&lt;/p&gt;
&lt;pre class="literal-block"&gt;function source destination&lt;/pre&gt;
&lt;p&gt;Text Processing如此,&lt;/p&gt;
&lt;p&gt;File Handling的utilities遵循同样的模式.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-1"&gt;&lt;/a&gt;mv &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... SOURCE... DIRECTORY
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-2"&gt;&lt;/a&gt;cp &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... &lt;span class="o"&gt;[&lt;/span&gt;-T&lt;span class="o"&gt;]&lt;/span&gt; SOURCE DEST
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-3"&gt;&lt;/a&gt;ln &lt;span class="o"&gt;[&lt;/span&gt;OPTION&lt;span class="o"&gt;]&lt;/span&gt;... Source... DIRECTORY
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-4"&gt;&lt;/a&gt;rsync &lt;span class="o"&gt;[&lt;/span&gt;OPTION...&lt;span class="o"&gt;]&lt;/span&gt; SRC... &lt;span class="o"&gt;[&lt;/span&gt;DEST&lt;span class="o"&gt;]&lt;/span&gt;
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-5"&gt;&lt;/a&gt;scp  SRC... DEST
&lt;a name="rest_code_5fd90c1acccf4af5ba0c58877b8b76db-6"&gt;&lt;/a&gt;dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/&lt;span class="o"&gt;{{&lt;/span&gt;source_drive&lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/&lt;span class="o"&gt;{{&lt;/span&gt;dest_drive&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;例外的情况是tar. =tar=是将目标放在前面.&lt;/p&gt;
&lt;p&gt;再回头看 &lt;code class="docutils literal"&gt;re.sub&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#扩展后&lt;/span&gt;
&lt;a name="rest_code_67cb6bede37948cb923d5c6bb778f82f-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern_from_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replacement_to_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;三个参数中 &lt;code class="docutils literal"&gt;pattern_from_source&lt;/code&gt;, &lt;code class="docutils literal"&gt;replacement_to_result&lt;/code&gt; ,
&lt;code class="docutils literal"&gt;source_data&lt;/code&gt;
的最后一个是=source&lt;sub&gt;data&lt;/sub&gt;&lt;code class="docutils literal"&gt;, 将source放置在最后. =grep&lt;/code&gt; 与
=sed=都遵循同样的模式&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c56fdbba928b444dbc4aca82ff26de98-1"&gt;&lt;/a&gt;sed &lt;span class="s1"&gt;'s/{{regex}}/{{replace}}/'&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt;filename&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;a name="rest_code_c56fdbba928b444dbc4aca82ff26de98-2"&gt;&lt;/a&gt;grep &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt; -e PATTERN ... &lt;span class="o"&gt;[&lt;/span&gt;FILE...&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#grep regex source&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;例外的情况是=find=&lt;/p&gt;
&lt;pre class="literal-block"&gt;find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]
find [Option] source pattern&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/#id6"&gt;总结:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Data Stream Processing和File Handling遵循 &lt;code class="docutils literal"&gt;subroutine src dst&lt;/code&gt;
模式.两个例外的情况是=tar and find=&lt;/p&gt;
&lt;p&gt;这个问题之所以值得探讨,是因为涉及底层的方法论和工作模式.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>python</category><category>regex</category><guid>https://alinbxsorcerer.github.io/posts/resubcan-shu-shun-xu-de-wen-ti/</guid><pubDate>Wed, 08 May 2019 09:17:55 GMT</pubDate></item><item><title>Grokking 补码</title><link>https://alinbxsorcerer.github.io/posts/grokking-complement/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;基本概念&lt;/h2&gt;
&lt;p&gt;反码是个生造出来的概念． 所谓反码，英语里又叫ones' complement（对1求补） 所谓补码，英语里又叫two's complement（对2求补）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;＂模＂的概念&lt;/h2&gt;
&lt;p&gt;正式开讲首先灌输一个新的概念叫，模什么是“模”，想象日常使用的钟表，它可以显示0~12点的时间，假设现在是2点钟，请用手动拨动时针的方式将时间减4小时，你会怎么做？有两种方式：逆时针将时针拨4小时顺时针将时针拨8（12-4）小时这里要讲的是第二种方式，为什么顺时针拨12-4也可以达到和正常思维的第一种方式一样的位置。12就是模。同样的，如果是十进制的两位数，80-10 和 80+90在不考虑百位数的基础上都是70。这里的90就是100-10得来的，这种情况下100就是模模就好比是一个极限，在它的范围内，两个相加等于模的数互为补数，还是举100的例子90和10，55和45，68和32，互为补数在模的范围内做减法，可以将“X-Y”的减法变更为“X+Y的补数“的加法，当然前提是不考虑百位数思考题，上面举的例子是大数减小数，那么如果是小数减大数会怎么样呢？如果是10-80，结果应该是-70，但如果按照10+（100-80），结果是30。而很明显-70和30不是一回事，这里也没有百位数的问题，这种情况应该怎么破？当初的那些先贤们想出来的办法很简单，就是把这两个数直接划上等号，正好顺便解决了负数的表达方式。再来仔细看看这两个数的关系：-70绝对值的补数就正好是30所以在计算机中，负数的表达方式就是它绝对值的补数.&lt;/p&gt;
&lt;p&gt;但是问题又来了，看起来这个解决方式很完美了，但别忘了，30他已经代表了正数的30了，现在又要用来代表负数的-70，谁知道它出现的时候到底是代表哪个数？为了解决这个问题，需要给这套规则划定一个范围，原来是0~99的正数，现在既然要用部分正数来代替负数了，那就要规定一个范围来使得一个数只代表一个含义，正好一人一半，0～49这个区间就代表正数，50～99的区间就用来代表各自补数的负值.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;二进制数&lt;/h2&gt;
&lt;p&gt;现在回到二进制的计算机世界8位二进制数一共可以表示2的8次方，256个数，即0～255（别忘了0也要占一位的），他们的极限就是256，即256是8位二进制数的模 ，应该不难理解吧，同上十进制的两位数0～99的模是100。还是用二进制来说明清楚，8位二进制能表示的数的极限是1 1 1 1 1 1 1 1， 就是255，在这基础上加0 0 0 0 0 0 0 1，出现了进一位 即 1 0 0 0 0 0 0 0 0这个1 0 0 0 0 0 0 0 0就是8位二进制数的模，256同样按照第二步讲的逻辑，一半的数0～127，代表其正数本身，另一半的数128～255，代表其补数的负值，即“－1～-128”的区间。 而 “X－Y”的减法 就用 “X＋Y的补数” 的加法来表示，完美！ 唯一需要注意的事情是任何计算的输入值和输出结果值都需要严格遵守-128～127的范围，一旦溢出就会报错.这样一说是不是可以理解-128的补码是怎么来的了吧？ 他就是256-｜-128｜＝128二进制的128是不是就是1 0 0 0 0 0 0 0 ？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;傻帽的狂欢&lt;/h2&gt;
&lt;p&gt;空穴来风，未必无因那是因为计算机就是这样求负数的补码的，我们在键盘上敲一个负数的时候，计算机要把它用补码的形式存储下来，还记得上面我们讲的补码是怎么来的吗？模－绝对值，这是不是个减法公式？但计算机没有减法逻辑，我们费了那么大的劲搞了一套补码的规则就是为了用加法来替代减法，但为了实现这么套规则，却跨不过一个坎，就是把负数计算成补码仍然是需要减法逻辑的。怎么办呢，那些伟大的先贤们 （膜拜）就想出了这么个办法：首位不变，其余位取反后，再加一.&lt;/p&gt;
&lt;p&gt;下面是吐槽不知道是哪个书呆子教书，照搬了机器的逻辑，把取反加一的方法当做补码的计算逻辑就这么教下来了。搞笑的是，还保留了补码这个名字，照理说这种教法应该叫 取反加一码 更合理，你还补什么啊？ 不仅如此，还搞出了个首位符号位的说法，弄出了个正0负0，还用负0来充当-128，真是不把人弄疯不罢休啊！！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;参考资料：&lt;/h2&gt;
&lt;p&gt;链接：&lt;a class="reference external" href="https://www.zhihu.com/question/20458542/answer/40759880"&gt;https://www.zhihu.com/question/20458542/answer/40759880&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h2&gt;Publish&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_0c8ea68481954038b0bf206c4a3e042f-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; pandoc --wrap&lt;span class="o"&gt;=&lt;/span&gt;none  补数.org -o  ~/Public/nikola_post/posts/补数.rst
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>complement</category><guid>https://alinbxsorcerer.github.io/posts/grokking-complement/</guid><pubDate>Tue, 15 Jan 2019 12:53:29 GMT</pubDate></item><item><title>C Primer Plus</title><link>https://alinbxsorcerer.github.io/posts/c-primer-plus/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#getting-ready" id="id2"&gt;1. Getting Ready&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#whence-c" id="id3"&gt;Whence C?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#why-c" id="id4"&gt;Why C?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#design-features" id="id5"&gt;Design Features&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#efficiency" id="id6"&gt;Efficiency&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#portability" id="id7"&gt;Portability&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#power-and-flexibility" id="id8"&gt;Power and Flexibility&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#programmer-oriented" id="id9"&gt;Programmer Oriented&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#shortcomings" id="id10"&gt;Shortcomings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#whither-c" id="id11"&gt;Whither C?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#what-computers-do" id="id12"&gt;What Computers Do&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#high-level-computer-languages-and-compilers" id="id13"&gt;High-level Computer Languages and Compilers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#language-standards" id="id14"&gt;Language Standards&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#the-first-ansi-iso-c-standard" id="id15"&gt;The First ANSI/ISO C Standard&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#the-c99-standard" id="id16"&gt;The C99 Standard&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#the-c11-standard" id="id17"&gt;The C11 Standard&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#using-c-seven-steps" id="id18"&gt;Using C: Seven Steps&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#step-1-define-the-program-objectives" id="id19"&gt;Step 1: Define the Program Objectives&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#step-2-design-the-program" id="id20"&gt;Step 2: Design the Program&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#step-3-write-the-code" id="id21"&gt;Step 3: Write the Code&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#step-4-compile" id="id22"&gt;Step 4: Compile&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#step-5-run-the-program" id="id23"&gt;Step 5: Run the Program&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#step-6-test-and-debug-the-program" id="id24"&gt;Step 6: Test and Debug the Program&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#step-7-maintain-and-modify-the-program" id="id25"&gt;Step 7: Maintain and Modify the Program&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#commentary" id="id26"&gt;Commentary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#programming-mechanics" id="id27"&gt;Programming Mechanics&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#object-code-files-executable-files-and-libraries" id="id28"&gt;Object Code Files, Executable Files, and Libraries&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#unix-system" id="id29"&gt;Unix System&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#the-gnu-compiler-collection-and-the-llvm-project" id="id30"&gt;The GNU Compiler Collection and the LLVM Project&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#linux-systems" id="id31"&gt;Linux Systems&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#command-line-compilers-for-the-pc" id="id32"&gt;Command-Line Compilers for the PC&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#integrated-development-environments-windows" id="id33"&gt;Integrated Development Environments (Windows)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#the-windows-linux-option" id="id34"&gt;The Windows/Linux Option&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#c-on-the-macintosh" id="id35"&gt;C on the Macintosh&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#how-this-book-is-organized" id="id36"&gt;How This Book Is Organized&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#conventions-used-in-this-book" id="id37"&gt;Conventions Used in This Book&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#typeface" id="id38"&gt;Typeface&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#program-output" id="id39"&gt;Program Output&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#special-elements" id="id40"&gt;Special Elements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#summary" id="id41"&gt;Summary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#review-questions" id="id42"&gt;Review Questions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#programming-exercise" id="id43"&gt;Programming Exercise&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id1" id="id44"&gt;Special Elements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#publish" id="id45"&gt;Publish&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-ready"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id2"&gt;1. Getting Ready&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You will learn about the following in this chapter:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C's history and features&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The steps needed to write programs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A bit about compilers and linkers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C standards&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Welcome to the world of C—a vigorous, professional programming language popular with amateur and commercial programmers alike. This chapter prepares you for learning and using this powerful and popular language, and it introduces you to the kinds of environments in which you will most likely develop your C-legs.&lt;/p&gt;
&lt;p&gt;First, we look at C's origin and examine some of its features, both strengths and drawbacks. Then we look at the origins of programming and examine some general principles for programming. Finally, we discuss how to run C programs on some common systems.&lt;/p&gt;
&lt;div class="section" id="whence-c"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id3"&gt;Whence C?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dennis Ritchie of Bell Labs created C in 1972 as he and Ken Thompson worked on designing the Unix operating system. C didn't spring full-grown from Ritchie's head, however. It came from Thompson's B language, which came from… but that's another story. The important point is that C was created as a tool for working programmers, so its chief goal is to be a useful language.&lt;/p&gt;
&lt;p&gt;Most languages aim to be useful, but they often have other concerns. The main goal for Pascal, for instance, was to provide a sound basis for teaching good programming principles. BASIC, on the other hand, was developed to resemble English so that it could be learned easily by students unfamiliar with computers. These are important goals, but they are not always compatible with pragmatic, workaday usefulness. C's development as a language designed for programmers, however, has made it one of the modern-day languages of choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-c"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id4"&gt;Why C?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;During the past four decades, C has become one of the most important and popular programming languages. It has grown because people try it and like it. In the past decade or two, many have moved from C to languages such as C++, Objective C, and Java, but C is still an important language in its own right, as well a migration path to these others. As you learn C, you will recognize its many virtues (see &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch01.html#ch01fig01"&gt;Figure 1.1&lt;/a&gt;). Let's preview a few of them now.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image0" src="https://alinbxsorcerer.github.io/images/cprimer-graphics/01fig01.jpg"&gt; Figure 1.1 The virtues of C.&lt;/p&gt;
&lt;div class="section" id="design-features"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id5"&gt;Design Features&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;C is a modern language incorporating the control features found desirable by the theory and practice of computer science. Its design makes it natural for top-down planning, structured programming, and modular design. The result is a more reliable, understandable program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="efficiency"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id6"&gt;Efficiency&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;C is an efficient language. Its design takes advantage of the capabilities of current computers. C programs tend to be compact and to run quickly. In fact, C exhibits some of the fine control usually associated with an assembly language. (An &lt;em&gt;assembly language&lt;/em&gt; is a mnemonic representation of the set of internal instructions used by a particular central processing unit design; different CPU families have different assembly languages.) If you choose, you can fine-tune your programs for maximum speed or most efficient use of memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="portability"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id7"&gt;Portability&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;C is a portable language, which means that C programs written on one system can be run on other systems with little or no modification. If modifications are necessary, they can often be made by simply changing a few entries in a header file accompanying the main program. Most languages are meant to be portable, but anyone who has converted an IBM PC BASIC program to Apple BASIC (and they were close cousins) or has tried to run an IBM mainframe FORTRAN program on a Unix system knows that porting is troublesome at best. C is a leader in portability. C compilers (programs that convert your C code into the instructions a computer uses internally) are available for many computer architectures, running from 8-bit microprocessors to Cray supercomputers. Note, however, that the portions of a program written specifically to access particular hardware devices, such as a display monitor, or special features of an operating system, such as Windows 8 or OS X, typically are not portable.&lt;/p&gt;
&lt;p&gt;Because of C's close ties with Unix, Unix systems typically come with a C compiler as part of the package. Linux installations also usually include a C compiler. Several C compilers are available for personal computers, including PCs running various versions of Windows and Macintoshes. So whether you are using a home computer, a professional workstation, or a mainframe, the chances are good that you can get a C compiler for your particular system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="power-and-flexibility"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id8"&gt;Power and Flexibility&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;C is powerful and flexible (two favorite words in computer literature). For example, most of the powerful, flexible Unix operating system was written in C. Many compilers and interpreters for other languages—such as FORTRAN, Perl, Python, Pascal, LISP, Logo, and BASIC—have been written in C. As a result, when you use FORTRAN on a Unix machine, ultimately a C program has done the work of producing the final executable program. C programs have been used for solving physics and engineering problems and even for animating special effects for movies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="programmer-oriented"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id9"&gt;Programmer Oriented&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;C is oriented to fulfill the needs of programmers. It gives you access to hardware, and it enables you to manipulate individual bits in memory. Its rich selection of operators allows you to express yourself succinctly. C is less strict than, say, Pascal or even C++ in limiting what you can do. This flexibility is both an advantage and a danger. The advantage is that many tasks, such as converting forms of data, are much simpler in C. The danger is that with C, you can make mistakes that are impossible in some languages. C gives you more freedom, but it also puts more responsibility on you.&lt;/p&gt;
&lt;p&gt;Also, most C implementations have a large library of useful C functions. These functions deal with many needs that a programmer commonly faces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shortcomings"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id10"&gt;Shortcomings&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;C does have some faults. Often, as with people, faults and virtues are opposite sides of the same feature. For example, we've mentioned that C's freedom of expression also requires added responsibility. C's use of pointers (something you can look forward to learning about in this book), in particular, means that you can make programming errors that are difficult to trace. As one computer preliterate once commented, the price of liberty is eternal vigilance.&lt;/p&gt;
&lt;p&gt;C's conciseness, combined with its wealth of operators, make it possible to prepare code that is extremely difficult to follow. You aren't compelled to write obscure code, but the opportunity is there. After all, what other language has a yearly Obfuscated Code contest?&lt;/p&gt;
&lt;p&gt;There are more virtues and, undoubtedly, a few more faults. Rather than delve further into the matter, let's move on to a new topic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="whither-c"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id11"&gt;Whither C?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By the early 1980s, C was already a dominant language in the minicomputer world of Unix systems. Since then, it has spread to personal computers (microcomputers) and to mainframes (the big guys). See &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch01.html#ch01fig02"&gt;Figure 1.2&lt;/a&gt;. Many software houses use C as the preferred language for producing word processing programs, spreadsheets, compilers, and other products. These companies know that C produces compact and efficient programs. More important, they know that these programs will be easy to modify and easy to adapt to new models of computers.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image1" src="https://alinbxsorcerer.github.io/images/cprimer-graphics/01fig02.jpg"&gt; Figure 1.2 Where C is used.&lt;/p&gt;
&lt;p&gt;What's good for companies and C veterans is good for other users, too. More and more computer users have turned to C to secure its advantages for themselves. You don't have to be a computer professional to use C.&lt;/p&gt;
&lt;p&gt;In the 1990s, many software houses began turning to the C++ language for large programming projects. C++ grafts object-oriented programming tools to the C language. (&lt;em&gt;Object-oriented programming&lt;/em&gt; is a philosophy that attempts to mold the language to fit a problem instead of molding the problem to fit the language.) C++ is nearly a superset of C, meaning that any C program is, or nearly is, a valid C++ program, too. By learning C, you also learn much of C++.&lt;/p&gt;
&lt;p&gt;Despite the popularity of newer languages, such as C++ and Java, C remains a core skill in the software business, typically ranking in the top 10 of desired skills. In particular, C has become popular for programming embedded systems. That is, it's used to program the increasingly common microprocessors found in automobiles, cameras, DVD players, and other modern conveniences. Also, C has been making inroads in FORTRAN's long dominance of scientific programming. Finally, as befits a language created to develop an operating system, it plays a strong role in the development of Linux. Thus, the second decade of the twenty-first century finds C still going strong.&lt;/p&gt;
&lt;p&gt;In short, C is one of the most important programming languages and will continue to be so. If you want a job writing software, one of the first questions you should be able to answer yes to is “Oh say, can you C?”&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-computers-do"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id12"&gt;What Computers Do&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that you are about to learn how to program in C, you probably should know a little about how computers work. This knowledge will help you understand the connection between writing a program in C and what eventually takes place when you run that program.&lt;/p&gt;
&lt;p&gt;Modern computers have several components. The &lt;em&gt;central processing unit&lt;/em&gt;, or &lt;em&gt;CPU&lt;/em&gt;, does most of the computing work. The &lt;em&gt;random access memory&lt;/em&gt;, or &lt;em&gt;RAM&lt;/em&gt;, serves as a workspace to hold programs and files. The permanent memory storage device, typically a hard disk in the past, but now more and more often a solid-state device, remembers those programs and files, even while the computer is turned off. And various peripherals—such as the keyboard, mouse, touchscreen, and monitor—provide for communication between the computer and you. The CPU processes your programs; so let's concentrate on its role.&lt;/p&gt;
&lt;p&gt;The life of a CPU, at least in this simplistic account, is quite simple. It fetches an instruction from memory and executes it. It fetches the next instruction from memory and executes it, and so on. (A gigahertz CPU can do this about a billion times a second, so the CPU can lead its boring life at a tremendous pace.) The CPU has its own small workspace, consisting of several &lt;em&gt;registers&lt;/em&gt;, each of which can hold a number. One register holds the memory address of the next instruction, and the CPU uses this information to fetch the next instruction. After it fetches an instruction, the CPU stores the instruction in another register and updates the first register to the address of the next instruction. The CPU has a limited repertoire of instructions (known as the &lt;em&gt;instruction set&lt;/em&gt;) that it understands. Also, these instructions are rather specific; many of them ask the computer to move a number from one location to another—for example, from a memory location to a register.&lt;/p&gt;
&lt;p&gt;A couple interesting points go along with this account. First, everything stored in a computer is stored as a number. Numbers are stored as numbers. Characters, such as the alphabetical characters you use in a text document, are stored as numbers; each character has a numeric code. The instructions that a computer loads into its registers are stored as numbers; each instruction in the instruction set has a numeric code. Second, computer programs ultimately have to be expressed in this numeric instruction code, or what is called &lt;em&gt;machine language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One consequence of how computers work is that if you want a computer to do something, you have to feed a particular list of instructions (a program) telling it exactly what to do and how to do it. You have to create the program in a language that the computer understands directly (machine language). This is a detailed, tedious, exacting task. Something as simple as adding two numbers together would have to be broken down into several steps, perhaps something like the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Copy the number in memory location 2000 to register 1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Copy the number in memory location 2004 to register 2.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Add the contents of register 2 to the contents of register 1, leaving the answer in register 1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Copy the contents of register 1 to memory location 2008.&lt;/p&gt;
&lt;p&gt;And you would have to represent each of these instructions with a numeric code!&lt;/p&gt;
&lt;p&gt;If writing a program in this manner sounds like something you'd like to do, you'll be sad to learn that the golden age of machine-language programming is long past. But if you prefer something a little more enjoyable, open your heart to high-level programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="high-level-computer-languages-and-compilers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id13"&gt;High-level Computer Languages and Compilers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;High-level programming languages, such as C, simplify your programming life in several ways. First, you don't have to express your instructions in a numeric code. Second, the instructions you use are much closer to how you might think about a problem than they are to the detailed approach a computer uses. Rather than worry about the precise steps a particular CPU would have to take to accomplish a particular task, you can express your desires on a more abstract level. To add two numbers, for example, you might write the following:&lt;/p&gt;
&lt;p&gt;total = mine + yours;&lt;/p&gt;
&lt;p&gt;Seeing code like this, you have a good idea what it does; looking at the machine-language equivalent of several instructions expressed in numeric code is much less enlightening.&lt;/p&gt;
&lt;p&gt;Unfortunately, the opposite is true for a computer; to it, the high-level instruction is incomprehensible gibberish. This is where compilers enter the picture. The &lt;em&gt;compiler&lt;/em&gt; is a program that translates the high-level language program into the detailed set of machine language instructions the computer requires. You do the high-level thinking; the compiler takes care of the tedious details.&lt;/p&gt;
&lt;p&gt;The compiler approach has another benefit. In general, each computer design has its own unique machine language; so a program written in the machine language for, say, an Intel Core i7 CPU means nothing to an ARM Cortex-A57 CPU. But you can match a compiler to a particular machine language. Therefore, with the right compiler or set of compilers, you can convert the same high-level language program to a variety of different machine-language programs. You solve a programming problem once, and then you let your compilers translate the solution to a variety of machine languages.&lt;/p&gt;
&lt;p&gt;In short, high-level languages—such as C, Java, and Pascal—describe actions in a more abstract form and aren't tied to a particular CPU or instruction set. Also, high-level languages are easier to learn and much easier to program in than are machine languages.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Advances in Computing&lt;/p&gt;
&lt;p&gt;In 1964, Control Data Corporation announced the CDC 6600 computer. This room-filling machine is considered to be the first supercomputer, and it had a starting price of about $6 million. It was the computer of choice for high-energy nuclear physics research. A modern smartphone is several hundred times as capable in terms of computing power and memory. It can show videos and play music, too. And it's a phone.&lt;/p&gt;
&lt;p&gt;In 1964, FORTRAN was the dominant programming language, at least in engineering and science. Programming languages haven't evolved quite as dramatically as the hardware on which they run. Nonetheless, the world of programming languages has changed. Languages have provided more support first for structured programming, then for object-oriented programming as part of the struggle to cope with larger and larger programming projects. Not only have new languages come along, but existing languages have changed with the times.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="language-standards"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id14"&gt;Language Standards&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Currently, many C implementations are available. Ideally, when you write a C program, it should work the same on any implementation, providing it doesn't use machine-specific programming. For this to be true in practice, different implementations need to conform to a recognized standard.&lt;/p&gt;
&lt;p&gt;At first, there was no official standard for C. Instead, the first edition of &lt;em&gt;The C Programming Language&lt;/em&gt; by Brian Kernighan and Dennis Ritchie (1978) became the accepted standard, usually referred to as &lt;em&gt;K&amp;amp;R C&lt;/em&gt; or &lt;em&gt;Classic C&lt;/em&gt;. In particular, the “C Reference Manual” in that book's appendix acted as the guide to C implementations. Compilers, for example, would claim to offer a full K&amp;amp;R implementation. However, although this appendix defined the C language, it did not define the C library. More than most languages, C depends on its library, so there is need for a library standard, too. In the absence of any official standard, the library supplied with the Unix implementation became a de facto standard.&lt;/p&gt;
&lt;div class="section" id="the-first-ansi-iso-c-standard"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id15"&gt;The First ANSI/ISO C Standard&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As C evolved and became more widely used on a greater variety of systems, the C community realized it needed a more comprehensive, up-to-date, and rigorous standard. To meet this need, the American National Standards Institute (ANSI) established a committee (X3J11) in 1983 to develop a new standard, which was adopted formally in 1989. This standard (ANSI C) defined both the language and a standard C library. The International Organization for Standardization adopted a C standard (ISO C) in 1990. ISO C and ANSI C are essentially the same standard. The final version of the ANSI/ISO standard is often referred to as &lt;em&gt;C89&lt;/em&gt; (because that's when ANSI approval came) or &lt;em&gt;C90&lt;/em&gt; (because that's when ISO approval came). Also, because the ANSI version came out first, people often used the term &lt;em&gt;ANSI C&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The committee had several guiding principles. Perhaps the most interesting was this: Keep the spirit of C. The committee listed the following ideas as expressing part of that spirit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image2" src="https://alinbxsorcerer.github.io/images/cprimer-graphics/squf.jpg"&gt; Trust the programmer.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image3" src="https://alinbxsorcerer.github.io/images/cprimer-graphics/squf.jpg"&gt; Don't prevent the programmer from doing what needs to be done.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image4" src="https://alinbxsorcerer.github.io/images/cprimer-graphics/squf.jpg"&gt; Keep the language small and simple.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image5" src="https://alinbxsorcerer.github.io/images/cprimer-graphics/squf.jpg"&gt; Provide only one way to do an operation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image6" src="https://alinbxsorcerer.github.io/images/cprimer-graphics/squf.jpg"&gt; Make it fast, even if it is not guaranteed to be portable.&lt;/p&gt;
&lt;p&gt;By the last point, the committee meant that an implementation should define a particular operation in terms of what works best for the target computer instead of trying to impose an abstract, uniform definition. You'll encounter examples of this philosophy as you learn the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-c99-standard"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id16"&gt;The C99 Standard&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In 1994, a joint ANSI/ISO committee, known then as the &lt;em&gt;C9X&lt;/em&gt; committee, began revising the standard, an effort that resulted in the C99 standard. The committee endorsed the original principles of the C90 standard, including keeping the language small and simple. The committee's intent was not to add new features to the language except as needed to meet the new goals. One of these main goals was to support international programming by, for example, providing ways to deal with international character sets. A second goal was to “codify existing practice to address evident deficiencies.” Thus, when meeting the need of moving C to 64-bit processors, the committee based the additions to the standard on the experiences of those who dealt with this problem in real life. A third goal was to improve the suitability of C for doing critical numeric calculations for scientific and engineering projects, making C a more appealing alternative to FORTRAN.&lt;/p&gt;
&lt;p&gt;These three points—internationalization, correction of deficiencies, and improvement of computational usefulness—were the main change-oriented goals. The remaining plans for change were more conservative in nature—for example, minimizing incompatibilities with C90 and with C++ and keeping the language conceptually simple. In the committee's words, “…the committee is content to let C++ be the &lt;em&gt;big&lt;/em&gt; and ambitious language.”&lt;/p&gt;
&lt;p&gt;The upshot is that C99 changes preserve the essential nature of C, and C remains a lean, clean, efficient language. This book points out many of the C99 changes. However, although the standard has been out for a while, not all compilers at this time fully implement all the C99 changes. You may find that some of them are not available on your system. Or you may find that some C99 features are available only if you alter the compiler settings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-c11-standard"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id17"&gt;The C11 Standard&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Maintaining a standard is a perpetual process, and in 2007 the Standards Committee committed to the next revision, C1X, which became realized as C11. The committee raised some new guiding principles. One was that the “trust the programmer” goal should be tempered somewhat in the face of contemporary concerns of programming security and safety. The committee also made some important observations. One was that C99 hasn't been as well received and supported by vendors as C90 was. As a consequence, some features of C99 became optional for C11. One reason is that the committee felt that vendors serving the small machine market shouldn't be required to support features not used in their targeted environments. Another observation was that the standard was being revised not because it was broken but because there was a need to track new technologies. One example of this is the addition of optional support for concurrent programming in response to the trend of using multiple processors in computers. We look briefly at this topic, but exploring it is beyond the scope of this book.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;This book will use the terms &lt;em&gt;ANSI C&lt;/em&gt; or, in a more international spirit, ANSI//ISO C/ or just &lt;em&gt;ISO C&lt;/em&gt; to mean features common to C89/90 and later standards, and &lt;em&gt;C99&lt;/em&gt; and &lt;em&gt;C11&lt;/em&gt; to refer to new features. Occasionally, it will refer to &lt;em&gt;C90&lt;/em&gt; (for example, when discussing when a feature was first added to C).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="using-c-seven-steps"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id18"&gt;Using C: Seven Steps&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;C, as you've seen, is a compiled language. If you are accustomed to using a compiled language, such as Pascal or FORTRAN, you will be familiar with the basic steps in putting together a C program. However, if your background is in an interpreted language, such as BASIC, or in a graphical interface–oriented language, such as Visual Basic, or if you have no background at all, you need to learn how to compile. We'll look at that process soon, and you'll see that it is straightforward and sensible. First, to give you an overview of programming, let's break down the act of writing a C program into seven steps (see &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch01.html#ch01fig03"&gt;Figure 1.3&lt;/a&gt;). Note that this is an idealization. In practice, particularly for larger projects, you would go back and forth, using what you learned at a later step to refine an earlier step.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image7" src="https://alinbxsorcerer.github.io/images/cprimer-graphics/01fig03.jpg"&gt; Figure 1.3 The seven steps of programming.&lt;/p&gt;
&lt;div class="section" id="step-1-define-the-program-objectives"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id19"&gt;Step 1: Define the Program Objectives&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Naturally enough, you should start with a clear idea of what you want the program to do. Think in terms of the information your program needs, the feats of calculation and manipulation the program needs to do, and the information the program should report back to you. At this level of planning, you should be thinking in general terms, not in terms of some specific computer language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-design-the-program"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id20"&gt;Step 2: Design the Program&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;After you have a conceptual picture of what your program ought to do, you should decide how the program will go about it. What should the user interface be like? How should the program be organized? Who will the target user be? How much time do you have to complete the program?&lt;/p&gt;
&lt;p&gt;You also need to decide how to represent the data in the program and, possibly, in auxiliary files, as well as which methods to use to process the data. When you first learn programming in C, the choices will be simple, but as you deal with more complex situations, you'll find that these decisions require more thought. Choosing a good way to represent the information can often make designing the program and processing the data much easier.&lt;/p&gt;
&lt;p&gt;Again, you should be thinking in general terms, not about specific code, but some of your decisions may be based on general characteristics of the language. For example, a C programmer has more options in data representation than, say, a Pascal programmer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-write-the-code"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id21"&gt;Step 3: Write the Code&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Now that you have a clear design for your program, you can begin to implement it by writing the code. That is, you translate your program design into the C language. Here is where you really have to put your knowledge of C to work. You can sketch your ideas on paper, but eventually you have to get your code into the computer. The mechanics of this process depend on your programming environment. We'll present the details for some common environments soon. In general, you use a text editor to create what is called a &lt;em&gt;source code&lt;/em&gt; file. This file contains the C rendition of your program design. &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch01.html#ch01lis01"&gt;Listing 1.1&lt;/a&gt; shows an example of C source code.&lt;/p&gt;
&lt;p&gt;Listing 1.1 Example of C Source Code&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;#include &amp;lt;stdio.h&amp;gt; int main(void) {     int dogs;&lt;/p&gt;
&lt;p&gt;    printf("How many dogs do you have?n");     scanf("%d", &amp;amp;dogs);     printf("So you have %d dog(s)!n", dogs);&lt;/p&gt;
&lt;p&gt;    return 0; }&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;As part of this step, you should document your work. The simplest way is to use C's comment facility to incorporate explanations into your source code. &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch02.html#ch02"&gt;Chapter 2&lt;/a&gt;, “&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch02.html#ch02"&gt;Introducing C&lt;/a&gt;,” will explain more about using comments in your code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-compile"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id22"&gt;Step 4: Compile&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The next step is to compile the source code. Again, the details depend on your programming environment, and we'll look at some common environments shortly. For now, let's start with a more conceptual view of what happens.&lt;/p&gt;
&lt;p&gt;Recall that the compiler is a program whose job is to convert source code into executable code. &lt;em&gt;Executable code&lt;/em&gt; is code in the native language, or &lt;em&gt;machine language&lt;/em&gt;, of your computer. This language consists of detailed instructions expressed in a numeric code. As you read earlier, different computers have different machine languages, and a C compiler translates C into a particular machine language. C compilers also incorporate code from C libraries into the final program; the libraries contain a fund of standard routines, such as &lt;code class="docutils literal"&gt;printf()&lt;/code&gt; and &lt;code class="docutils literal"&gt;scanf()&lt;/code&gt;, for your use. (More accurately, a program called a &lt;em&gt;linker&lt;/em&gt; brings in the library routines, but the compiler runs the linker for you on most systems.) The end result is an executable file containing code that the computer understands and that you can run.&lt;/p&gt;
&lt;p&gt;The compiler also checks that your program is valid C. If the compiler finds errors, it reports them to you and doesn't produce an executable file. Understanding a particular compiler's complaints is another skill you will pick up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-5-run-the-program"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id23"&gt;Step 5: Run the Program&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Traditionally, the executable file is a program you can run. To run the program in many common environments, including Windows Command-Prompt mode, Unix terminal mode, and Linux terminal mode, just type the name of the executable file. Other environments, such as VMS on a VAX, might require a run command or some other mechanism. &lt;em&gt;Integrated development environments (IDEs)&lt;/em&gt;, such as those provided for Windows and Macintosh environments, allow you to edit and execute your C program from within the IDE by selecting choices from a menu or by pressing special keys. The resulting program also can be run directly from the operating system by clicking or double-clicking the filename or icon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-6-test-and-debug-the-program"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id24"&gt;Step 6: Test and Debug the Program&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The fact that your program runs is a good sign, but it's possible that it could run incorrectly. Consequently, you should check to see that your program does what it is supposed to do. You'll find that some of your programs have mistakes—&lt;em&gt;bugs&lt;/em&gt;, in computer jargon. &lt;em&gt;Debugging&lt;/em&gt; is the process of finding and fixing program errors. Making mistakes is a natural part of learning. It seems inherent to programming, so when you combine learning and programming, you had best prepare yourself to be reminded often of your fallibility. As you become a more powerful and subtle programmer, your errors, too, will become more powerful and subtle.&lt;/p&gt;
&lt;p&gt;You have many opportunities to err. You can make a basic design error. You can implement good ideas incorrectly. You can overlook unexpected input that messes up your program. You can use C incorrectly. You can make typing errors. You can put parentheses in the wrong place, and so on. You'll find your own items to add to this list.&lt;/p&gt;
&lt;p&gt;Fortunately, the situation isn't hopeless, although there might be times when you think it is. The compiler catches many kinds of errors, and there are things you can do to help yourself track down the ones that the compiler doesn't catch. This book will give you debugging advice as you go along.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-7-maintain-and-modify-the-program"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id25"&gt;Step 7: Maintain and Modify the Program&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When you create a program for yourself or for someone else, that program could see extensive use. If it does, you'll probably find reasons to make changes in it. Perhaps there is a minor bug that shows up only when someone enters a name beginning with &lt;em&gt;Zz&lt;/em&gt;, or you might think of a better way to do something in the program. You could add a clever new feature. You might adapt the program so that it runs on a different computer system. All these tasks are greatly simplified if you document the program clearly and if you follow sound design practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="commentary"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id26"&gt;Commentary&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Programming is not usually as linear as the process just described. Sometimes you have to go back and forth between steps. For instance, when you are writing code, you might find that your plan was impractical. You may see a better way of doing things or, after you see how a program runs, you might feel motivated to change the design. Documenting your work helps you move back and forth between levels.&lt;/p&gt;
&lt;p&gt;Most learners tend to neglect steps 1 and 2 (defining program objectives and designing the program) and go directly to step 3 (writing the program). The first programs you write are simple enough that you can visualize the whole process in your head. If you make a mistake, it's easy to find. As your programs grow longer and more complex, mental visualizations begin to fail, and errors get harder to find. Eventually, those who neglect the planning steps are condemned to hours of lost time, confusion, and frustration as they produce ugly, dysfunctional, and abstruse programs. The larger and more complex the job is, the more planning it requires.&lt;/p&gt;
&lt;p&gt;The moral here is that you should develop the habit of planning before coding. Use the ancient but honorable pen-and-pencil technology to jot down the objectives of your program and to outline the design. If you do so, you eventually will reap substantial dividends in time saved and satisfaction gained.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="programming-mechanics"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id27"&gt;Programming Mechanics&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The exact steps you must follow to produce a program depend on your computer environment. Because C is portable, it's available in many environments, including Unix, Linux, MS-DOS (yes, some people still use it), Windows, and Macintosh OS. There's not enough space in this book to cover all environments, particularly because particular products evolve, die, and are replaced.&lt;/p&gt;
&lt;p&gt;First, however, let's look at some aspects shared by many C environments, including the five we just mentioned. You don't really need to know what follows to run a C program, but it is good background. It can also help you understand why you have to go through some particular steps to get a C program.&lt;/p&gt;
&lt;p&gt;When you write a program in the C language, you store what you write in a text file called a &lt;em&gt;source code file&lt;/em&gt;. Most C systems, including the ones we mentioned, require that the name of the file end in &lt;code class="docutils literal"&gt;.c&lt;/code&gt; (for example, &lt;code class="docutils literal"&gt;wordcount.c&lt;/code&gt; and &lt;code class="docutils literal"&gt;budget.c&lt;/code&gt;). The part of the name before the period is called the &lt;em&gt;basename&lt;/em&gt;, and the part after the period is called the &lt;em&gt;extension&lt;/em&gt;. Therefore, &lt;code class="docutils literal"&gt;budget&lt;/code&gt; is a basename and &lt;code class="docutils literal"&gt;c&lt;/code&gt; is the extension. The combination &lt;code class="docutils literal"&gt;budget.c&lt;/code&gt; is the filename. The name should also satisfy the requirements of the particular computer operating system. For example, MS-DOS is an older operating system for IBM PCs and clones. It requires that the basename be no more than eight characters long, so the &lt;code class="docutils literal"&gt;wordcount.c&lt;/code&gt; filename mentioned earlier would not be a valid DOS filename. Some Unix systems place a 14-character limit on the whole name, including the extension; other Unix systems allow longer names, up to 255 characters. Linux, Windows, and Macintosh OS also allow long names.&lt;/p&gt;
&lt;p&gt;So that we'll have something concrete to refer to, let's assume we have a source file called &lt;code class="docutils literal"&gt;concrete.c&lt;/code&gt; containing the C source code in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch01.html#ch01lis02"&gt;Listing 1.2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Listing 1.2 The concrete.c Program&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;#include &amp;lt;stdio.h&amp;gt; int main(void) {     printf("Concrete contains gravel and cement.n");&lt;/p&gt;
&lt;p&gt;    return 0; }&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Don't worry about the details of the source code file shown in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch01.html#ch01lis02"&gt;Listing 1.2&lt;/a&gt;; you'll learn about them in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch02.html#ch02"&gt;Chapter 2&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="object-code-files-executable-files-and-libraries"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id28"&gt;Object Code Files, Executable Files, and Libraries&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The basic strategy in C programming is to use programs that convert your source code file to an executable file, which is a file containing ready-to-run machine language code. C implementations typically do this in two steps: compiling and linking. The compiler converts your source code to an intermediate code, and the linker combines this with other code to produce the executable file. C uses this two-part approach to facilitate the modularization of programs. You can compile individual modules separately and then use the linker to combine the compiled modules later. That way, if you need to change one module, you don't have to recompile the other ones. Also, the linker combines your program with precompiled library code.&lt;/p&gt;
&lt;p&gt;There are several choices for the form of the intermediate files. The most prevalent choice, and the one taken by the implementations described here, is to convert the source code to machine language code, placing the result in an &lt;em&gt;object code file&lt;/em&gt;, or &lt;em&gt;object file&lt;/em&gt; for short. (This assumes that your source code consists of a single file.) Although the object file contains machine language code, it is not ready to run. The object file contains the translation of your source code, but it is not yet a complete program.&lt;/p&gt;
&lt;p&gt;The first element missing from the object code file is something called &lt;em&gt;startup code&lt;/em&gt;, which is code that acts as an interface between your program and the operating system. For example, you can run an IBM PC compatible under MS Windows or under Linux. The hardware is the same in either case, so the same object code would work with both, but you would need different startup code for Windows than you would for Linux because these systems handle programs differently from one another.&lt;/p&gt;
&lt;p&gt;The second missing element is the code for library routines. Nearly all C programs make use of routines (called &lt;em&gt;functions&lt;/em&gt;) that are part of the standard C library. For example, &lt;code class="docutils literal"&gt;concrete.c&lt;/code&gt; uses the function &lt;code class="docutils literal"&gt;printf()&lt;/code&gt;. The object code file does not contain the code for this function; it merely contains instructions saying to use the &lt;code class="docutils literal"&gt;printf()&lt;/code&gt; function. The actual code is stored in another file, called a &lt;em&gt;library&lt;/em&gt;. A library file contains object code for many functions.&lt;/p&gt;
&lt;p&gt;The role of the linker is to bring together these three elements—your object code, the standard startup code for your system, and the library code—and put them together into a single file, the executable file. For library code, the linker extracts only the code needed for the functions you use from the library (see &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch01.html#ch01fig04"&gt;Figure 1.4&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img alt="image8" src="https://alinbxsorcerer.github.io/images/cprimer-graphics/01fig04.jpg"&gt; Figure 1.4 Compiler and linker.&lt;/p&gt;
&lt;p&gt;In short, an object file and an executable file both consist of machine language instructions. However, the object file contains the machine language translation only for the code you used, but the executable file also has machine code for the library routines you use and for the startup code.&lt;/p&gt;
&lt;p&gt;On some systems, you must run the compile and link programs separately. On other systems, the compiler starts the linker automatically, so you have to give only the compile command.&lt;/p&gt;
&lt;p&gt;Now let's look at some specific systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unix-system"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id29"&gt;Unix System&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Because C's popularity and existence began on Unix systems, we will start there. (Note: By “Unix,” we include systems such as FreeBSD, which descends from Unix but can't use the name for legal reasons.)&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Editing on a Unix System&lt;/p&gt;
&lt;p&gt;Unix C does not have its own editor. Instead, you use one of the general-purpose Unix editors, such as emacs, jove, vi, or an X Window System text editor.&lt;/p&gt;
&lt;p&gt;Your two main responsibilities are typing the program correctly and choosing a name for the file that will store the program. As discussed, the name should end with &lt;code class="docutils literal"&gt;.c&lt;/code&gt;. Note that Unix distinguishes between uppercase and lowercase. Therefore, &lt;code class="docutils literal"&gt;budget.c&lt;/code&gt;, &lt;code class="docutils literal"&gt;BUDGET.c&lt;/code&gt;, and &lt;code class="docutils literal"&gt;Budget.c&lt;/code&gt; are three distinct and valid names for C source files, but &lt;code class="docutils literal"&gt;BUDGET.C&lt;/code&gt; is not a valid name because it uses an uppercase &lt;code class="docutils literal"&gt;C&lt;/code&gt; instead of a lowercase &lt;code class="docutils literal"&gt;c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using the vi editor, we prepared the following program and stored it in a file called &lt;code class="docutils literal"&gt;inform.c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;#include &amp;lt;stdio.h&amp;gt; int main(void) {     printf("A .c is used to end a C program filename.n");&lt;/p&gt;
&lt;p&gt;    return 0; }&lt;/p&gt;
&lt;p&gt;This text is the source code, and &lt;code class="docutils literal"&gt;inform.c&lt;/code&gt; is the source file. The important point here is that the source file is the beginning of a process, not the end.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compiling on a Unix System&lt;/p&gt;
&lt;p&gt;Our program, although undeniably brilliant, is still gibberish to a computer. A computer doesn't understand things such as &lt;code class="docutils literal"&gt;#include&lt;/code&gt; and &lt;code class="docutils literal"&gt;printf&lt;/code&gt;. (At this point, you probably don't either, but you will soon learn, whereas the computer won't.) As we discussed earlier, we need the help of a compiler to translate our code (source code) to the computer's code (machine code). The result of these efforts will be the executable file, which contains all the machine code that the computer needs to get the job done.&lt;/p&gt;
&lt;p&gt;Historically, the Unix C compiler, invoked with the &lt;code class="docutils literal"&gt;cc&lt;/code&gt; command, defined the language. But it didn't keep pace with the developing standard, and it has been retired. However, Unix systems typically provide a C compiler from some other source, and then make the &lt;code class="docutils literal"&gt;cc&lt;/code&gt; command an alias for that compiler. So you still can proceed with the same command, even though it may invoke different compilers on different systems.&lt;/p&gt;
&lt;p&gt;To compile the &lt;code class="docutils literal"&gt;inform.c&lt;/code&gt; program, type the following:&lt;/p&gt;
&lt;p&gt;cc inform.c&lt;/p&gt;
&lt;p&gt;After a moment, the Unix prompt will return, telling you that the deed is done. You might get warnings and error messages if you failed to write the program properly, but let's assume you did everything right. (If the compiler complains about the word &lt;code class="docutils literal"&gt;void&lt;/code&gt;, your system has not yet updated to an ANSI C compiler. We'll talk more about standards soon. Meanwhile, just delete the word &lt;code class="docutils literal"&gt;void&lt;/code&gt; from the example.) If you use the &lt;code class="docutils literal"&gt;ls&lt;/code&gt; command to list your files, you will find that there is a new file called &lt;code class="docutils literal"&gt;a.out&lt;/code&gt; (see &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch01.html#ch01fig05"&gt;Figure 1.5&lt;/a&gt;). This is the executable file containing the translation (or compilation) of the program. To run it, just type&lt;/p&gt;
&lt;p&gt;&lt;img alt="image9" src="https://alinbxsorcerer.github.io/images/cprimer-graphics/01fig05.jpg"&gt; Figure 1.5 Preparing a C program using Unix.&lt;/p&gt;
&lt;p&gt;a.out&lt;/p&gt;
&lt;p&gt;and wisdom pours forth:&lt;/p&gt;
&lt;p&gt;A .c is used to end a C program filename.&lt;/p&gt;
&lt;p&gt;If you want to keep the executable file (&lt;code class="docutils literal"&gt;a.out&lt;/code&gt;), you should rename it. Otherwise, the file is replaced by a new &lt;code class="docutils literal"&gt;a.out&lt;/code&gt; the next time you compile a program.&lt;/p&gt;
&lt;p&gt;What about the object code? The cc compiler creates an object code file having the same basename as the source code, but with an &lt;code class="docutils literal"&gt;.o&lt;/code&gt; extension. In our example, the object code file is called &lt;code class="docutils literal"&gt;inform.o&lt;/code&gt;, but you won't find it, because the linker removes it once the executable program has been completed. However, if the original program used more than one source code file, the object code files would be saved. When we discuss multiple-file programs later in the text, you will see that this is a fine idea.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="the-gnu-compiler-collection-and-the-llvm-project"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id30"&gt;The GNU Compiler Collection and the LLVM Project&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The GNU Project, dating from 1987, is a mass collaboration that has developed a large body of free Unix-like software. (GNU stands for “GNU's Not Unix.”) One of its products is the GNU Compiler Collection, or GCC, which includes the GCC C compiler. GCC is under constant development, guided by a steering committee, and its C compiler closely tracks changing C standards. Versions of GCC are available for a wide variety of hardware platforms and operating systems, including Unix, Linux, and Windows. The GCC C compiler can be invoked with the &lt;code class="docutils literal"&gt;gcc&lt;/code&gt; command. And many systems using &lt;code class="docutils literal"&gt;gcc&lt;/code&gt; will make &lt;code class="docutils literal"&gt;cc&lt;/code&gt; an alias for &lt;code class="docutils literal"&gt;gcc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The LLVM Project provides a second replacement for &lt;code class="docutils literal"&gt;cc&lt;/code&gt;. The project is an open-source collection of compiler-related software dating from a 2000 research project at the University of Illinois. Its Clang compiler processes C code and can be invoked as &lt;code class="docutils literal"&gt;clang&lt;/code&gt;. Available on several platforms, including Linux, Clang became the default C compiler for FreeBSD in late 2012. Like GCC, Clang tracks the C standard pretty well.&lt;/p&gt;
&lt;p&gt;Both accept a &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/code&gt; option for version information, so on systems using the &lt;code class="docutils literal"&gt;cc&lt;/code&gt; alias for either the &lt;code class="docutils literal"&gt;gcc&lt;/code&gt; or &lt;code class="docutils literal"&gt;clang&lt;/code&gt; command, the combination&lt;/p&gt;
&lt;p&gt;cc -v&lt;/p&gt;
&lt;p&gt;shows which compiler and which version you are using.&lt;/p&gt;
&lt;p&gt;Both &lt;code class="docutils literal"&gt;gcc&lt;/code&gt; and &lt;code class="docutils literal"&gt;clang&lt;/code&gt; commands, depending on the version, may require run-time options to invoke more recent C standards:&lt;/p&gt;
&lt;p&gt;gcc -std=c99 inform.c gcc -std=c1x inform.c gcc -std=c11 inform.c&lt;/p&gt;
&lt;p&gt;The first example invokes the C99 standard, the second invokes the draft C11 standard for GCC versions prior to the acceptance of the standard, and the third invokes the C11 standard for GCC versions that followed the acceptance. The Clang compiler uses the same flags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux-systems"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id31"&gt;Linux Systems&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Linux is a popular open-source, Unix-like operating system that runs on a variety of platforms, including PCs and Macs. Preparing C programs on Linux is much the same as for Unix systems, except that you would use the GCC public domain C compiler that's provided by GNU. The compile command looks like this:&lt;/p&gt;
&lt;p&gt;gcc inform.c&lt;/p&gt;
&lt;p&gt;Note that installing GCC may be optional when installing Linux, so you (or someone) might have to install GCC if it wasn't installed earlier. Typically, the installation makes &lt;code class="docutils literal"&gt;cc&lt;/code&gt; an alias for &lt;code class="docutils literal"&gt;gcc&lt;/code&gt;, so you can use &lt;code class="docutils literal"&gt;cc&lt;/code&gt; in the command line instead of &lt;code class="docutils literal"&gt;gcc&lt;/code&gt; if you like.&lt;/p&gt;
&lt;p&gt;You can obtain further information about GCC, including information about new releases at &lt;a class="reference external" href="http://www.gnu.org/software/gcc/index.html"&gt;http://www.gnu.org/software/gcc/index.html&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="command-line-compilers-for-the-pc"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id32"&gt;Command-Line Compilers for the PC&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;C compilers are not part of the standard Windows package, so you may need to obtain and install a C compiler. Cygwin and MinGW are free downloads that make the GCC compiler available for command-line use on a PC. Cygwin runs in its own window, which has a Command-Prompt look but which imitates a Linux command-line environment. MinGW, on the other hand runs in the Windows Command-Prompt mode. These come with the newest (or near-newest) version of GCC, which supports C99 and at least some of C11. The Borland C++ Compiler 5.5 is another free download; it supports C90.&lt;/p&gt;
&lt;p&gt;Source code files should be text files, not word processor files. (Word processor files contain a lot of additional information about fonts and formatting.) You should use a text editor, such as Windows Notepad. You can use a word processor if you use the Save As feature to save the file in text mode. The file should have a &lt;code class="docutils literal"&gt;.c&lt;/code&gt; extension. Some word processors automatically add a &lt;code class="docutils literal"&gt;.txt&lt;/code&gt; extension to text files. If this happens to you, you need to change the filename, replacing &lt;code class="docutils literal"&gt;txt&lt;/code&gt; with &lt;code class="docutils literal"&gt;c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;C compilers for the PC typically, but not always, produce intermediate object code files having an &lt;code class="docutils literal"&gt;.obj&lt;/code&gt; extension. Unlike Unix compilers, these compilers typically don't remove these files when done. Some compilers produce assembly language files with &lt;code class="docutils literal"&gt;.asm&lt;/code&gt; extensions or use some special format of their own.&lt;/p&gt;
&lt;p&gt;Some compilers run the linker automatically after compiling; others might require that you run the linker manually. Linking results in the executable file, which appends the &lt;code class="docutils literal"&gt;.EXE&lt;/code&gt; extension to the original source code basename. For example, compiling and linking a source code file called &lt;code class="docutils literal"&gt;concrete.c&lt;/code&gt; produces a file called &lt;code class="docutils literal"&gt;concrete.exe&lt;/code&gt;. You can run the program by typing the basename at the command line:&lt;/p&gt;
&lt;p&gt;C&amp;gt;concrete&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integrated-development-environments-windows"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id33"&gt;Integrated Development Environments (Windows)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Quite a few vendors, including Microsoft, Embarcadero, and Digital Mars, offer Windows-based integrated development environments, or &lt;em&gt;IDEs&lt;/em&gt;. (These days, most are combined C and C++ compilers.) Free downloads include Microsoft Visual Studio Express and Pelles C. All have fast, integrated environments for putting together C programs. The key point is that each of these programs has a built-in editor you can use to write a C program. Each provides menus that enable you to name and save your source code file, as well as menus that allow you to compile and run your program without leaving the IDE. Each dumps you back into the editor if the compiler finds any errors, and each identifies the offending lines and matches them to the appropriate error messages.&lt;/p&gt;
&lt;p&gt;The Windows IDEs can be a little intimidating at first because they offer a variety of &lt;em&gt;targets&lt;/em&gt;—that is, a variety of environments in which the program will be used. For example, they might give you a choice of 32-bit Windows programs, 64-bit Windows programs, dynamic link library files (DLLs), and so on. Many of the targets involve bringing in support for the Windows graphical interface. To manage these (and other) choices, you typically create a &lt;em&gt;project&lt;/em&gt; to which you then add the names of the source code files you'll be using. The precise steps depend on the product you use. Typically, you first use the File menu or Project menu to create a project. What's important is choosing the correct form of project. The examples in this book are generic examples designed to run in a simple command-line environment. The various Windows IDEs provide one or more choices to match this undemanding assumption. Microsoft Visual Studio, for example, offers the Win32 Console Application option. For other systems, look for an option using terms such as DOS EXE, Console, or Character Mode executable. These modes will run your executable program in a console-like window. After you have the correct project type, use the IDE menu to open a new source code file. For most products, you can do this by using the File menu. You may have to take additional steps to add the source file to the project.&lt;/p&gt;
&lt;p&gt;Because the Windows IDEs typically handle both C and C++, you need to indicate that you want a C program. With some products you use the project type to indicate that you want to use C. With other products, such as Microsoft Visual C++, you use the &lt;code class="docutils literal"&gt;.c&lt;/code&gt; file extension to indicate that you want to use C rather than C++. However, most C programs also work as C++ programs. &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/app02.html#app02lev1sec9"&gt;Reference Section IX&lt;/a&gt;, “&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/app02.html#app02lev1sec9"&gt;Differences Between C and C++&lt;/a&gt;,” compares C and C++.&lt;/p&gt;
&lt;p&gt;One problem you might encounter is that the window showing the program execution vanishes when the program terminates. If that is the case for you, you can make the program pause until you press the Enter key. To do that, add the following line to the end of the program, just before the &lt;code class="docutils literal"&gt;return&lt;/code&gt; statement:&lt;/p&gt;
&lt;p&gt;getchar();&lt;/p&gt;
&lt;p&gt;This line reads a keystroke, so the program will pause until you press the Enter key. Sometimes, depending on how the program functions, there might already be a keystroke waiting. In that case, you'll have to use &lt;code class="docutils literal"&gt;getchar()&lt;/code&gt; twice:&lt;/p&gt;
&lt;p&gt;getchar(); getchar();&lt;/p&gt;
&lt;p&gt;For example, if the last thing the program did was ask you to enter your weight, you would have typed your weight and then pressed the Enter key to enter the data. The program would read the weight, the first &lt;code class="docutils literal"&gt;getchar()&lt;/code&gt; would read the Enter key, and the second &lt;code class="docutils literal"&gt;getchar()&lt;/code&gt; would cause the program to pause until you press Enter again. If this doesn't make a lot of sense to you now, it will after you learn more about C input. And we'll remind you later about this approach.&lt;/p&gt;
&lt;p&gt;Although the various IDEs have many broad principles in common, the details vary from product to product and, within a product line, from version to version. You'll have to do some experimenting to learn how your compiler works. You might even have to read the manual or try an online tutorial.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Microsoft Visual Studio and the C Standard&lt;/p&gt;
&lt;p&gt;Microsoft Visual Studio and the freeware Microsoft Visual Studio Express have the greatest presence in Windows software development, so their relationship to the C standards is of some importance. In brief, Microsoft has encouraged programmers to shift from C to C++ or C#. Visual Studio supports C89/90, but its support for later standards, to date, consists of supporting those new features that also are found in C++, such as the &lt;code class="docutils literal"&gt;long long&lt;/code&gt; type. Also, as of the 2012 edition, Visual Studio doesn't offer C as one of the choices for project type. However, you can still use Visual Studio with the vast majority of programs in this book. One choice is just to choose the C++ option, then Win32 Console, then Empty Project in Application settings. Nearly all of C is compatible with C++, so most of the C programs in this book also work as C++ programs. Or, after choosing the C++ option, you can use the &lt;code class="docutils literal"&gt;.c&lt;/code&gt; extension instead of the default &lt;code class="docutils literal"&gt;.cpp&lt;/code&gt; extension for the source file, and the compiler will use C rules instead of C++ rules.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="the-windows-linux-option"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id34"&gt;The Windows/Linux Option&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Many Linux distributions can be installed from Windows to set up a dual-boot system. Some of your storage will be set aside for a Linux system, and you then can boot to either Windows or Linux. You can't run a Linux program from Windows or vice versa, and you can't access Linux files from Windows, but you can access Windows documents from Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="c-on-the-macintosh"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id35"&gt;C on the Macintosh&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Currently, Apple offers its Xcode development system as a free download. (In the past, sometimes it has been free, sometimes available for a modest charge.) It lets you choose from several programming languages, including C.&lt;/p&gt;
&lt;p&gt;Xcode, with its capability to handle several programming languages, to target multiple platforms, and to develop large-scale projects, can seem intimidating. But you need learn just enough to produce simple C programs. With Xcode 4.6, use the File menu to select New, Project, OS X Application Command Line Tool, and then enter a product name and select C for the Type. Xcode uses either the Clang or the GCC C compiler for C code. It used to use GCC by default, and now uses Clang by default. You can use Xcode settings to choose which compiler it uses and also which C standard to support. (Due to licensing matters, the version of Clang available with Xcode is more recent than the GCC version.)&lt;/p&gt;
&lt;p&gt;Mac OS X is built on Unix, and the Terminal utility opens a window that lets you run programs in a Unix command-line environment. Apple doesn't provide a command-line compiler as part of its standard package, but if you download Xcode, you can also download optional command-line tools that enable you to use the &lt;code class="docutils literal"&gt;clang&lt;/code&gt; and the &lt;code class="docutils literal"&gt;gcc&lt;/code&gt; commands to compile in command-line mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-this-book-is-organized"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id36"&gt;How This Book Is Organized&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are many ways to organize information. One of the most direct approaches is to present everything about topic A, everything about topic B, and so on. This is particularly useful for a reference so you can find all the information about a given topic in one place. But usually it's not the best sequence for learning a subject. For instance, if you began learning English by first learning all the nouns, your ability to express ideas would be severely limited. Sure, you could point to objects and shout their names, but you'd be much better equipped to express yourself if you learned just a few nouns, verbs, adjectives, and so on, along with a few rules about how those parts relate to one another.&lt;/p&gt;
&lt;p&gt;To provide you with a more balanced intake of information, this book uses a spiral approach of introducing several topics in earlier chapters and returning later to discuss them more fully. For example, understanding functions is essential to understanding C. Consequently, several of the early chapters include some discussion of functions so that when you reach the full discussion in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch09.html#ch09"&gt;Chapter 9&lt;/a&gt;, “&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch09.html#ch09"&gt;Functions&lt;/a&gt;,” you'll already have achieved some ease about using functions. Similarly, early chapters preview strings and loops so that you can begin using these useful tools in your programs before learning about them in detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conventions-used-in-this-book"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id37"&gt;Conventions Used in This Book&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We are almost ready to begin studying the C language itself. This section covers some of the conventions we use in presenting material.&lt;/p&gt;
&lt;div class="section" id="typeface"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id38"&gt;Typeface&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For text representing programs and computer input and output, we use a type font that resembles what you might see on a screen or on printed output. We have already used it a few times. In case it slipped your notice, the font looks like the following:&lt;/p&gt;
&lt;p&gt;#include &amp;lt;stdio.h&amp;gt; int main(void) {     printf("Concrete contains gravel and cement.n");&lt;/p&gt;
&lt;p&gt;    return 0; }&lt;/p&gt;
&lt;p&gt;The same monospace type is for code-related terms used in the text, such as &lt;code class="docutils literal"&gt;main()&lt;/code&gt;, and for filenames, such as &lt;code class="docutils literal"&gt;stdio.h&lt;/code&gt;. The book uses italicized monospace for placeholder terms for which you are expected to substitute specific terms, as in the following model of a declaration:&lt;/p&gt;
&lt;p&gt;type&lt;sub&gt;name&lt;/sub&gt; variable&lt;sub&gt;name&lt;/sub&gt;;&lt;/p&gt;
&lt;p&gt;Here, for instance, you might replace type&lt;sub&gt;name&lt;/sub&gt; with &lt;code class="docutils literal"&gt;int&lt;/code&gt; and variable&lt;sub&gt;name&lt;/sub&gt; with =zebra&lt;sub&gt;coun&lt;/sub&gt;=t.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="program-output"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id39"&gt;Program Output&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Output from the computer is printed in the same format, with the exception that user input is shown in boldface type. For instance, the following is program output from an example in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch14.html#ch14"&gt;Chapter 14&lt;/a&gt;, “&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/ch14.html#ch14"&gt;Structures and Other Data Forms&lt;/a&gt;”:&lt;/p&gt;
&lt;p&gt;Please enter the book title. Press [enter] at the start of a line to stop.&lt;/p&gt;
&lt;p&gt;My Life as a Budgie Now enter the author.&lt;/p&gt;
&lt;p&gt;Mack Zackles&lt;/p&gt;
&lt;p&gt;The lines printed in normal computer font are program output, and the boldface line is user input.&lt;/p&gt;
&lt;p&gt;There are many ways you and a computer can communicate with each other. However, we will assume that you type in commands by using a keyboard and that you read the response on a screen.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Special Keystrokes&lt;/p&gt;
&lt;p&gt;Usually, you send a line of instructions by pressing a key labeled Enter, c/r, Return, or some variation of these. We refer to this key in the text as the &lt;em&gt;Enter key&lt;/em&gt;. Normally, the book takes it for granted that you press the Enter key at the end of each line of input. However, to clarify particular points, a few examples explicitly show the Enter key, using the symbol &lt;code class="docutils literal"&gt;[enter]&lt;/code&gt; to represent it. The brackets mean that you press a single key rather than type the word &lt;em&gt;enter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We also refer to control characters, such as Ctrl+D. This notation means to press the D key while you are pressing the key labeled Ctrl (or perhaps Control).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Systems Used in Preparing This Book&lt;/p&gt;
&lt;p&gt;Some aspects of C, such as the amount of space used to store a number, depend on the system. When we give examples and refer to “our system,” we usually speak of an iMac running under OS X 10.8.4 and using the Xcode 4.6.2 development system with the Clang 3.2 compiler. Most of the programs also have been compiled using Microsoft Visual Studio Express 2012 and Pelles C 7.0 on a Windows 7 system, and GCC 4.7.3 on an Ubuntu 13.04 Linux system.&lt;/p&gt;
&lt;p&gt;You can download the code for this book's examples if you register the book at &lt;a class="reference external" href="http://www.informit.com/register"&gt;www.informit.com/register&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your System—What You Need&lt;/p&gt;
&lt;p&gt;You need to have a C compiler or access to one. C runs on an enormous variety of computer systems, so you have many choices. Do make sure that you use a C compiler designed for your particular system. Some of the examples in this book require support for the C99 or C11 standards, but most of the examples will work with a C90 compiler. If the compiler you use is pre-ANSI/ISO, you will have to make adjustments, probably often enough to encourage you to seek something newer.&lt;/p&gt;
&lt;p&gt;Most compiler vendors offer special pricing to students and educators, so if you fall into that category, check the vendor websites.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="special-elements"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id40"&gt;Special Elements&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The book includes several special elements that highlight particular points: Sidebars, Tips, Cautions, and Notes. The following illustrates their appearances and uses:&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Sidebar&lt;/p&gt;
&lt;p&gt;A sidebar provides a deeper discussion or additional background to help illuminate a topic.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 505)&lt;/p&gt;
&lt;p&gt;At least one body element must separate transitions; adjacent transitions are not allowed.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Tip&lt;/p&gt;
&lt;p&gt;Tips present short, helpful guides to particular programming situations.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 513)&lt;/p&gt;
&lt;p&gt;At least one body element must separate transitions; adjacent transitions are not allowed.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Caution&lt;/p&gt;
&lt;p&gt;A caution alerts you to potential pitfalls.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 521)&lt;/p&gt;
&lt;p&gt;At least one body element must separate transitions; adjacent transitions are not allowed.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;The notes provide a catchall category for comments that don't fall into one of the other categories.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="summary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id41"&gt;Summary&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;C is a powerful, concise programming language. It is popular because it offers useful programming tools, good control over hardware, and because C programs are easier than most to transport from one system to another.&lt;/p&gt;
&lt;p&gt;C is a compiled language. C compilers and linkers are programs that convert C language source code into executable code.&lt;/p&gt;
&lt;p&gt;Programming in C can be taxing, difficult, and frustrating, but it can also be intriguing, exciting, and satisfying. We hope you find it as enjoyable and fascinating as we do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="review-questions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id42"&gt;Review Questions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You'll find answers to the review questions in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/app01.html#app01"&gt;Appendix A&lt;/a&gt;, “&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/app01.html#app01"&gt;Answers to the Review Questions&lt;/a&gt;.”&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/app01.html#ch01ans01"&gt;1&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt; What does &lt;em&gt;portability&lt;/em&gt; mean in the context of programming?&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/app01.html#ch01ans02"&gt;2&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt; Explain the difference between a source code file, object code file, and executable file.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/app01.html#ch01ans03"&gt;3&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt; What are the seven major steps in programming?&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/app01.html#ch01ans04"&gt;4&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt; What does a compiler do?&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/app01.html#ch01ans05"&gt;5&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt; What does a linker do?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="programming-exercise"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id43"&gt;Programming Exercise&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We don't expect you to write C code yet, so this exercise concentrates on the earlier stages of the programming process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; You have just been employed by MacroMuscle, Inc. (Software for Hard Bodies). The company is entering the European market and wants a program that converts inches to centimeters (1 inch = 2.54 cm). The company wants the program set up so that it prompts the user to enter an inch value. Your assignment is to define the program objectives and to design the program (steps 1 and 2 of the programming process). on an Ubuntu 13.04 Linux system.&lt;/p&gt;
&lt;p&gt;You can download the code for this book's examples if you register the book at &lt;a class="reference external" href="http://www.informit.com/register"&gt;www.informit.com/register&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your System—What You Need&lt;/p&gt;
&lt;p&gt;You need to have a C compiler or access to one. C runs on an enormous variety of computer systems, so you have many choices. Do make sure that you use a C compiler designed for your particular system. Some of the examples in this book require support for the C99 or C11 standards, but most of the examples will work with a C90 compiler. If the compiler you use is pre-ANSI/ISO, you will have to make adjustments, probably often enough to encourage you to seek something newer.&lt;/p&gt;
&lt;p&gt;Most compiler vendors offer special pricing to students and educators, so if you fall into that category, check the vendor websites.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="ch01lev2sec28"&gt;&lt;/span&gt;&lt;h4&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id44"&gt;Special Elements&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The book includes several special elements that highlight particular points: Sidebars, Tips, Cautions, and Notes. The following illustrates their appearances and uses:&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Sidebar&lt;/p&gt;
&lt;p&gt;A sidebar provides a deeper discussion or additional background to help illuminate a topic.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 583)&lt;/p&gt;
&lt;p&gt;At least one body element must separate transitions; adjacent transitions are not allowed.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Tip&lt;/p&gt;
&lt;p&gt;Tips present short, helpful guides to particular programming situations.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 591)&lt;/p&gt;
&lt;p&gt;At least one body element must separate transitions; adjacent transitions are not allowed.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Caution&lt;/p&gt;
&lt;p&gt;A caution alerts you to potential pitfalls.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 599)&lt;/p&gt;
&lt;p&gt;At least one body element must separate transitions; adjacent transitions are not allowed.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;The notes provide a catchall category for comments that don't fall into one of the other categories.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="publish"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://alinbxsorcerer.github.io/posts/c-primer-plus/#id45"&gt;Publish&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_3470f5487af34e15b99c89e4f4667145-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt;pandoc --wrap&lt;span class="o"&gt;=&lt;/span&gt;none &lt;span class="m"&gt;01&lt;/span&gt;.Getting-Ready.org -o ~/Public/nikola_post/posts/C-Primer-Plus.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>C</category><guid>https://alinbxsorcerer.github.io/posts/c-primer-plus/</guid><pubDate>Mon, 15 Oct 2018 04:12:29 GMT</pubDate></item><item><title>读书评注: APUE</title><link>https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/</link><dc:creator>David</dc:creator><description>&lt;div class="section" id="preface-to-the-first-edition"&gt;
&lt;h2&gt;Preface to the First Edition&lt;/h2&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;This book describes the programming interface to the Unix system—the system call interface and many of the functions provided in the standard C library. It is intended for anyone writing programs that run under Unix.&lt;/p&gt;
&lt;p&gt;Like most operating systems, Unix provides numerous services to the programs that are running—open a file, read a file, start a new program, allocate a region of memory, get the current time-of-day, and so on. This has been termed the &lt;em&gt;system call interface&lt;/em&gt;. Additionally, the standard C library provides numerous functions that are used by almost every C program (format a variable's value for output, compare two strings, etc.).&lt;/p&gt;
&lt;p&gt;The system call interface and the library routines have traditionally been described in Sections 2 and 3 of the &lt;em&gt;Unix Programmer's Manual&lt;/em&gt;. This book is not a duplication of these sections. Examples and rationale are missing from the &lt;em&gt;Unix Programmer's Manual&lt;/em&gt;, and that's what this book provides.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unix-standards"&gt;
&lt;h3&gt;Unix Standards&lt;/h3&gt;
&lt;p&gt;The proliferation of different versions of Unix during the 1980s has been tempered by the various international standards that were started during the late 1980s. These include the ANSI standard for the C programming language, the IEEE POSIX family (still being developed), and the X/Open portability guide.&lt;/p&gt;
&lt;p&gt;This book also describes these standards. But instead of just describing the standards by themselves, we describe them in relation to popular implementations of the standards—System V Release 4 and the forthcoming 4.4BSD. This provides a real-world description, which is often lacking from the standard itself and from books that describe only the standard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="organization-of-the-book"&gt;
&lt;h3&gt;Organization of the Book&lt;/h3&gt;
&lt;p&gt;This book is divided into six parts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;An overview and introduction to basic Unix programming concepts and terminology (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0013.xhtml#ch01"&gt;Chapter 1&lt;/a&gt;), with a discussion of the various Unix standardization efforts and different Unix implementations (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0014.xhtml#ch02"&gt;Chapter 2&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I/O—unbuffered I/O (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0015.xhtml#ch03"&gt;Chapter 3&lt;/a&gt;), properties of files and directories (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0016.xhtml#ch04"&gt;Chapter 4&lt;/a&gt;), the standard I/O library (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0017.xhtml#ch05"&gt;Chapter 5&lt;/a&gt;), and the standard system data files (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0018.xhtml#ch06"&gt;Chapter 6&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Processes—the environment of a Unix process (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0019.xhtml#ch07"&gt;Chapter 7&lt;/a&gt;), process control (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0020.xhtml#ch08"&gt;Chapter 8&lt;/a&gt;), the relationships between different processes (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0021.xhtml#ch09"&gt;Chapter 9&lt;/a&gt;), and signals (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0022.xhtml#ch10"&gt;Chapter 10&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More I/O—terminal I/O (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0023.xhtml#ch11"&gt;Chapter 11&lt;/a&gt;), advanced I/O (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0024.xhtml#ch12"&gt;Chapter 12&lt;/a&gt;), and daemon processes (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0025.xhtml#ch13"&gt;Chapter 13&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IPC—Interprocess communication (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0026.xhtml#ch14"&gt;Chapters 14&lt;/a&gt; and &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0027.xhtml#ch15"&gt;15&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Examples—a database library (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0028.xhtml#ch16"&gt;Chapter 16&lt;/a&gt;), communicating with a PostScript printer (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0029.xhtml#ch17"&gt;Chapter 17&lt;/a&gt;), a modem dialing program (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0030.xhtml#ch18"&gt;Chapter 18&lt;/a&gt;), and using pseudo terminals (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0031.xhtml#ch19"&gt;Chapter 19&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A reading familiarity with C would be beneficial as would some experience using Unix. No prior programming experience with Unix is assumed. This text is intended for programmers familiar with Unix and programmers familiar with some other operating system who wish to learn the details of the services provided by most Unix systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="examples-in-the-text"&gt;
&lt;h3&gt;Examples in the Text&lt;/h3&gt;
&lt;p&gt;This book contains many examples—approximately 10,000 lines of source code. All the examples are in the C programming language. Furthermore, these examples are in ANSI C. You should have a copy of the &lt;em&gt;Unix Programmer's Manual&lt;/em&gt; for your system handy while reading this book, since reference is made to it for some of the more esoteric and implementation-dependent features.&lt;/p&gt;
&lt;p&gt;Almost every function and system call is demonstrated with a small, complete program. This lets us see the arguments and return values and is often easier to comprehend than the use of the function in a much larger program. But since some of the small programs are contrived examples, a few bigger examples are also included (&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0028.xhtml#ch16"&gt;Chapters 16&lt;/a&gt;, &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0029.xhtml#ch17"&gt;17&lt;/a&gt;, &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0030.xhtml#ch18"&gt;18&lt;/a&gt;, and &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0031.xhtml#ch19"&gt;19&lt;/a&gt;). These larger examples demonstrate the programming techniques in larger, real-world examples.&lt;/p&gt;
&lt;p&gt;All the examples have been included in the text directly from their source files. A machine-readable copy of all the examples is available via anonymous FTP from the Internet host &lt;code class="docutils literal"&gt;ftp.uu.net&lt;/code&gt; in the file &lt;code class="docutils literal"&gt;published/books/stevens.advprog.tar.Z&lt;/code&gt;. Obtaining the source code allows you to modify the programs from this text and experiment with them on your system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="systems-used-to-test-the-examples"&gt;
&lt;h3&gt;Systems Used to Test the Examples&lt;/h3&gt;
&lt;p&gt;Unfortunately all operating systems are moving targets. Unix is no exception. The following diagram shows the recent evolution of the various versions of System V and 4.xBSD.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image0" src="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/Images/image01287.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;4.xBSD are the various systems from the Computer Systems Research Group at the University of California at Berkeley. This group also distributes the BSD Net 1 and BSD Net 2 releases—publicly available source code from the 4.xBSD systems. SVRx refers to System V Release x from AT&amp;amp;T. XPG3 is the X/Open Portability Guide, Issue 3, and ANSI C is the ANSI standard for the C programming language. POSIX.1 is the IEEE and ISO standard for the interface to a Unix-like system. We'll have more to say about these different standards and the various versions of Unix in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0014.xhtml#ch02lev1sec2"&gt;Sections 2.2&lt;/a&gt; and &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/part0014.xhtml#ch02lev1sec3"&gt;2.3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this text we use the term 4.3+BSD to refer to the Unix system from Berkeley that is somewhere between the BSD Net 2 release and 4.4BSD.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the time of this writing, 4.4BSD was not released, so the system could not be called 4.4BSD. Nevertheless a simple name was needed to refer to this system and &lt;em&gt;4.3+BSD&lt;/em&gt; is used throughout the text.&lt;/p&gt;
&lt;p&gt;Most of the examples in this text have been run on four different versions of Unix:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Unix System V/386 Release 4.0 Version 2.0 (“vanilla SVR4”) from U.H. Corp. (UHC), on an Intel 80386 processor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4.3+BSD at the Computer Systems Research Group, Computer Science Division, University of California at Berkeley, on a Hewlett Packard workstation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BSD/386 (a derivative of the BSD Net 2 release) from Berkeley Software Design, Inc., on an Intel 80386 processor. This system is almost identical to what we call 4.3+BSD.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SunOS 4.1.1 and 4.1.2 (systems with a strong Berkeley heritage but many System V features) from Sun Microsystems, on a SPARCstation SLC.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Numerous timing tests are provided in the text and the systems used for the test are identified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgments"&gt;
&lt;h3&gt;Acknowledgments&lt;/h3&gt;
&lt;p&gt;Once again I am indebted to my family for their love, support, and many lost weekends over the past year and a half. Writing a book is, in many ways, a family affair. Thank you Sally, Bill, Ellen, and David.&lt;/p&gt;
&lt;p&gt;I am especially grateful to Brian Kernighan for his help in the book. His numerous thorough reviews of the entire manuscript and his gentle prodding for better prose hopefully show in the final result. Steve Rago was also a great resource, both in reviewing the entire manuscript and answering many questions about the details and history of System V. My thanks to the other technical reviewers used by Addison-Wesley, who provided valuable comments on various portions of the manuscript: Maury Bach, Mark Ellis, Jeff Gitlin, Peter Honeyman, John Linderman, Doug McIlroy, Evi Nemeth, Craig Partridge, Dave Presotto, Gary Wilson, and Gary Wright.&lt;/p&gt;
&lt;p&gt;Keith Bostic and Kirk McKusick at the U.C. Berkeley CSRG provided an account that was used to test the examples on the latest BSD system. (Many thanks to Peter Salus too.) Sam Nataros and Joachim Sacksen at UHC provided the copy of SVR4 used to test the examples. Trent Hein helped obtain the alpha and beta copies of BSD/386.&lt;/p&gt;
&lt;p&gt;Other friends have helped in many small, but significant ways over the past few years: Paul Lucchina, Joe Godsil, Jim Hogue, Ed Tankus, and Gary Wright. My editor at Addison-Wesley, John Wait, has been a great friend through it all. He never complained when the due date slipped and the page count kept increasing. A special thanks to the National Optical Astronomy Observatories (NOAO), especially Sidney Wolff, Richard Wolff, and Steve Grandi, for providing computer time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Real&lt;/em&gt; Unix books are written using troff and this book follows that time-honored tradition. Camera-ready copy of the book was produced by the author using the groff package written by James Clark. Many thanks to James Clark for providing this excellent system and for his rapid response to bug fixes. Perhaps someday I will really understand troff footer traps.&lt;/p&gt;
&lt;p&gt;I welcome electronic mail from any readers with comments, suggestions, or bug fixes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tucson, Arizona&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;April 1992&lt;/em&gt;&lt;/p&gt;
&lt;ol class="upperalpha simple" start="23"&gt;
&lt;li&gt;&lt;p&gt;Richard Stevens&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;rstevens@kohala.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;http://www.kohala.com/~rstevens&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h3&gt;Publish&lt;/h3&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;htmls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*.xhtml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# print(htmls)&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;htmls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# print(htmls)&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# for i, e in enumerate(htmls, start=1):&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#     os.rename(e, f"{i:02}.xhtml")&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-14"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;htmls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"pandoc --wrap=none {html} -o {re.sub(r'xhtml$', 'org', html)}"&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"org"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;"not ends with org"&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_f4ecce103db24427ac5f222ebb373cab-19"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_42a458cdb4a048c2aad005b5b9553ad0-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt;ls
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_b4f8a7e6eb45450292969609ba85de3d-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt;pandoc --wrap&lt;span class="o"&gt;=&lt;/span&gt;none &lt;span class="m"&gt;00&lt;/span&gt;.Preface.org -o ~/Public/nikola_post/posts/读书评注:APUE.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="clean-chapters"&gt;
&lt;h3&gt;Clean Chapters&lt;/h3&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clearup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r+"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;&amp;lt;.+&amp;gt;&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;".*:PROPERTIES:.*\n.*:CUSTOM_ID:.*\n.*:END:.*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\*(\d\.\d)\*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"\g&amp;lt;1&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\[\[.*Click here to view code image.*\]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\*\[\[.*\]\[([0-9]\.[0-9]*)\]\]\*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"\g&amp;lt;1&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-16"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# print(text[:100])&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-21"&gt;&lt;/a&gt;&lt;span class="n"&gt;clearup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"07.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_221e705ea00341eb9e070f0275d0e0ef-23"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# orgs = glob.glob("*.org")&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_c710ee9d7f68403da3f410e75ac07176-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;a name="rest_code_c710ee9d7f68403da3f410e75ac07176-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_c710ee9d7f68403da3f410e75ac07176-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_c710ee9d7f68403da3f410e75ac07176-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;orgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c710ee9d7f68403da3f410e75ac07176-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;orgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdigit&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;orgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c710ee9d7f68403da3f410e75ac07176-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;orgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orgs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;a name="rest_code_c710ee9d7f68403da3f410e75ac07176-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# orgs.sort(key=lambda x: int(x[0:2]))&lt;/span&gt;
&lt;a name="rest_code_c710ee9d7f68403da3f410e75ac07176-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_c710ee9d7f68403da3f410e75ac07176-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;orgs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c710ee9d7f68403da3f410e75ac07176-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;clearup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="add-chapter-names"&gt;
&lt;h3&gt;Add chapter names&lt;/h3&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;orgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;orgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;orgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ab1836458da46fea2525054b95485ad-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_216155509d3841cf8d71499601f8b35e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 忘记加后缀名&lt;/span&gt;
&lt;a name="rest_code_216155509d3841cf8d71499601f8b35e-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ! rm *.xhtml&lt;/span&gt;
&lt;a name="rest_code_216155509d3841cf8d71499601f8b35e-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_216155509d3841cf8d71499601f8b35e-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"org"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_216155509d3841cf8d71499601f8b35e-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_216155509d3841cf8d71499601f8b35e-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# map(lambda x: os.rename(x, f"{x}.org"), fs)&lt;/span&gt;
&lt;a name="rest_code_216155509d3841cf8d71499601f8b35e-7"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; ls
&lt;a name="rest_code_216155509d3841cf8d71499601f8b35e-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# print(fs)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_2258d7a1f3a64e139906c7a629ac8fc4-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;a name="rest_code_2258d7a1f3a64e139906c7a629ac8fc4-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;a name="rest_code_2258d7a1f3a64e139906c7a629ac8fc4-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;
&lt;a name="rest_code_2258d7a1f3a64e139906c7a629ac8fc4-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_2258d7a1f3a64e139906c7a629ac8fc4-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_2258d7a1f3a64e139906c7a629ac8fc4-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"org"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2258d7a1f3a64e139906c7a629ac8fc4-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;fsc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2258d7a1f3a64e139906c7a629ac8fc4-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_2258d7a1f3a64e139906c7a629ac8fc4-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_5bb8b242a29b485aacd979f390b5d32e-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'.org'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5bb8b242a29b485aacd979f390b5d32e-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; ls &lt;span class="p"&gt;|&lt;/span&gt; head -n &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_861f741d8056483083ab005aaef37d4d-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_861f741d8056483083ab005aaef37d4d-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"{f}.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_861f741d8056483083ab005aaef37d4d-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt; ls &lt;span class="p"&gt;|&lt;/span&gt; head -n &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><guid>https://alinbxsorcerer.github.io/posts/dushu-phngzhu-apue/</guid><pubDate>Fri, 21 Sep 2018 12:53:29 GMT</pubDate></item><item><title>Fluent Python </title><link>https://alinbxsorcerer.github.io/posts/flunt-python%20/</link><dc:creator>David</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 1)&lt;/p&gt;
&lt;p&gt;The "contents" directive may not be used within topics or body elements.&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. contents::&lt;/pre&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 2)&lt;/p&gt;
&lt;p&gt;Block quote ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preface"&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Here's the plan: when someone uses a feature you don't understand, simply shoot them. This is easier than learning something new, and before too long the only living coders will be writing in an easily understood, tiny subset of Python 0.9.6 — Tim Peters &lt;em&gt;Legendary core developer and author of The Zen of Python&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“Python is an easy to learn, powerful programming language.” Those are the first words of the &lt;a class="reference external" href="https://docs.python.org/3/tutorial/"&gt;official Python Tutorial&lt;/a&gt;. That is true, but there is a catch: because the language is easy to learn and put to use, many practicing Python programmers leverage only a fraction of its powerful features.&lt;/p&gt;
&lt;p&gt;An experienced programmer may start writing useful Python code in a matter of hours. As the first productive hours become weeks and months, a lot of developers go on writing Python code with a very strong accent carried from languages learned before. Even if Python is your first language, often in academia and in introductory books it is presented while carefully avoiding language-specific features.&lt;/p&gt;
&lt;p&gt;As a teacher introducing Python to programmers experienced in other languages, I see another problem that this book tries to address: we only miss stuff we know about. Coming from another language, anyone may guess that Python supports regular expressions, and look that up in the docs. But if you've never seen tuple unpacking or descriptors before, you will probably not search for them, and may end up not using those features just because they are specific to Python.&lt;/p&gt;
&lt;p&gt;This book is not an A-to-Z exhaustive reference of Python. Its emphasis is on the language features that are either unique to Python or not found in many other popular languages. This is also mostly a book about the core language and some of its libraries. I will rarely talk about packages that are not in the standard library, even though the Python package index now lists more than 60,000 libraries and many of them are incredibly useful.&lt;/p&gt;
&lt;div class="section" id="who-this-book-is-for"&gt;
&lt;h3&gt;Who This Book Is For&lt;/h3&gt;
&lt;p&gt;This book was written for practicing Python programmers who want to become proficient in Python 3. If you know Python 2 but are willing to migrate to Python 3.4 or later, you should be fine. At the time of this writing, the majority of professional Python programmers are using Python 2, so I took special care to highlight Python 3 features that may be new to that audience.&lt;/p&gt;
&lt;p&gt;However, &lt;em&gt;Fluent Python&lt;/em&gt; is about making the most of Python 3.4, and I do not spell out the fixes needed to make the code work in earlier versions. Most examples should run in Python 2.7 with little or no changes, but in some cases, backporting would require significant rewriting.&lt;/p&gt;
&lt;p&gt;Having said that, I believe this book may be useful even if you must stick with Python 2.7, because the core concepts are still the same. Python 3 is not a new language, and most differences can be learned in an afternoon. &lt;a class="reference external" href="https://docs.python.org/3.0/whatsnew/3.0.html"&gt;What's New in Python 3.0&lt;/a&gt; is a good starting point. Of course, there have been changes since Python 3.0 was released in 2009, but none as important as those in 3.0.&lt;/p&gt;
&lt;p&gt;If you are not sure whether you know enough Python to follow along, review the topics of the official &lt;a class="reference external" href="https://docs.python.org/3/tutorial/"&gt;Python Tutorial&lt;/a&gt;. Topics covered in the tutorial will not be explained here, except for some features that are new in Python 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-this-book-is-not-for"&gt;
&lt;h3&gt;Who This Book Is Not For&lt;/h3&gt;
&lt;p&gt;If you are just learning Python, this book is going to be hard to follow. Not only that, if you read it too early in your Python journey, it may give you the impression that every Python script should leverage special methods and metaprogramming tricks. Premature abstraction is as bad as premature optimization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-this-book-is-organized"&gt;
&lt;h3&gt;How This Book Is Organized&lt;/h3&gt;
&lt;p&gt;The core audience for this book should not have trouble jumping directly to any chapter in this book. However, each of the six parts forms a book within the book. I conceived the chapters within each part to be read in sequence.&lt;/p&gt;
&lt;p&gt;I tried to emphasize using what is available before discussing how to build your own. For example, in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt02.html"&gt;Part II&lt;/a&gt;, &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/ch02.html"&gt;Chapter 2&lt;/a&gt; covers sequence types that are ready to use, including some that don't get a lot of attention, like &lt;code class="docutils literal"&gt;collections.deque&lt;/code&gt;. Building user-defined sequences is only addressed in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt04.html"&gt;Part IV&lt;/a&gt;, where we also see how to leverage the abstract base classes (ABCs) from &lt;code class="docutils literal"&gt;collections.abc&lt;/code&gt;. Creating your own ABCs is discussed even later in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt04.html"&gt;Part IV&lt;/a&gt;, because I believe it's important to be comfortable using an ABC before writing your own.&lt;/p&gt;
&lt;p&gt;This approach has a few advantages. First, knowing what is ready to use can save you from reinventing the wheel. We use existing collection classes more often than we implement our own, and we can give more attention to the advanced usage of available tools by deferring the discussion on how to create new ones. We are also more likely to inherit from existing ABCs than to create a new ABC from scratch. And finally, I believe it is easier to understand the abstractions after you've seen them in action.&lt;/p&gt;
&lt;p&gt;The downside of this strategy are the forward references scattered throughout the chapters. I hope these will be easier to tolerate now that you know why I chose this path.&lt;/p&gt;
&lt;p&gt;Here are the main topics in each part of the book:&lt;/p&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt01.html"&gt;Part I&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A single chapter about the Python data model explaining how the special methods (e.g., &lt;code class="docutils literal"&gt;__repr__&lt;/code&gt;) are the key to the consistent behavior of objects of all types—in a language that is admired for its consistency. Understanding various facets of the data model is the subject of most of the rest of the book, but &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/ch01.html"&gt;Chapter 1&lt;/a&gt; provides a high-level overview.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt02.html"&gt;Part II&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The chapters in this part cover the use of collection types: sequences, mappings, and sets, as well as the &lt;code class="docutils literal"&gt;str&lt;/code&gt; versus &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; split—the cause of much celebration among Python 3 users and much pain for Python 2 users who have not yet migrated their code bases. The main goals are to recall what is already available and to explain some behavior that is sometimes surprising, like the reordering of &lt;code class="docutils literal"&gt;dict&lt;/code&gt; keys when we are not looking, or the caveats of locale-dependent Unicode string sorting. To achieve these goals, the coverage is sometimes high level and wide (e.g., when many variations of sequences and mappings are presented) and sometimes deep (e.g., when we dive into the hash tables underneath the &lt;code class="docutils literal"&gt;dict&lt;/code&gt; and &lt;code class="docutils literal"&gt;set&lt;/code&gt; types).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt03.html"&gt;Part III&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Here we talk about functions as first-class objects in the language: what that means, how it affects some popular design patterns, and how to implement function decorators by leveraging closures. Also covered here is the general concept of callables in Python, function attributes, introspection, parameter annotations, and the new &lt;code class="docutils literal"&gt;nonlocal&lt;/code&gt; declaration in Python 3.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt04.html"&gt;Part IV&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Now the focus is on building classes. In &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt02.html"&gt;Part II&lt;/a&gt;, the &lt;code class="docutils literal"&gt;class&lt;/code&gt; declaration appears in few examples; &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt04.html"&gt;Part IV&lt;/a&gt; presents many classes. Like any object-oriented (OO) language, Python has its particular set of features that may or may not be present in the language in which you and I learned class-based programming. The chapters explain how references work, what mutability really means, the lifecycle of instances, how to build your own collections and ABCs, how to cope with multiple inheritance, and how to implement operator overloading—when that makes sense.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt05.html"&gt;Part V&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Covered in this part are the language constructs and libraries that go beyond sequential control flow with conditionals, loops, and subroutines. We start with generators, then visit context managers and coroutines, including the challenging but powerful new &lt;code class="docutils literal"&gt;yield from&lt;/code&gt; syntax. &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt05.html"&gt;Part V&lt;/a&gt; closes with a high-level introduction to modern concurrency in Python with &lt;code class="docutils literal"&gt;collections.futures&lt;/code&gt; (using threads and processes under the covers with the help of futures) and doing event-oriented I/O with &lt;code class="docutils literal"&gt;asyncio&lt;/code&gt; (leveraging futures on top of coroutines and &lt;code class="docutils literal"&gt;yield from&lt;/code&gt;).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt06.html"&gt;Part VI&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;This part starts with a review of techniques for building classes with attributes created dynamically to handle semi-structured data such as JSON datasets. Next, we cover the familiar properties mechanism, before diving into how object attribute access works at a lower level in Python using descriptors. The relationship between functions, methods, and descriptors is explained. Throughout &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/pt06.html"&gt;Part VI&lt;/a&gt;, the step-by-step implementation of a field validation library uncovers subtle issues that lead to the use of the advanced tools of the final chapter: class decorators and metaclasses.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="hands-on-approach"&gt;
&lt;h3&gt;Hands-On Approach&lt;/h3&gt;
&lt;p&gt;Often we'll use the interactive Python console to explore the language and libraries. I feel it is important to emphasize the power of this learning tool, particularly for those readers who've had more experience with static, compiled languages that don't provide a read-eval-print#loop (REPL).&lt;/p&gt;
&lt;p&gt;One of the standard Python testing packages, &lt;code class="docutils literal"&gt;`doctest&lt;/code&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/doctest.html"&gt;https://docs.python.org/3/library/doctest.html&lt;/a&gt;&amp;gt;`__, works by simulating console sessions and verifying that the expressions evaluate to the responses shown. I used &lt;code class="docutils literal"&gt;doctest&lt;/code&gt; to check most of the code in this book, including the console listings. You don't need to use or even know about &lt;code class="docutils literal"&gt;doctest&lt;/code&gt; to follow along: the key feature of doctests is that they look like transcripts of interactive Python console sessions, so you can easily try out the demonstrations yourself.&lt;/p&gt;
&lt;p&gt;Sometimes I will explain what we want to accomplish by showing a doctest before the code that makes it pass. Firmly establishing what is to be done before thinking about how to do it helps focus our coding effort. Writing tests first is the basis of test driven development (TDD) and I've also found it helpful when teaching. If you are unfamiliar with &lt;code class="docutils literal"&gt;doctest&lt;/code&gt;, take a look at its &lt;a class="reference external" href="https://docs.python.org/3/library/doctest.html"&gt;documentation&lt;/a&gt; and this book's &lt;a class="reference external" href="https://github.com/fluentpython/example-code"&gt;source code repository&lt;/a&gt;. You'll find that you can verify the correctness of most of the code in the book by typing &lt;code class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; doctest example_script.py&lt;/code&gt; in the command shell of your OS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hardware-used-for-timings"&gt;
&lt;h3&gt;Hardware Used for Timings&lt;/h3&gt;
&lt;p&gt;The book has some simple benchmarks and timings. Those tests were performed on one or the other laptop I used to write the book: a 2011 MacBook Pro 13” with a 2.7 GHz Intel Core i7 CPU, 8GB of RAM, and a spinning hard disk, and a 2014 MacBook Air 13” with a 1.4 GHz Intel Core i5 CPU, 4GB of RAM, and a solid-state disk. The MacBook Air has a slower CPU and less RAM, but its RAM is faster (1600 versus 1333 MHz) and the SSD is much faster than the HD. In daily usage, I can't tell which machine is faster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="soapbox-my-personal-perspective"&gt;
&lt;h3&gt;Soapbox: My Personal Perspective&lt;/h3&gt;
&lt;p&gt;I have been using, teaching, and debating Python since 1998, and I enjoy studying and comparing programming languages, their design, and the theory behind them. At the end of some chapters, I have added “Soapbox” sidebars with my own perspective about Python and other languages. Feel free to skip these if you are not into such discussions. Their content is completely optional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-version-covered"&gt;
&lt;h3&gt;Python Version Covered&lt;/h3&gt;
&lt;p&gt;I tested all the code in the book using Python 3.4—that is, CPython 3.4, the most popular Python implementation written in C. There is only one exception: &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/ch13.html#matmul_operator_sec"&gt;The New @ Infix Operator in Python 3.5&lt;/a&gt; shows the &lt;code class="docutils literal"&gt;@&lt;/code&gt; operator, which is only supported by Python 3.5.&lt;/p&gt;
&lt;p&gt;Almost all code in the book should work with any Python 3.x–compatible interpreter, including PyPy3 2.4.0, which is compatible with Python 3.2.5. The notable exceptions are the examples using &lt;code class="docutils literal"&gt;yield from&lt;/code&gt; and &lt;code class="docutils literal"&gt;asyncio&lt;/code&gt;, which are only available in Python 3.3 or later.&lt;/p&gt;
&lt;p&gt;Most code should also work with Python 2.7 with minor changes, except the Unicode-related examples in &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/ch04.html"&gt;Chapter 4&lt;/a&gt;, and the exceptions already noted for Python 3 versions earlier than 3.3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-jargon"&gt;
&lt;h3&gt;Python Jargon&lt;/h3&gt;
&lt;p&gt;I wanted this to be a book not only about Python but also about the culture around it. Over more than 20 years of communications, the Python community developed its own particular lingo and acronyms. At the end of this book, &lt;a class="reference external" href="https://alinbxsorcerer.github.io/posts/flunt-python%20/go01.html"&gt;Python Jargon&lt;/a&gt; contains a list of terms that have special meaning among Pythonistas.&lt;/p&gt;
&lt;p&gt;Many terms here are not exclusive to Python, of course, but particularly in the definitions you may find meanings that are specific to the Python community.&lt;/p&gt;
&lt;p&gt;Also see the official &lt;a class="reference external" href="https://docs.python.org/3/glossary.html"&gt;Python glossary&lt;/a&gt;.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;ABC (programming language)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A programming language created by Leo Geurts, Lambert Meertens, and Steven Pemberton. Guido van Rossum, who developed Python, worked as a programmer implementing the ABC environment in the 1980s. Block structuring by indentation, built-in tuples and dictionaries, tuple unpacking, the semantics of the &lt;code class="docutils literal"&gt;for&lt;/code&gt; loop, and uniform handling of all sequence types are some of the distinctive characteristics of Python that came from ABC.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Abstract base class (ABC)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class that cannot be instantiated, only subclassed. ABCs are how interfaces are formalized in Python. Instead of inheriting from an ABC, a class may also declare that it fulfills the interface by registering with the ABC to become a &lt;em&gt;virtual subclass&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;accessor&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A method implemented to provide access to a single data attribute. Some authors use &lt;em&gt;acessor&lt;/em&gt; as a generic term encompassing getter and setter methods, others use it to refer only to getters, referring to setters as mutators.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;aliasing&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Assigning two or more names to the same object. For example, in &lt;code class="docutils literal"&gt;a = []; b = a&lt;/code&gt; the variables &lt;code class="docutils literal"&gt;a&lt;/code&gt; and &lt;code class="docutils literal"&gt;b&lt;/code&gt; are aliases for the same list object. Aliasing happens naturally all the time in any language where variables store references to objects. To avoid confusion, just forget the idea that variables are boxes that hold objects (an object can't be in two boxes at the same time). It's better to think of them as labels attached to objects (an object can have more than one label).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;argument&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An expression passed to a function when it is called. In Pythonic parlance, &lt;em&gt;argument&lt;/em&gt; and &lt;em&gt;parameter&lt;/em&gt; are almost always synonyms. See &lt;em&gt;parameter&lt;/em&gt; for more about the distinction and usage of these terms.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;attribute&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Methods and data attributes (i.e., “fields” in Java terms) are all known as attributes in Python. A method is just an attribute that happens to be a callable object (usually a function, but not necessarily).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;BDFL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Benevolent Dictator For Life, alias for Guido van Rossum, creator of the Python language.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;binary sequence&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Generic term for sequence types with byte elements. The built-in binary sequence types are &lt;code class="docutils literal"&gt;byte&lt;/code&gt;, &lt;code class="docutils literal"&gt;bytearray&lt;/code&gt;, and &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;BOM&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Byte Order Mark, a sequence of bytes that may be present at the start of a UTF-16 encoded file. A BOM is the character U+FEFF (&lt;code class="docutils literal"&gt;ZERO WIDTH &lt;span class="pre"&gt;NO-BREAK&lt;/span&gt; SPACE&lt;/code&gt;) encoded to produce either &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;b'\xfe\xff'&lt;/span&gt;&lt;/code&gt; on a big-endian CPU, or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;b'\xff\xfe'&lt;/span&gt;&lt;/code&gt; on a little-endian one. Because there is no U+FFFE characer in Unicode, the presence of these bytes unambiguously reveals the byte ordering used in the encoding. Although redundant, a BOM encoded as &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;b'\xef\xbb\xbf'&lt;/span&gt;&lt;/code&gt; may be found in UTF-8 files.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;bound method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A method that is accessed through an instance becomes bound to that instance. Any method is actually a descriptor and when accessed, it returns itself wrapped in an object that binds the method to the instance. That object is the bound method. It can be invoked without passing the value of &lt;code class="docutils literal"&gt;self&lt;/code&gt;. For example, given the assignment &lt;code class="docutils literal"&gt;my_method = my_obj.method&lt;/code&gt;, the bound method can later be called as &lt;code class="docutils literal"&gt;my_method()&lt;/code&gt;. Contrast with &lt;em&gt;unbound method&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;built-in function (BIF)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A function bundled with the Python interpreter, coded in the underlying implementation language (i.e., C for CPython; Java for Jython, and so on). The term often refers only to the functions that don't need to be imported, documented in &lt;a class="reference external" href="http://docs.python.org/library/functions.html"&gt;Chapter 2, “Built-in Functions,”&lt;/a&gt; of The Python Standard Library Reference. But built-in modules like &lt;code class="docutils literal"&gt;sys&lt;/code&gt;, &lt;code class="docutils literal"&gt;math&lt;/code&gt;, &lt;code class="docutils literal"&gt;re&lt;/code&gt;, etc. also contain built-in functions.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;byte string&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An unfortunate name still used to refer to &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; or &lt;code class="docutils literal"&gt;bytearray&lt;/code&gt; in Python 3. In Python 2, the &lt;code class="docutils literal"&gt;str&lt;/code&gt; type was really a byte string, and the term made sense to distinguish &lt;code class="docutils literal"&gt;str&lt;/code&gt; from &lt;code class="docutils literal"&gt;unicode&lt;/code&gt; strings. In Python 3, it makes no sense to insist on this term, and I tried to use &lt;em&gt;byte sequence&lt;/em&gt; whenever I needed to talk in general about…byte sequences.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;bytes-like object&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A generic sequence of bytes. The most common bytes-like types are &lt;code class="docutils literal"&gt;bytes&lt;/code&gt;, &lt;code class="docutils literal"&gt;bytearray&lt;/code&gt;, and &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt; but other objects supporting the low-level CPython buffer protocol also qualify, if their elements are single bytes.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;callable object&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An object that can be invoked with the call operator &lt;code class="docutils literal"&gt;()&lt;/code&gt;, to return a result or to perform some action. There are seven flavors of callable objects in Python: user-defined functions, built-in functions, built-in methods, instance methods, generator functions, classes, and instances of classes that implement the &lt;code class="docutils literal"&gt;__call__&lt;/code&gt; special method.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;CamelCase&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The convention of writing identifiers by joining words with uppercased initials (e.g., &lt;code class="docutils literal"&gt;ConnectionRefusedError&lt;/code&gt;). PEP-8 recommends class names should be written in CamelCase, but the advice is not followed by the Python standard library. See &lt;em&gt;snake\case&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Cheese Shop&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Original name of the &lt;a class="reference external" href="https://pypi.python.org/pypi"&gt;Python Package Index&lt;/a&gt; (PyPI), after the Monty Python skit about a cheese shop where nothing is available. As of this writing, the alias &lt;a class="reference external" href="https://cheeseshop.python.org"&gt;https://cheeseshop.python.org&lt;/a&gt; still works. See &lt;em&gt;PyPI&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;class&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A program construct defining a new type, with data attributes and methods specifying possible operations on them. See &lt;code class="docutils literal"&gt;type&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;code point&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An integer in the range 0 to 0x10FFFF used to identify an entry in the Unicode character database. As of Unicode 7.0, less than 3% of all code points are assigned to characters. In the Python documentation, the term may be spelled as one or two words. For example, in &lt;a class="reference external" href="http://docs.python.org/library/functions.html"&gt;Chapter 2, “Built-in Functions,”&lt;/a&gt; of the &lt;em&gt;Python Library Reference&lt;/em&gt;, the &lt;code class="docutils literal"&gt;chr&lt;/code&gt; function is said to take an integer “codepoint,” while its inverse, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;, is described as returning a “Unicode code point.”&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;code smell&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A coding pattern that suggests there may be something wrong with the design of a program. For example, excessive use of &lt;code class="docutils literal"&gt;isinstance&lt;/code&gt; checks against concrete classes is a code smell, as it makes the program harder to extend to deal with new types in the future.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;codec&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;(encoder/decoder) A module with functions to encode and decode, usually from &lt;code class="docutils literal"&gt;str&lt;/code&gt; to &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; and back, although Python has a few codecs that perform &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; to &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; and &lt;code class="docutils literal"&gt;str&lt;/code&gt; to &lt;code class="docutils literal"&gt;str&lt;/code&gt; transformations.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;collection&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Generic term for data structures made of items that can be accessed individually. Some collections can contain objects of arbitrary types (see &lt;em&gt;container&lt;/em&gt;) and others only objects of a single atomic type (see &lt;em&gt;flat sequence&lt;/em&gt;). &lt;code class="docutils literal"&gt;list&lt;/code&gt; and &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; are both collections, but &lt;code class="docutils literal"&gt;list&lt;/code&gt; is a container, and &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; is a flat sequence.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;considered harmful&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Edsger Dijkstra's letter titled “Go To Statement Considered Harmful” established a formula for titles of essays criticizing some computer science technique. Wikipedia's &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Considered_harmful"&gt;“Considered harmful” article&lt;/a&gt; lists several examples, including &lt;a class="reference external" href="http://meyerweb.com/eric/comment/chech.html"&gt;"Considered Harmful Essays Considered Harmful”&lt;/a&gt; by Eric A. Meyer.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;constructor&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Informally, the &lt;code class="docutils literal"&gt;__init__&lt;/code&gt; instance method of a class is called its constructor, because its semantics is similar to that of a Java constructor. However, a fitting name for &lt;code class="docutils literal"&gt;__init__&lt;/code&gt; is &lt;em&gt;initializer&lt;/em&gt;, as it does not actually build the instance, but receives it as its &lt;code class="docutils literal"&gt;self&lt;/code&gt; argument. The &lt;em&gt;constructor&lt;/em&gt; term better describes the &lt;code class="docutils literal"&gt;__new__&lt;/code&gt; class method, which Python calls before &lt;code class="docutils literal"&gt;__init__&lt;/code&gt;, and is responsible for actually creating an instance and returning it. See &lt;em&gt;initializer&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;container&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An object that holds references to other objects. Most collection types in Python are containers, but some are not. Contrast with &lt;em&gt;flat sequence&lt;/em&gt;, which are collections but not containers.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;context manager&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An object implementing both the &lt;code class="docutils literal"&gt;__enter__&lt;/code&gt; and &lt;code class="docutils literal"&gt;__exit__&lt;/code&gt; special methods, for use in a &lt;code class="docutils literal"&gt;with&lt;/code&gt; block.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;coroutine&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A generator used for concurrent programming by receiving values from a scheduler or an event loop via &lt;code class="docutils literal"&gt;coro.send(value)&lt;/code&gt;. The term may be used to describe the generator function or the generator object obtained by calling the generator function. See &lt;em&gt;generator&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;CPython&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The standard Python interpreter, implemented in C. This term is only used when discussing implementation-specific behavior, or when talking about the multiple Python interpreters available, such as &lt;em&gt;PyPy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;CRUD&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Acronym for Create, Read, Update, and Delete, the four basic functions in any application that stores records.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;decorator&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A callable object &lt;code class="docutils literal"&gt;A&lt;/code&gt; that returns another callable object &lt;code class="docutils literal"&gt;B&lt;/code&gt; and is invoked in code using the syntax &lt;code class="docutils literal"&gt;@A&lt;/code&gt; right before the definition of a callable &lt;code class="docutils literal"&gt;C&lt;/code&gt;. When reading such code, the Python interpreter invokes &lt;code class="docutils literal"&gt;A(C)&lt;/code&gt; and binds the resulting &lt;code class="docutils literal"&gt;B&lt;/code&gt; to the variable previously assigned to &lt;code class="docutils literal"&gt;C&lt;/code&gt;, effectively replacing the definition of &lt;code class="docutils literal"&gt;C&lt;/code&gt; with &lt;code class="docutils literal"&gt;B&lt;/code&gt;. If the target callable &lt;code class="docutils literal"&gt;C&lt;/code&gt; is a function, then &lt;code class="docutils literal"&gt;A&lt;/code&gt; is a function decorator; if &lt;code class="docutils literal"&gt;C&lt;/code&gt; is a class, then &lt;code class="docutils literal"&gt;A&lt;/code&gt; is a class decorator.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;deep copy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A copy of an object in which all the objects that are attributes of the object are themselves also copied. Contrast with &lt;em&gt;shallow copy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;descriptor&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class implementing one or more of the &lt;code class="docutils literal"&gt;__get__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__set__&lt;/code&gt;, or &lt;code class="docutils literal"&gt;__delete__&lt;/code&gt; special methods becomes a descriptor when one of its instances is used as a class attribute of another class, the &lt;em&gt;managed class&lt;/em&gt;. Descriptors manage the access and deletion of &lt;em&gt;managed attributes&lt;/em&gt; in the &lt;em&gt;managed class&lt;/em&gt;, often storing data in the &lt;em&gt;managed instances&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;docstring&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Short for documentation string. When the first statement in a module, class, or function is a string literal, it is taken to be the &lt;em&gt;docstring&lt;/em&gt; for the enclosing object, and the interpreter saves it as the &lt;code class="docutils literal"&gt;__doc__&lt;/code&gt; attribute of that object. See also &lt;em&gt;doctest&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;doctest&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A module with functions to parse and run examples embedded in the docstrings of Python modules or in plain-text files. May also be used from the command line as:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 193)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "screen"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: screen

   python -m doctest
   module_with_tests.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;DRY&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Don't Repeat Yourself—a software engineering principle stating that “Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.” It first appeared in the book &lt;em&gt;The Pragmatic Programmer&lt;/em&gt; by Andy Hunt and Dave Thomas (Addison-Wesley, 1999).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;duck typing&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A form of polymorphism where functions operate on any object that implements the appropriate methods, regardless of their classes or explicit interface declarations.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;dunder&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Shortcut to pronounce the names of &lt;em&gt;special methods&lt;/em&gt; and attributes that are written with leading and trailing double-underscores (i.e., &lt;code class="docutils literal"&gt;__len__&lt;/code&gt; is read as “dunder len”).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;dunder method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;See &lt;em&gt;dunder&lt;/em&gt; and &lt;em&gt;special methods&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;EAFP&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Acronym standing for the quote “It's easier to ask forgiveness than permission,” attributed to computer pioneer Grace Hopper, and quoted by Pythonistas referring to dynamic programming practices like accessing attributes without testing first if they exist, and then catching the exception when that is the case. The docstring for the &lt;code class="docutils literal"&gt;hasattr&lt;/code&gt; function actually says that it works “by calling getattr(object, name) and catching AttributeError.”&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;eager&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An iterable object that builds all its items at once. In Python, a &lt;em&gt;list comprehension&lt;/em&gt; is eager. Contrast with &lt;em&gt;lazy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;fail-fast&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A systems design approach recommending that errors should be reported as early as possible. Python adheres to this principle more closely than most dynamic languages. For example, there is no “undefined” value: variables referenced before initialization generate an error, and &lt;code class="docutils literal"&gt;my_dict[k]&lt;/code&gt; raises an exception if &lt;code class="docutils literal"&gt;k&lt;/code&gt; is missing (in contrast with JavaScript). As another example, parallel assignment via tuple unpacking in Python only works if every item is explicitly handled, while Ruby silently deals with item count mismatches by ignoring unused items on the right side of the &lt;code class="docutils literal"&gt;=&lt;/code&gt;, or by assigning &lt;code class="docutils literal"&gt;nil&lt;/code&gt; to extra variables on the left side.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;falsy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Any value &lt;code class="docutils literal"&gt;x&lt;/code&gt; for which &lt;code class="docutils literal"&gt;bool(x)&lt;/code&gt; returns &lt;code class="docutils literal"&gt;False&lt;/code&gt;; Python implicitly uses &lt;code class="docutils literal"&gt;bool&lt;/code&gt; to evaluate objects in Boolean contexts, such as the expression controlling an &lt;code class="docutils literal"&gt;if&lt;/code&gt; or &lt;code class="docutils literal"&gt;while&lt;/code&gt; loop. The opposite of &lt;em&gt;truthy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;file-like object&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Used informally in the official documentation to refer to objects implementing the file protocol, with methods such as &lt;code class="docutils literal"&gt;read&lt;/code&gt;, &lt;code class="docutils literal"&gt;write&lt;/code&gt;, &lt;code class="docutils literal"&gt;close&lt;/code&gt;, etc. Common variants are text files containing encoded strings with line-oriented reading and writing, &lt;code class="docutils literal"&gt;StringIO&lt;/code&gt; instances which are in-memory text files, and binary files, containing unencoded bytes. The latter may be buffered or unbuffered. ABCs for the standard file types are defined in the &lt;code class="docutils literal"&gt;io&lt;/code&gt; module since Python 2.6.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;first-class function&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Any function that is a first-class object in the language (i.e., can be created at runtime, assigned to variables, passed as an argument, and returned as the result of another function). Python functions are first-class functions.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;flat sequence&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A sequence type that physically stores the values of its items, and not references to other objects. The built-in types &lt;code class="docutils literal"&gt;str&lt;/code&gt;, &lt;code class="docutils literal"&gt;bytes&lt;/code&gt;, &lt;code class="docutils literal"&gt;bytearray&lt;/code&gt;, &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt;, and &lt;code class="docutils literal"&gt;array.array&lt;/code&gt; are flat sequences. Contrast with &lt;code class="docutils literal"&gt;list&lt;/code&gt;, &lt;code class="docutils literal"&gt;tuple&lt;/code&gt;, and &lt;code class="docutils literal"&gt;collections.deque&lt;/code&gt;, which are container sequences. See &lt;em&gt;container&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;function&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Strictly, an object resulting from evaluation of a &lt;code class="docutils literal"&gt;def&lt;/code&gt; block or a &lt;code class="docutils literal"&gt;lambda&lt;/code&gt; expression. Informally, the word &lt;em&gt;function&lt;/em&gt; is used to describe any callable object, such as methods and even classes sometimes. The official &lt;a class="reference external" href="http://docs.python.org/library/functions.html"&gt;Built-in Functions&lt;/a&gt; list includes several built-in classes like &lt;code class="docutils literal"&gt;dict&lt;/code&gt;, &lt;code class="docutils literal"&gt;range&lt;/code&gt;, and &lt;code class="docutils literal"&gt;str&lt;/code&gt;. Also see &lt;em&gt;callable object&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;genexp&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Short for &lt;em&gt;generator expression&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;generator&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An iterator built with a generator function or a generator expression that may produce values without necessarily iterating over a collection; the canonical example is a generator to produce the Fibonacci series which, because it is infinite, would never fit in a collection. The term is sometimes used to describe a &lt;em&gt;generator function&lt;/em&gt;, besides the object that results from calling it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;generator function&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A function that has the &lt;code class="docutils literal"&gt;yield&lt;/code&gt; keyword in its body. When invoked, a generator function returns a &lt;em&gt;generator&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;generator expression&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An expression enclosed in parentheses using the same syntax of a &lt;em&gt;list comprehension&lt;/em&gt;, but returning a generator instead of a list. A &lt;em&gt;generator expression&lt;/em&gt; can be understood as a &lt;em&gt;lazy&lt;/em&gt; version of a &lt;em&gt;list comprehension&lt;/em&gt;. See &lt;em&gt;lazy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;generic function&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A group of functions designed to implement the same operation in customized ways for different object types. As of Python 3.4, the &lt;code class="docutils literal"&gt;functools.singledispatch&lt;/code&gt; decorator is the standard way to create generic functions. This is known as multimethods in other languages.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;GoF book&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Alias for &lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt; (Addison-Wesley, 1995), authored by the so-called Gang of Four (GoF): Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;hashable&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An object is hashable if it has both &lt;code class="docutils literal"&gt;__hash__&lt;/code&gt; and &lt;code class="docutils literal"&gt;__eq__&lt;/code&gt; methods, with the constraints that the hash value must never change and if &lt;code class="docutils literal"&gt;a =&lt;/code&gt; b= then &lt;code class="docutils literal"&gt;hash(a) =&lt;/code&gt; hash(b)= must also be &lt;code class="docutils literal"&gt;True&lt;/code&gt;. Most immutable built-in types are hashable, but a tuple is only hashable if every one of its items is also hashable.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;higher-order function&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A function that takes another function as argument, like &lt;code class="docutils literal"&gt;sorted&lt;/code&gt;, &lt;code class="docutils literal"&gt;map&lt;/code&gt;, and &lt;code class="docutils literal"&gt;filter&lt;/code&gt;, or a function that returns a function as result, as Python decorators do.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;idiom&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;“A manner of speaking that is natural to native speakers of a language,” according to the Princeton WordNet.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;import time&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The moment of initial execution of a module when its code is loaded by the Python interpreter, evaluated from top to bottom, and compiled into bytecode. This is when classes and functions are defined and become live objects. This is also when decorators are executed.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;initializer&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A better name for the &lt;code class="docutils literal"&gt;__init__&lt;/code&gt; method (instead of &lt;em&gt;constructor&lt;/em&gt;). Initializing the instance received as &lt;code class="docutils literal"&gt;self&lt;/code&gt; is the task of &lt;code class="docutils literal"&gt;__init__&lt;/code&gt;. Actual instance construction is done by the &lt;code class="docutils literal"&gt;__new__&lt;/code&gt; method. See &lt;em&gt;constructor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;iterable&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Any object from which the &lt;code class="docutils literal"&gt;iter&lt;/code&gt; built-in function can obtain an iterator. An iterable object works as the source of items in &lt;code class="docutils literal"&gt;for&lt;/code&gt; loops, comprehensions, and tuple unpacking. Objects implementing an &lt;code class="docutils literal"&gt;__iter__&lt;/code&gt; method returning an &lt;em&gt;iterator&lt;/em&gt; are iterable. Sequences are always iterable; other objects implementing a &lt;code class="docutils literal"&gt;__getitem__&lt;/code&gt; method may also be iterable.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;iterable unpacking&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A modern, more precise synonym for &lt;em&gt;tuple unpacking&lt;/em&gt;. See also &lt;em&gt;parallel assignment&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;iterator&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Any object that implements the &lt;code class="docutils literal"&gt;__next__&lt;/code&gt; no-argument method, which returns the next item in a series, or raises &lt;code class="docutils literal"&gt;StopIteration&lt;/code&gt; when there are no more items. Python iterators also implement the &lt;code class="docutils literal"&gt;__iter__&lt;/code&gt; method so they are also &lt;em&gt;iterable&lt;/em&gt;. Classic iterators, according to the original design pattern, return items from a collection. A &lt;em&gt;generator&lt;/em&gt; is also an &lt;em&gt;iterator&lt;/em&gt;, but it's more flexible. See &lt;em&gt;generator&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;KISS principle&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The acronym stands for “Keep It Simple, Stupid.” This calls for seeking the simplest possible solution, with the fewest moving parts. The phrase was coined by Kelly Johnson, a highly accomplished aerospace engineer who worked in the real Area 51 designing some of the most advanced aircraft of the 20th century.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;lazy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An iterable object that produces items on demand. In Python, generators are lazy. Contrast &lt;em&gt;eager&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;listcomp&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Short for &lt;em&gt;list comprehension&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;list comprehension&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An expression enclosed in brackets that uses the &lt;code class="docutils literal"&gt;for&lt;/code&gt; and &lt;code class="docutils literal"&gt;in&lt;/code&gt; keywords to build a list by processing and filtering the elements from one or more iterables. A list comprehension works eagerly. See &lt;em&gt;eager&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;liveness&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An asynchronous, threaded, or distributed system exhibits the liveness property when “something good eventually happens” (i.e., even if some expected computation is not happening right now, it will be completed eventually). If a system deadlocks, it has lost its liveness.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;magic method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Same as &lt;em&gt;special method&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;managed attribute&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A public attribute managed by a descriptor object. Although the &lt;em&gt;managed attribute&lt;/em&gt; is defined in the &lt;em&gt;managed class&lt;/em&gt;, it operates like an instance attribute (i.e., it usually has a value per instance, held in a &lt;em&gt;storage attribute&lt;/em&gt;). See &lt;em&gt;descriptor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;managed class&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class that uses a descriptor object to manage one of its attributes. See &lt;em&gt;descriptor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;managed instance&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An instance of a &lt;em&gt;managed class&lt;/em&gt;. See &lt;em&gt;managed attribute&lt;/em&gt; and &lt;em&gt;descriptor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;metaclass&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class whose instances are classes. By default, Python classes are instances of &lt;code class="docutils literal"&gt;type&lt;/code&gt;, for example, &lt;code class="docutils literal"&gt;type(int)&lt;/code&gt; is the class &lt;code class="docutils literal"&gt;type&lt;/code&gt;, therefore &lt;code class="docutils literal"&gt;type&lt;/code&gt; is a metaclass. User-defined metaclasses can be created by subclassing &lt;code class="docutils literal"&gt;type&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;metaprogramming&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The practice of writing programs that use runtime information about themselves to change their behavior. For example, an &lt;em&gt;ORM&lt;/em&gt; may introspect model class declarations to determine how to validate database record fields and convert database types to Python types.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;monkey patching&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Dynamically changing a module, class, or function at runtime, usually to add features or fix bugs. Because it is done in memory and not by changing the source code, a monkey patch only affects the currently running instance of the program. Monkey patches break encapsulation and tend to be tightly coupled to the implementation details of the patched code units, so they are seen as temporary workarounds and not a recommended technique for code integration.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;mixin class&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class designed to be subclassed together with one or more additional classes in a multiple-inheritance class tree. A mixin class should never be instantiated, and a concrete subclass of a mixin class should also subclass another nonmixin class.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;mixin method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A concrete method implementation provided in an ABC or in a &lt;em&gt;mixin class&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;mutator&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;See &lt;em&gt;accessor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;name mangling&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The automatic renaming of private attributes from &lt;code class="docutils literal"&gt;__x&lt;/code&gt; to &lt;code class="docutils literal"&gt;_MyClass__x&lt;/code&gt;, performed by the Python interpreter at runtime.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;nonoverriding descriptor&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A &lt;em&gt;descriptor&lt;/em&gt; that does not implement &lt;code class="docutils literal"&gt;__set__&lt;/code&gt; and therefore does not interfere with setting of the &lt;em&gt;managed attribute&lt;/em&gt; in the &lt;em&gt;managed instance&lt;/em&gt;. Consequently, if a namesake attribute is set in the &lt;em&gt;managed instance&lt;/em&gt;, it will shadow the descriptor in that instance. Also called nondata descriptor or shadowable descriptor. Contrast with &lt;em&gt;overriding descriptor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;ORM&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Object-Relational Mapper—an API that provides access to database tables and records as Python classes and objects, providing method calls to perform database operations. SQLAlchemy is a popular standalone Python ORM; the Django and Web2py frameworks have their own bundled ORMs.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;overriding descriptor&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A &lt;em&gt;descriptor&lt;/em&gt; that implements &lt;code class="docutils literal"&gt;__set__&lt;/code&gt; and therefore intercepts and overrides attempts at setting the &lt;em&gt;managed attribute&lt;/em&gt; in the &lt;em&gt;managed instance&lt;/em&gt;. Also called data descriptor or enforced descriptor. Contrast with &lt;em&gt;non-overriding descriptor&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;parallel assignment&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Assigning to several variables from items in an iterable, using syntax like &lt;code class="docutils literal"&gt;a, b = [c, d]&lt;/code&gt;—also known as destructuring assignment. This is a common application of &lt;em&gt;tuple unpacking&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;parameter&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Functions are declared with 0 or more “formal parameters,” which are unbound local variables. When the function is called, the &lt;em&gt;arguments&lt;/em&gt; or “actual parameters” passed are bound to those variables. In this book, I tried to use &lt;em&gt;argument&lt;/em&gt; to refer to an actual parameter passed to a function, and &lt;em&gt;parameter&lt;/em&gt; for a formal parameter in the function declaration. However, that is not always feasible because the terms &lt;em&gt;parameter&lt;/em&gt; and &lt;em&gt;argument&lt;/em&gt; are used interchangeably all over the Python docs and API. See &lt;em&gt;argument&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;prime (verb)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Calling &lt;code class="docutils literal"&gt;next(coro)&lt;/code&gt; on a coroutine to advance it to its first &lt;code class="docutils literal"&gt;yield&lt;/code&gt; expression so that it becomes ready to receive values in succeeding &lt;code class="docutils literal"&gt;coro.send(value)&lt;/code&gt; calls.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;PyPI&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The &lt;a class="reference external" href="https://pypi.python.org"&gt;Python Package Index&lt;/a&gt;, where more than 60,000 packages are available, also known as the &lt;em&gt;Cheese shop&lt;/em&gt; (see &lt;em&gt;Cheese shop&lt;/em&gt;). PyPI is pronounced as “pie-P-eye” to avoid confusion with &lt;em&gt;PyPy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;PyPy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An alternative implementation of the Python programming language using a toolchain that compiles a subset of Python to machine code, so the interpreter source code is actually written in Python. PyPy also includes a JIT to generate machine code for user programs on the fly—like the Java VM does. As of November 2014, PyPy is 6.8 times faster than CPython on average, according to &lt;a class="reference external" href="http://speed.pypy.org"&gt;published benchmarks&lt;/a&gt;. PyPy is pronounced as “pie-pie” to avoid confusion with &lt;em&gt;PyPI&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Pythonic&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Used to praise idiomatic Python code, that makes good use of language features to be concise, readable, and often faster as well. Also said of APIs that enable coding in a way that seems natural to proficient Python programmers. See &lt;em&gt;idiom&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;refcount&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The reference counter that each CPython object keeps internally in order to determine when it can be destroyed by the garbage collector.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;referent&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The object that is the target of a reference. This term is most often used to discuss &lt;em&gt;weak references&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;REPL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Read-eval-print loop, an interactive console, like the standard &lt;code class="docutils literal"&gt;python&lt;/code&gt; or alternatives like &lt;code class="docutils literal"&gt;ipython&lt;/code&gt;, &lt;code class="docutils literal"&gt;bpython&lt;/code&gt;, and Python Anywhere.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;sequence&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Generic name for any iterable data structure with a known size (e.g., &lt;code class="docutils literal"&gt;len(s)&lt;/code&gt;) and allowing item access via 0-based integer indexes (e.g., &lt;code class="docutils literal"&gt;s[0]&lt;/code&gt;). The word &lt;em&gt;sequence&lt;/em&gt; has been part of the Python jargon from the start, but only with Python 2.6 was it formalized as an abstract class in &lt;code class="docutils literal"&gt;collections.abc.Sequence&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;serialization&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Converting an object from its in-memory structure to a binary or text-oriented format for storage or transmission, in a way that allows the future reconstruction of a clone of the object on the same system or on a different one. The &lt;code class="docutils literal"&gt;pickle&lt;/code&gt; module supports serialization of arbitrary Python objects to a binary format.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;shallow copy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A copy of an object which shares references to all the objects that are attributes of the original object. Contrast with &lt;em&gt;deep copy&lt;/em&gt;. Also see &lt;em&gt;aliasing&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;singleton&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An object that is the only existing instance of a class—usually not by accident but because the class is designed to prevent creation of more than one instance. There is also a design pattern named Singleton, which is a recipe for coding such classes. The &lt;code class="docutils literal"&gt;None&lt;/code&gt; object is a singleton in Python.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;slicing&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Producing a subset of a sequence by using the slice notation, e.g., &lt;code class="docutils literal"&gt;my_sequence[2:6]&lt;/code&gt;. Slicing usually copies data to produce a new object; in particular, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;my_sequence[:]&lt;/span&gt;&lt;/code&gt; creates a shallow copy of the entire sequence. But a &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt; object can be sliced to produce a new &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt; that shares data with the original object.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;snake\&lt;sub&gt;case&lt;/sub&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The convention of writing identifiers by joining words with the underscore character (&lt;code class="docutils literal"&gt;_&lt;/code&gt;)—for example, &lt;code class="docutils literal"&gt;run_until_complete&lt;/code&gt;. PEP-8 calls this style “lowercase with words separated by underscores” and recommends it for naming functions, methods, arguments, and variables. For packages, PEP-8 recommends concatenating words with no separators. The Python standard library has many examples of &lt;code class="docutils literal"&gt;snake_case&lt;/code&gt; identifiers, but also many examples of identifiers with no separation between words (e.g., &lt;code class="docutils literal"&gt;getattr&lt;/code&gt;, &lt;code class="docutils literal"&gt;classmethod&lt;/code&gt;, &lt;code class="docutils literal"&gt;isinstance&lt;/code&gt;, &lt;code class="docutils literal"&gt;str.endswith&lt;/code&gt;, etc.). See &lt;em&gt;CamelCase&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;special method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A method with a special name such as &lt;code class="docutils literal"&gt;__getitem__&lt;/code&gt;, spelled with leading and trailing double underscores. Almost all special methods recognized by Python are described in the &lt;a class="reference external" href="http://bit.ly/1GsZwss"&gt;“Data model” chapter&lt;/a&gt; of &lt;em&gt;The Python Language Reference&lt;/em&gt;, but a few that are used only in specific contexts are documented in other parts of the documentation. For example, the &lt;code class="docutils literal"&gt;__missing__&lt;/code&gt; method of mappings is mentioned in &lt;cite&gt;“4.10. Mapping Types — ``dict`&lt;/cite&gt;" &amp;lt;&lt;a class="reference external" href="http://bit.ly/1QS9Ong"&gt;http://bit.ly/1QS9Ong&lt;/a&gt;&amp;gt;`__ in &lt;em&gt;The Python Standard Library&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;storage attribute&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An attribute in a &lt;em&gt;managed instance&lt;/em&gt; used to store the value of an attribute managed by a &lt;em&gt;descriptor&lt;/em&gt;. See also &lt;em&gt;managed attribute&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;strong reference&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A reference that keeps an object alive in Python. Contrast with &lt;em&gt;weak reference&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;tuple unpacking&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Assigning items from an iterable object to a tuple of variables (e.g., &lt;code class="docutils literal"&gt;first, second, third =&lt;/code&gt; my&lt;sub&gt;list&lt;/sub&gt;=). This is the usual term used by Pythonistas, but &lt;em&gt;iterable unpacking&lt;/em&gt; is gaining traction.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;truthy&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Any value &lt;code class="docutils literal"&gt;x&lt;/code&gt; for which &lt;code class="docutils literal"&gt;bool(x)&lt;/code&gt; returns &lt;code class="docutils literal"&gt;True&lt;/code&gt;; Python implicitly uses &lt;code class="docutils literal"&gt;bool&lt;/code&gt; to evaluate objects in Boolean contexts, such as the expression controlling an &lt;code class="docutils literal"&gt;if&lt;/code&gt; or &lt;code class="docutils literal"&gt;while&lt;/code&gt; loop. The opposite of &lt;em&gt;falsy&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;type&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Each specific category of program data, defined by a set of possible values and operations on them. Some Python types are close to machine data types (e.g., &lt;code class="docutils literal"&gt;float&lt;/code&gt; and &lt;code class="docutils literal"&gt;bytes&lt;/code&gt;) while others are extensions (e.g., &lt;code class="docutils literal"&gt;int&lt;/code&gt; is not limited to CPU word size, &lt;code class="docutils literal"&gt;str&lt;/code&gt; holds multibyte Unicode data points) and very high-level abstractions (e.g., &lt;code class="docutils literal"&gt;dict&lt;/code&gt;, &lt;code class="docutils literal"&gt;deque&lt;/code&gt;, etc.). Types may be user defined or built into the interpreter (a “built-in” type). Before the watershed type/class unification in Python 2.2, types and classes were different entities, and user-defined classes could not extend built-in types. Since then, built-in types and new-style classes became compatible, and a class is an instance of &lt;code class="docutils literal"&gt;type&lt;/code&gt;. In Python 3 all classes are new-style classes. See &lt;em&gt;class&lt;/em&gt; and &lt;em&gt;metaclass&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;unbound method&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An instance method accessed directly on a class is not bound to an instance; therefore it's said to be an “unbound method.” To succeed, a call to an unbound method must explicitly pass an instance of the class as the first argument. That instance will be assigned to the &lt;code class="docutils literal"&gt;self&lt;/code&gt; argument in the method. See &lt;em&gt;bound method&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;uniform access principle&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Bertrand Meyer, creator of the Eiffel Language, wrote: “All services offered by a module should be available through a uniform notation, which does not betray whether they are implemented through storage or through computation.” Properties and descriptors allow the implementation of the uniform access principle in Python. The lack of a &lt;code class="docutils literal"&gt;new&lt;/code&gt; operator, making function calls and object instantiation look the same, is another form of this principle: the caller does not need to know whether the invoked object is a class, a function, or any other callable.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;user-defined&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Almost always in the Python docs the word &lt;em&gt;user&lt;/em&gt; refers to you and I—programmers who use the Python language—as opposed to the developers who implement a Python interpreter. So the term “user-defined class” means a class written in Python, as opposed to built-in classes written in C, like &lt;code class="docutils literal"&gt;str&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;view&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Python 3 views are special data structures returned by the &lt;code class="docutils literal"&gt;dict&lt;/code&gt; methods &lt;code class="docutils literal"&gt;.keys()&lt;/code&gt;, &lt;code class="docutils literal"&gt;.values()&lt;/code&gt;, and &lt;code class="docutils literal"&gt;.items()&lt;/code&gt;, providing a dynamic view into the &lt;code class="docutils literal"&gt;dict&lt;/code&gt; keys and values without data duplication, which occurs in Python 2 where those methods return lists. All &lt;code class="docutils literal"&gt;dict&lt;/code&gt; views are iterable and support the &lt;code class="docutils literal"&gt;in&lt;/code&gt; operator. In addition, if the items referenced by the view are all hashable, then the view also implements the &lt;code class="docutils literal"&gt;collections.abc.Set&lt;/code&gt; interface. This is the case for all views returned by the &lt;code class="docutils literal"&gt;.keys()&lt;/code&gt; method, and for views returned by &lt;code class="docutils literal"&gt;.items()&lt;/code&gt; when the values are also hashable.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;virtual subclass&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A class that does not inherit from a superclass but is registered using &lt;code class="docutils literal"&gt;TheSuperClass.register(TheSubClass)&lt;/code&gt;. See documentation for &lt;code class="docutils literal"&gt;`abc.ABCMeta.register&lt;/code&gt; &amp;lt;&lt;a class="reference external" href="http://bit.ly/1DeDbKf"&gt;http://bit.ly/1DeDbKf&lt;/a&gt;&amp;gt;`__.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;wart&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A misfeature of the language. Andrew Kuchling's famous post “Python warts” has been acknowledged by the &lt;em&gt;BDFL&lt;/em&gt; as influential in the decision to break backward-compatibility in the design of Python 3, as most of the failings could not be fixed otherwise. Many of Kuchling's issues were fixed in Python 3.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;weak reference&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A special kind of object reference that does not increase the &lt;em&gt;referent&lt;/em&gt; object reference count. Weak references are created with one of the functions and data structures in the &lt;code class="docutils literal"&gt;weakref&lt;/code&gt; module.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;YAGNI&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;“You Ain't Gonna Need It,” a slogan to avoid implementing functionality that is not immediately necessary based on assumptions about future needs.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Zen of Python&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Type &lt;code class="docutils literal"&gt;import this&lt;/code&gt; into any Python console since version 2.2.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h3&gt;Publish&lt;/h3&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_7d4834ef82474a87ba5c409851a030e8-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;!&lt;/span&gt;pandoc --wrap&lt;span class="o"&gt;=&lt;/span&gt;none &lt;span class="m"&gt;00&lt;/span&gt;.preface.org -o ~/Public/nikola_post/posts/fluent-python.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://alinbxsorcerer.github.io/posts/flunt-python%20/</guid><pubDate>Wed, 01 Aug 2018 12:53:29 GMT</pubDate></item></channel></rss>